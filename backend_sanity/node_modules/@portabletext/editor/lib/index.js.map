{"version":3,"file":"index.js","sources":["../src/editor/behavior/behavior.types.ts","../src/editor/behavior/behavior.utils.ts","../src/editor/behavior/behavior.markdown.ts","../src/utils/debug.ts","../src/utils/paths.ts","../src/utils/ranges.ts","../src/utils/selection.ts","../src/utils/values.ts","../src/utils/weakMaps.ts","../src/editor/nodes/DefaultObject.tsx","../src/editor/nodes/index.ts","../src/editor/components/DraggableBlock.tsx","../src/editor/components/Element.tsx","../src/editor/hooks/usePortableTextEditor.ts","../src/editor/nodes/DefaultAnnotation.tsx","../src/utils/getPortableTextMemberSchemaTypes.ts","../src/utils/schema.ts","../src/utils/operationToPatches.ts","../src/editor/plugins/create-with-event-listeners.ts","../src/editor/plugins/createWithEditableAPI.ts","../src/utils/withChanges.ts","../src/utils/withUndoRedo.ts","../src/editor/plugins/createWithMaxBlocks.ts","../src/editor/plugins/createWithObjectKeys.ts","../../../node_modules/.pnpm/@sanity+diff-match-patch@3.1.1/node_modules/@sanity/diff-match-patch/dist/index.js","../src/utils/applyPatch.ts","../src/utils/withoutPatching.ts","../src/editor/plugins/createWithUndoRedo.ts","../src/editor/plugins/createWithPatches.ts","../src/editor/plugins/createWithPlaceholderBlock.ts","../src/editor/plugins/createWithPortableTextBlockStyle.ts","../src/editor/plugins/createWithPortableTextLists.ts","../../../node_modules/.pnpm/@portabletext+toolkit@2.0.15/node_modules/@portabletext/toolkit/dist/index.js","../src/utils/sibling-utils.ts","../src/editor/plugins/createWithPortableTextMarkModel.ts","../src/editor/plugins/createWithPortableTextSelections.ts","../src/editor/plugins/createWithSchemaTypes.ts","../src/editor/plugins/createWithUtils.ts","../src/editor/plugins/createWithHotKeys.ts","../src/utils/validateValue.ts","../src/editor/plugins/createWithInsertData.ts","../src/editor/plugins/index.ts","../src/editor/components/SlateContainer.tsx","../src/editor/hooks/usePortableTextReadOnly.ts","../src/editor/hooks/useSyncValue.ts","../src/editor/components/Synchronizer.tsx","../src/editor/editor-actor-context.ts","../src/editor/behavior/behavior.action.insert-break.ts","../src/editor/behavior/behavior.actions.ts","../src/editor/behavior/behavior.core.block-objects.ts","../src/editor/behavior/behavior.core.lists.ts","../src/editor/behavior/behavior.core.ts","../src/editor/editor-machine.ts","../src/editor/hooks/usePortableTextEditorSelection.tsx","../src/editor/key-generator.ts","../src/editor/PortableTextEditor.tsx","../src/editor/components/Leaf.tsx","../src/editor/Editable.tsx","../../../node_modules/.pnpm/use-isomorphic-layout-effect@1.1.2_@types+react@18.3.12_react@18.3.1/node_modules/use-isomorphic-layout-effect/dist/use-isomorphic-layout-effect.esm.js","../../../node_modules/.pnpm/use-sync-external-store@1.2.2_react@18.3.1/node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.production.min.js","../../../node_modules/.pnpm/use-sync-external-store@1.2.2_react@18.3.1/node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js","../../../node_modules/.pnpm/use-sync-external-store@1.2.2_react@18.3.1/node_modules/use-sync-external-store/shim/index.js","../../../node_modules/.pnpm/use-sync-external-store@1.2.2_react@18.3.1/node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.production.min.js","../../../node_modules/.pnpm/use-sync-external-store@1.2.2_react@18.3.1/node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js","../../../node_modules/.pnpm/use-sync-external-store@1.2.2_react@18.3.1/node_modules/use-sync-external-store/shim/with-selector.js","../../../node_modules/.pnpm/@xstate+react@4.1.3_@types+react@18.3.12_react@18.3.1_xstate@5.18.2/node_modules/@xstate/react/dist/xstate-react.esm.js","../src/editor/use-editor.ts"],"sourcesContent":["import type {KeyedSegment, PortableTextBlock} from '@sanity/types'\nimport type {TextUnit} from 'slate'\nimport type {TextInsertTextOptions} from 'slate/dist/interfaces/transforms/text'\nimport type {\n  EditorSelection,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\n\n/**\n * @alpha\n */\nexport type BehaviorContext = {\n  schema: PortableTextMemberSchemaTypes\n  value: Array<PortableTextBlock>\n  selection: NonNullable<EditorSelection>\n}\n\n/**\n * @alpha\n */\nexport type BehaviorEvent =\n  | {\n      type: 'delete backward'\n      unit: TextUnit\n    }\n  | {\n      type: 'delete forward'\n      unit: TextUnit\n    }\n  | {\n      type: 'insert soft break'\n    }\n  | {\n      type: 'insert break'\n    }\n  | {\n      type: 'insert text'\n      text: string\n      options?: TextInsertTextOptions\n    }\n\n/**\n * @alpha\n */\nexport type BehaviorGuard<\n  TBehaviorEvent extends BehaviorEvent,\n  TGuardResponse,\n> = ({\n  context,\n  event,\n}: {\n  event: TBehaviorEvent\n  context: BehaviorContext\n}) => TGuardResponse | false\n\n/**\n * @alpha\n */\nexport type BehaviorActionIntend =\n  | BehaviorEvent\n  | {\n      type: 'insert text block'\n      decorators: Array<string>\n    }\n  | {\n      type: 'set block'\n      paths: Array<[KeyedSegment]>\n      style?: string\n      listItem?: string\n      level?: number\n    }\n  | {\n      type: 'unset block'\n      paths: Array<[KeyedSegment]>\n      props: Array<'style' | 'listItem' | 'level'>\n    }\n  | {\n      type: 'delete'\n      selection: NonNullable<EditorSelection>\n    }\n  | {\n      type: 'effect'\n      effect: () => void\n    }\n  | {\n      type: 'select'\n      selection: EditorSelection\n    }\n\n/**\n * @alpha\n */\nexport type BehaviorAction = BehaviorActionIntend & {\n  editor: PortableTextSlateEditor\n}\n\n/**\n * @alpha\n */\nexport type Behavior<\n  TBehaviorEventType extends BehaviorEvent['type'] = BehaviorEvent['type'],\n  TGuardResponse = true,\n> = {\n  /**\n   * The internal editor event that triggers this behavior.\n   */\n  on: TBehaviorEventType\n  /**\n   * Predicate function that determines if the behavior should be executed.\n   * Returning a non-nullable value from the guard will pass the value to the\n   * actions and execute them.\n   */\n  guard?: BehaviorGuard<\n    PickFromUnion<BehaviorEvent, 'type', TBehaviorEventType>,\n    TGuardResponse\n  >\n  /**\n   * Array of behavior action sets.\n   */\n  actions: Array<BehaviorActionIntendSet<TBehaviorEventType, TGuardResponse>>\n}\n\n/**\n * @alpha\n */\nexport type BehaviorActionIntendSet<\n  TBehaviorEventType extends BehaviorEvent['type'] = BehaviorEvent['type'],\n  TGuardResponse = true,\n> = (\n  {\n    context,\n    event,\n  }: {\n    context: BehaviorContext\n    event: PickFromUnion<BehaviorEvent, 'type', TBehaviorEventType>\n  },\n  guardResponse: TGuardResponse,\n) => Array<BehaviorActionIntend>\n\n/**\n * @alpha\n */\nexport function defineBehavior<\n  TBehaviorEventType extends BehaviorEvent['type'],\n  TGuardResponse = true,\n>(behavior: Behavior<TBehaviorEventType, TGuardResponse>): Behavior {\n  return behavior as unknown as Behavior\n}\n\n/**\n * @alpha\n */\nexport type PickFromUnion<\n  TUnion,\n  TTagKey extends keyof TUnion,\n  TPickedTags extends TUnion[TTagKey],\n> = TUnion extends Record<TTagKey, TPickedTags> ? TUnion : never\n","import {\n  isKeySegment,\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type KeyedSegment,\n  type PortableTextBlock,\n  type PortableTextObject,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport type {BehaviorContext} from './behavior.types'\n\n/**\n * Selection utilities\n */\n\nexport function selectionIsCollapsed(context: BehaviorContext) {\n  return (\n    context.selection?.anchor.path.join() ===\n      context.selection?.focus.path.join() &&\n    context.selection?.anchor.offset === context.selection?.focus.offset\n  )\n}\n\n/**\n * Value utilities\n */\n\nexport function getFocusBlock(\n  context: BehaviorContext,\n): {node: PortableTextBlock; path: [KeyedSegment]} | undefined {\n  const key = context.selection\n    ? isKeySegment(context.selection.focus.path[0])\n      ? context.selection.focus.path[0]._key\n      : undefined\n    : undefined\n\n  const node = key\n    ? context.value.find((block) => block._key === key)\n    : undefined\n\n  return node && key ? {node, path: [{_key: key}]} : undefined\n}\n\nexport function getFocusTextBlock(\n  context: BehaviorContext,\n): {node: PortableTextTextBlock; path: [KeyedSegment]} | undefined {\n  const focusBlock = getFocusBlock(context)\n\n  return focusBlock && isPortableTextTextBlock(focusBlock.node)\n    ? {node: focusBlock.node, path: focusBlock.path}\n    : undefined\n}\n\nexport function getFocusBlockObject(\n  context: BehaviorContext,\n): {node: PortableTextObject; path: [KeyedSegment]} | undefined {\n  const focusBlock = getFocusBlock(context)\n\n  return focusBlock && !isPortableTextTextBlock(focusBlock.node)\n    ? {node: focusBlock.node, path: focusBlock.path}\n    : undefined\n}\n\nexport function getFocusChild(context: BehaviorContext):\n  | {\n      node: PortableTextObject | PortableTextSpan\n      path: [KeyedSegment, 'children', KeyedSegment]\n    }\n  | undefined {\n  const focusBlock = getFocusTextBlock(context)\n\n  if (!focusBlock) {\n    return undefined\n  }\n\n  const key = context.selection\n    ? isKeySegment(context.selection.focus.path[2])\n      ? context.selection.focus.path[2]._key\n      : undefined\n    : undefined\n\n  const node = key\n    ? focusBlock.node.children.find((span) => span._key === key)\n    : undefined\n\n  return node && key\n    ? {node, path: [...focusBlock.path, 'children', {_key: key}]}\n    : undefined\n}\n\nexport function getFocusSpan(\n  context: BehaviorContext,\n):\n  | {node: PortableTextSpan; path: [KeyedSegment, 'children', KeyedSegment]}\n  | undefined {\n  const focusChild = getFocusChild(context)\n\n  return focusChild && isPortableTextSpan(focusChild.node)\n    ? {node: focusChild.node, path: focusChild.path}\n    : undefined\n}\n\nexport function getSelectionStartBlock(context: BehaviorContext):\n  | {\n      node: PortableTextBlock\n      path: [KeyedSegment]\n    }\n  | undefined {\n  const key = context.selection.backward\n    ? isKeySegment(context.selection.focus.path[0])\n      ? context.selection.focus.path[0]._key\n      : undefined\n    : isKeySegment(context.selection.anchor.path[0])\n      ? context.selection.anchor.path[0]._key\n      : undefined\n\n  const node = key\n    ? context.value.find((block) => block._key === key)\n    : undefined\n\n  return node && key ? {node, path: [{_key: key}]} : undefined\n}\n\nexport function getSelectionEndBlock(context: BehaviorContext):\n  | {\n      node: PortableTextBlock\n      path: [KeyedSegment]\n    }\n  | undefined {\n  const key = context.selection.backward\n    ? isKeySegment(context.selection.anchor.path[0])\n      ? context.selection.anchor.path[0]._key\n      : undefined\n    : isKeySegment(context.selection.focus.path[0])\n      ? context.selection.focus.path[0]._key\n      : undefined\n\n  const node = key\n    ? context.value.find((block) => block._key === key)\n    : undefined\n\n  return node && key ? {node, path: [{_key: key}]} : undefined\n}\n\nexport function getPreviousBlock(\n  context: BehaviorContext,\n): {node: PortableTextBlock; path: [KeyedSegment]} | undefined {\n  let previousBlock: {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n  const selectionStartBlock = getSelectionStartBlock(context)\n\n  if (!selectionStartBlock) {\n    return undefined\n  }\n\n  let foundSelectionStartBlock = false\n\n  for (const block of context.value) {\n    if (block._key === selectionStartBlock.node._key) {\n      foundSelectionStartBlock = true\n      break\n    }\n\n    previousBlock = {node: block, path: [{_key: block._key}]}\n  }\n\n  if (foundSelectionStartBlock && previousBlock) {\n    return previousBlock\n  }\n\n  return undefined\n}\n\nexport function getNextBlock(\n  context: BehaviorContext,\n): {node: PortableTextBlock; path: [KeyedSegment]} | undefined {\n  let nextBlock: {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n  const selectionEndBlock = getSelectionEndBlock(context)\n\n  if (!selectionEndBlock) {\n    return undefined\n  }\n\n  let foundSelectionEndBlock = false\n\n  for (const block of context.value) {\n    if (block._key === selectionEndBlock.node._key) {\n      foundSelectionEndBlock = true\n      continue\n    }\n\n    if (foundSelectionEndBlock) {\n      nextBlock = {node: block, path: [{_key: block._key}]}\n      break\n    }\n  }\n\n  if (foundSelectionEndBlock && nextBlock) {\n    return nextBlock\n  }\n\n  return undefined\n}\n\nexport function isEmptyTextBlock(block: PortableTextTextBlock) {\n  return block.children.length === 1 && block.children[0].text === ''\n}\n","import type {PortableTextMemberSchemaTypes} from '../../types/editor'\nimport {defineBehavior} from './behavior.types'\nimport {\n  getFocusSpan,\n  getFocusTextBlock,\n  selectionIsCollapsed,\n} from './behavior.utils'\n\n/**\n * @alpha\n */\nexport type MarkdownBehaviorsConfig = {\n  mapDefaultStyle: (schema: PortableTextMemberSchemaTypes) => string | undefined\n  mapHeadingStyle: (\n    schema: PortableTextMemberSchemaTypes,\n    level: number,\n  ) => string | undefined\n  mapBlockquoteStyle: (\n    schema: PortableTextMemberSchemaTypes,\n  ) => string | undefined\n  mapUnorderedListStyle: (\n    schema: PortableTextMemberSchemaTypes,\n  ) => string | undefined\n  mapOrderedListStyle: (\n    schema: PortableTextMemberSchemaTypes,\n  ) => string | undefined\n}\n\n/**\n * @alpha\n */\nexport function createMarkdownBehaviors(config: MarkdownBehaviorsConfig) {\n  const automaticStyleOnSpace = defineBehavior({\n    on: 'insert text',\n    guard: ({context, event}) => {\n      const isSpace = event.text === ' '\n\n      if (!isSpace) {\n        return false\n      }\n\n      const selectionCollapsed = selectionIsCollapsed(context)\n      const focusTextBlock = getFocusTextBlock(context)\n      const focusSpan = getFocusSpan(context)\n\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n        return false\n      }\n\n      const looksLikeMarkdownHeading = /^#+/.test(focusSpan.node.text)\n      const headingStyle = config.mapHeadingStyle(\n        context.schema,\n        focusSpan.node.text.length,\n      )\n\n      const looksLikeMarkdownQuote = /^>/.test(focusSpan.node.text)\n      const blockquoteStyle = config.mapBlockquoteStyle(context.schema)\n\n      if (looksLikeMarkdownHeading && headingStyle !== undefined) {\n        return {focusTextBlock, focusSpan, style: headingStyle}\n      }\n\n      if (looksLikeMarkdownQuote && blockquoteStyle !== undefined) {\n        return {focusTextBlock, focusSpan, style: blockquoteStyle}\n      }\n\n      return false\n    },\n    actions: [\n      () => [\n        {\n          type: 'insert text',\n          text: ' ',\n        },\n      ],\n      (_, {focusTextBlock, focusSpan, style}) => [\n        {\n          type: 'set block',\n          style,\n          paths: [focusTextBlock.path],\n        },\n        {\n          type: 'delete',\n          selection: {\n            anchor: {path: focusSpan.path, offset: 0},\n            focus: {\n              path: focusSpan.path,\n              offset: focusSpan.node.text.length + 1,\n            },\n          },\n        },\n      ],\n    ],\n  })\n  const clearStyleOnBackspace = defineBehavior({\n    on: 'delete backward',\n    guard: ({context}) => {\n      const selectionCollapsed = selectionIsCollapsed(context)\n      const focusTextBlock = getFocusTextBlock(context)\n      const focusSpan = getFocusSpan(context)\n\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n        return false\n      }\n\n      const defaultStyle = config.mapDefaultStyle(context.schema)\n\n      if (\n        defaultStyle &&\n        focusTextBlock.node.children.length === 1 &&\n        focusTextBlock.node.style !== config.mapDefaultStyle(context.schema) &&\n        focusSpan.node.text === ''\n      ) {\n        return {defaultStyle, focusTextBlock}\n      }\n\n      return false\n    },\n    actions: [\n      (_, {defaultStyle, focusTextBlock}) => [\n        {\n          type: 'set block',\n          style: defaultStyle,\n          paths: [focusTextBlock.path],\n        },\n      ],\n    ],\n  })\n\n  const automaticListOnSpace = defineBehavior({\n    on: 'insert text',\n    guard: ({context, event}) => {\n      const isSpace = event.text === ' '\n\n      if (!isSpace) {\n        return false\n      }\n\n      const selectionCollapsed = selectionIsCollapsed(context)\n      const focusTextBlock = getFocusTextBlock(context)\n      const focusSpan = getFocusSpan(context)\n\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n        return false\n      }\n\n      const looksLikeUnorderedList = /^-/.test(focusSpan.node.text)\n      const unorderedListStyle = config.mapUnorderedListStyle(context.schema)\n\n      if (looksLikeUnorderedList && unorderedListStyle !== undefined) {\n        return {focusTextBlock, focusSpan, listItem: unorderedListStyle}\n      }\n\n      const looksLikeOrderedList = /^1./.test(focusSpan.node.text)\n      const orderedListStyle = config.mapOrderedListStyle(context.schema)\n\n      if (looksLikeOrderedList && orderedListStyle !== undefined) {\n        return {focusTextBlock, focusSpan, listItem: orderedListStyle}\n      }\n\n      return false\n    },\n    actions: [\n      () => [\n        {\n          type: 'insert text',\n          text: ' ',\n        },\n      ],\n      (_, {focusTextBlock, focusSpan, listItem}) => [\n        {\n          type: 'unset block',\n          props: ['style'],\n          paths: [focusTextBlock.path],\n        },\n        {\n          type: 'set block',\n          listItem,\n          level: 1,\n          paths: [focusTextBlock.path],\n        },\n        {\n          type: 'delete',\n          selection: {\n            anchor: {path: focusSpan.path, offset: 0},\n            focus: {\n              path: focusSpan.path,\n              offset: focusSpan.node.text.length + 1,\n            },\n          },\n        },\n      ],\n    ],\n  })\n\n  const markdownBehaviors = [\n    automaticStyleOnSpace,\n    clearStyleOnBackspace,\n    automaticListOnSpace,\n  ]\n\n  return markdownBehaviors\n}\n","import debug from 'debug'\n\nconst rootName = 'sanity-pte:'\n\nexport default debug(rootName)\nexport function debugWithName(name: string): debug.Debugger {\n  const namespace = `${rootName}${name}`\n  if (debug && debug.enabled(namespace)) {\n    return debug(namespace)\n  }\n  return debug(rootName)\n}\n","import {isKeySegment, type Path} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {\n  Editor,\n  Element,\n  type Descendant,\n  type Point,\n  type Path as SlatePath,\n} from 'slate'\nimport type {\n  EditorSelectionPoint,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport type {ObjectWithKeyAndType} from './ranges'\n\nexport function createKeyedPath(\n  point: Point,\n  value: ObjectWithKeyAndType[] | undefined,\n  types: PortableTextMemberSchemaTypes,\n): Path | null {\n  const blockPath = [point.path[0]]\n  if (!value) {\n    return null\n  }\n  const block = value[blockPath[0]]\n  if (!block) {\n    return null\n  }\n  const keyedBlockPath = [{_key: block._key}]\n  if (block._type !== types.block.name) {\n    return keyedBlockPath as Path\n  }\n  let keyedChildPath: Path | undefined\n  const childPath = point.path.slice(0, 2)\n  const child = Array.isArray(block.children) && block.children[childPath[1]]\n  if (child) {\n    keyedChildPath = ['children', {_key: child._key}]\n  }\n  return (\n    keyedChildPath ? [...keyedBlockPath, ...keyedChildPath] : keyedBlockPath\n  ) as Path\n}\n\nexport function createArrayedPath(\n  point: EditorSelectionPoint,\n  editor: Editor,\n): SlatePath {\n  if (!editor) {\n    return []\n  }\n  const [block, blockPath] = Array.from(\n    Editor.nodes(editor, {\n      at: [],\n      match: (n) =>\n        isKeySegment(point.path[0]) &&\n        (n as Descendant)._key === point.path[0]._key,\n    }),\n  )[0] || [undefined, undefined]\n  if (!block || !Element.isElement(block)) {\n    return []\n  }\n  if (editor.isVoid(block)) {\n    return [blockPath[0], 0]\n  }\n  const childPath = [point.path[2]]\n  const childIndex = block.children.findIndex((child) =>\n    isEqual([{_key: child._key}], childPath),\n  )\n  if (childIndex >= 0 && block.children[childIndex]) {\n    const child = block.children[childIndex]\n    if (Element.isElement(child) && editor.isVoid(child)) {\n      return blockPath.concat(childIndex).concat(0)\n    }\n    return blockPath.concat(childIndex)\n  }\n  return blockPath\n}\n","import {Point, Range, type BaseRange, type Editor, type Operation} from 'slate'\nimport type {\n  EditorSelection,\n  EditorSelectionPoint,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {createArrayedPath, createKeyedPath} from './paths'\n\nexport interface ObjectWithKeyAndType {\n  _key: string\n  _type: string\n  children?: ObjectWithKeyAndType[]\n}\n\nexport function toPortableTextRange(\n  value: ObjectWithKeyAndType[] | undefined,\n  range: BaseRange | Partial<BaseRange> | null,\n  types: PortableTextMemberSchemaTypes,\n): EditorSelection {\n  if (!range) {\n    return null\n  }\n  let anchor: EditorSelectionPoint | null = null\n  let focus: EditorSelectionPoint | null = null\n  const anchorPath = range.anchor && createKeyedPath(range.anchor, value, types)\n  if (anchorPath && range.anchor) {\n    anchor = {\n      path: anchorPath,\n      offset: range.anchor.offset,\n    }\n  }\n  const focusPath = range.focus && createKeyedPath(range.focus, value, types)\n  if (focusPath && range.focus) {\n    focus = {\n      path: focusPath,\n      offset: range.focus.offset,\n    }\n  }\n  const backward = Boolean(\n    Range.isRange(range) ? Range.isBackward(range) : undefined,\n  )\n  return anchor && focus ? {anchor, focus, backward} : null\n}\n\nexport function toSlateRange(\n  selection: EditorSelection,\n  editor: Editor,\n): Range | null {\n  if (!selection || !editor) {\n    return null\n  }\n  const anchor = {\n    path: createArrayedPath(selection.anchor, editor),\n    offset: selection.anchor.offset,\n  }\n  const focus = {\n    path: createArrayedPath(selection.focus, editor),\n    offset: selection.focus.offset,\n  }\n  if (focus.path.length === 0 || anchor.path.length === 0) {\n    return null\n  }\n  const range = anchor && focus ? {anchor, focus} : null\n  return range\n}\n\nexport function moveRangeByOperation(\n  range: Range,\n  operation: Operation,\n): Range | null {\n  const anchor = Point.transform(range.anchor, operation)\n  const focus = Point.transform(range.focus, operation)\n\n  if (anchor === null || focus === null) {\n    return null\n  }\n\n  if (Point.equals(anchor, range.anchor) && Point.equals(focus, range.focus)) {\n    return range\n  }\n\n  return {anchor, focus}\n}\n","import type {Path, PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport type {EditorSelection, EditorSelectionPoint} from '../types/editor'\n\nexport function normalizePoint(\n  point: EditorSelectionPoint,\n  value: PortableTextBlock[],\n): EditorSelectionPoint | null {\n  if (!point || !value) {\n    return null\n  }\n  const newPath: Path = []\n  let newOffset: number = point.offset || 0\n  const blockKey =\n    typeof point.path[0] === 'object' &&\n    '_key' in point.path[0] &&\n    point.path[0]._key\n  const childKey =\n    typeof point.path[2] === 'object' &&\n    '_key' in point.path[2] &&\n    point.path[2]._key\n  const block: PortableTextBlock | undefined = value.find(\n    (blk) => blk._key === blockKey,\n  )\n  if (block) {\n    newPath.push({_key: block._key})\n  } else {\n    return null\n  }\n  if (block && point.path[1] === 'children') {\n    if (\n      !block.children ||\n      (Array.isArray(block.children) && block.children.length === 0)\n    ) {\n      return null\n    }\n    const child =\n      Array.isArray(block.children) &&\n      block.children.find((cld) => cld._key === childKey)\n    if (child) {\n      newPath.push('children')\n      newPath.push({_key: child._key})\n      newOffset =\n        child.text && child.text.length >= point.offset\n          ? point.offset\n          : (child.text && child.text.length) || 0\n    } else {\n      return null\n    }\n  }\n  return {path: newPath, offset: newOffset}\n}\n\nexport function normalizeSelection(\n  selection: EditorSelection,\n  value: PortableTextBlock[] | undefined,\n): EditorSelection | null {\n  if (!selection || !value || value.length === 0) {\n    return null\n  }\n  let newAnchor: EditorSelectionPoint | null = null\n  let newFocus: EditorSelectionPoint | null = null\n  const {anchor, focus} = selection\n  if (\n    anchor &&\n    value.find((blk) => isEqual({_key: blk._key}, anchor.path[0]))\n  ) {\n    newAnchor = normalizePoint(anchor, value)\n  }\n  if (focus && value.find((blk) => isEqual({_key: blk._key}, focus.path[0]))) {\n    newFocus = normalizePoint(focus, value)\n  }\n  if (newAnchor && newFocus) {\n    return {anchor: newAnchor, focus: newFocus, backward: selection.backward}\n  }\n  return null\n}\n","import type {\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Element, Text, type Descendant, type Node} from 'slate'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\n\nexport const EMPTY_MARKDEFS: PortableTextObject[] = []\n\nexport const VOID_CHILD_KEY = 'void-child'\n\ntype Partial<T> = {\n  [P in keyof T]?: T[P]\n}\n\nfunction keepObjectEquality(\n  object: PortableTextBlock | PortableTextChild,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild>,\n) {\n  const value = keyMap[object._key]\n  if (value && isEqual(object, value)) {\n    return value\n  }\n  keyMap[object._key] = object\n  return object\n}\n\nexport function toSlateValue(\n  value: PortableTextBlock[] | undefined,\n  {schemaTypes}: {schemaTypes: PortableTextMemberSchemaTypes},\n  keyMap: Record<string, any> = {},\n): Descendant[] {\n  if (value && Array.isArray(value)) {\n    return value.map((block) => {\n      const {_type, _key, ...rest} = block\n      const voidChildren = [\n        {_key: VOID_CHILD_KEY, _type: 'span', text: '', marks: []},\n      ]\n      const isPortableText = block && block._type === schemaTypes.block.name\n      if (isPortableText) {\n        const textBlock = block as PortableTextTextBlock\n        let hasInlines = false\n        const hasMissingStyle = typeof textBlock.style === 'undefined'\n        const hasMissingMarkDefs = typeof textBlock.markDefs === 'undefined'\n        const hasMissingChildren = typeof textBlock.children === 'undefined'\n\n        const children = (textBlock.children || []).map((child) => {\n          const {_type: cType, _key: cKey, ...cRest} = child\n          // Return 'slate' version of inline object where the actual\n          // value is stored in the `value` property.\n          // In slate, inline objects are represented as regular\n          // children with actual text node in order to be able to\n          // be selected the same way as the rest of the (text) content.\n          if (cType !== 'span') {\n            hasInlines = true\n            return keepObjectEquality(\n              {\n                _type: cType,\n                _key: cKey,\n                children: voidChildren,\n                value: cRest,\n                __inline: true,\n              },\n              keyMap,\n            )\n          }\n          // Original child object (span)\n          return child\n        })\n        // Return original block\n        if (\n          !hasMissingStyle &&\n          !hasMissingMarkDefs &&\n          !hasMissingChildren &&\n          !hasInlines &&\n          Element.isElement(block)\n        ) {\n          // Original object\n          return block\n        }\n        // TODO: remove this when we have a better way to handle missing style\n        if (hasMissingStyle) {\n          rest.style = schemaTypes.styles[0].value\n        }\n        return keepObjectEquality({_type, _key, ...rest, children}, keyMap)\n      }\n      return keepObjectEquality(\n        {\n          _type,\n          _key,\n          children: voidChildren,\n          value: rest,\n        },\n        keyMap,\n      )\n    }) as Descendant[]\n  }\n  return []\n}\n\nexport function fromSlateValue(\n  value: Descendant[],\n  textBlockType: string,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild> = {},\n): PortableTextBlock[] {\n  return value.map((block) => {\n    const {_key, _type} = block\n    if (!_key || !_type) {\n      throw new Error('Not a valid block')\n    }\n    if (\n      _type === textBlockType &&\n      'children' in block &&\n      Array.isArray(block.children) &&\n      _key\n    ) {\n      let hasInlines = false\n      const children = block.children.map((child) => {\n        const {_type: _cType} = child\n        if ('value' in child && _cType !== 'span') {\n          hasInlines = true\n          const {\n            value: v,\n            _key: k,\n            _type: t,\n            __inline: _i,\n            children: _c,\n            ...rest\n          } = child\n          return keepObjectEquality(\n            {...rest, ...v, _key: k as string, _type: t as string},\n            keyMap,\n          )\n        }\n        return child\n      })\n      if (!hasInlines) {\n        return block as PortableTextBlock // Original object\n      }\n      return keepObjectEquality(\n        {...block, children, _key, _type},\n        keyMap,\n      ) as PortableTextBlock\n    }\n    const blockValue = 'value' in block && block.value\n    return keepObjectEquality(\n      {_key, _type, ...(typeof blockValue === 'object' ? blockValue : {})},\n      keyMap,\n    ) as PortableTextBlock\n  })\n}\n\nexport function isEqualToEmptyEditor(\n  children: Descendant[] | PortableTextBlock[],\n  schemaTypes: PortableTextMemberSchemaTypes,\n): boolean {\n  return (\n    children === undefined ||\n    (children && Array.isArray(children) && children.length === 0) ||\n    (children &&\n      Array.isArray(children) &&\n      children.length === 1 &&\n      Element.isElement(children[0]) &&\n      children[0]._type === schemaTypes.block.name &&\n      'style' in children[0] &&\n      children[0].style === schemaTypes.styles[0].value &&\n      !('listItem' in children[0]) &&\n      Array.isArray(children[0].children) &&\n      children[0].children.length === 1 &&\n      Text.isText(children[0].children[0]) &&\n      children[0].children[0]._type === 'span' &&\n      !children[0].children[0].marks?.join('') &&\n      children[0].children[0].text === '')\n  )\n}\n\nexport function findBlockAndIndexFromPath(\n  firstPathSegment: PathSegment,\n  children: (Node | Partial<Node>)[],\n): [Element | undefined, number | undefined] {\n  let blockIndex = -1\n  const isNumber = Number.isInteger(Number(firstPathSegment))\n  if (isNumber) {\n    blockIndex = Number(firstPathSegment)\n  } else if (children) {\n    blockIndex = children.findIndex(\n      (blk) =>\n        Element.isElement(blk) && isEqual({_key: blk._key}, firstPathSegment),\n    )\n  }\n  if (blockIndex > -1) {\n    return [children[blockIndex] as Element, blockIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function findChildAndIndexFromPath(\n  secondPathSegment: PathSegment,\n  block: Element,\n): [Element | Text | undefined, number] {\n  let childIndex = -1\n  const isNumber = Number.isInteger(Number(secondPathSegment))\n  if (isNumber) {\n    childIndex = Number(secondPathSegment)\n  } else {\n    childIndex = block.children.findIndex((child) =>\n      isEqual({_key: child._key}, secondPathSegment),\n    )\n  }\n  if (childIndex > -1) {\n    return [block.children[childIndex] as Element | Text, childIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function getValueOrInitialValue(\n  value: unknown,\n  initialValue: PortableTextBlock[],\n): PortableTextBlock[] | undefined {\n  if (value && Array.isArray(value) && value.length > 0) {\n    return value\n  }\n  return initialValue\n}\n","import type {Editor, Element, Range} from 'slate'\nimport type {EditorSelection} from '..'\n\n// Is the editor currently receiving remote changes that are being applied to the content?\nexport const IS_PROCESSING_REMOTE_CHANGES: WeakMap<Editor, boolean> =\n  new WeakMap()\n// Is the editor currently producing local changes that are not yet submitted?\nexport const IS_PROCESSING_LOCAL_CHANGES: WeakMap<Editor, boolean> =\n  new WeakMap()\n\n// Is the editor dragging something?\nexport const IS_DRAGGING: WeakMap<Editor, boolean> = new WeakMap()\n// Is the editor dragging a element?\nexport const IS_DRAGGING_BLOCK_ELEMENT: WeakMap<Editor, Element> = new WeakMap()\n\n// When dragging elements, this will be the target element\nexport const IS_DRAGGING_ELEMENT_TARGET: WeakMap<Editor, Element> =\n  new WeakMap()\n// Target position for dragging over a block\nexport const IS_DRAGGING_BLOCK_TARGET_POSITION: WeakMap<\n  Editor,\n  'top' | 'bottom'\n> = new WeakMap()\n\nexport const KEY_TO_SLATE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\nexport const KEY_TO_VALUE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\n\n// Keep object relation to slate range in the portable-text-range\nexport const SLATE_TO_PORTABLE_TEXT_RANGE = new WeakMap<\n  Range,\n  EditorSelection\n>()\n","import type {PortableTextBlock, PortableTextChild} from '@sanity/types'\n\ntype Props = {\n  value: PortableTextBlock | PortableTextChild\n}\n\nconst DefaultObject = (props: Props): JSX.Element => {\n  return (\n    <div>\n      <pre>{JSON.stringify(props.value, null, 2)}</pre>\n    </div>\n  )\n}\n\nDefaultObject.displayName = 'DefaultObject'\n\nexport default DefaultObject\n","import {styled} from 'styled-components'\n\nexport const DefaultBlockObject = styled.div<{selected: boolean}>`\n  user-select: none;\n  border: ${(props) => {\n    if (props.selected) {\n      return '1px solid blue'\n    }\n    return '1px solid transparent'\n  }};\n`\n\nexport const DefaultInlineObject = styled.span<{selected: boolean}>`\n  background: #999;\n  border: ${(props) => {\n    if (props.selected) {\n      return '1px solid blue'\n    }\n    return '1px solid transparent'\n  }};\n`\n\ntype ListItemProps = {listLevel: number; listStyle: string}\n\nexport const DefaultListItem = styled.div<ListItemProps>`\n  &.pt-list-item {\n    width: fit-content;\n    position: relative;\n    display: block;\n\n    /* Important 'transform' in order to force refresh the ::before and ::after rules\n      in Webkit: https://stackoverflow.com/a/21947628/831480\n    */\n    transform: translateZ(0);\n    margin-left: ${(props: ListItemProps) => getLeftPositionForListLevel(props.listLevel)};\n  }\n  &.pt-list-item > .pt-list-item-inner {\n    display: flex;\n    margin: 0;\n    padding: 0;\n    &:before {\n      justify-content: flex-start;\n      vertical-align: top;\n    }\n  }\n  &.pt-list-item-bullet > .pt-list-item-inner:before {\n      content: '${(props: ListItemProps) =>\n        getContentForListLevelAndStyle(props.listLevel, props.listStyle)}';\n      font-size: 0.4375rem; /* 7px */\n      line-height: 1.5rem; /* Same as body text */\n      /* Optical alignment */\n      position: relative;\n    }\n  }\n  &.pt-list-item-bullet > .pt-list-item-inner {\n    &:before {\n      min-width: 1.5rem; /* Make sure space between bullet and text never shrinks */\n    }\n  }\n  &.pt-list-item-number {\n    counter-increment: ${(props: {listLevel: number}) =>\n      getCounterIncrementForListLevel(props.listLevel)};\n    counter-reset: ${(props: {listLevel: number}) => getCounterResetForListLevel(props.listLevel)};\n  }\n  & + :not(.pt-list-item-number) {\n    counter-reset: listItemNumber;\n  }\n  &.pt-list-item-number > .pt-list-item-inner:before {\n    content: ${(props) => getCounterContentForListLevel(props.listLevel)};\n    min-width: 1.5rem; /* Make sure space between number and text never shrinks */\n    /* Optical alignment */\n    position: relative;\n    top: 1px;\n  }\n`\n\nexport const DefaultListItemInner = styled.div``\n\nfunction getLeftPositionForListLevel(level: number) {\n  switch (Number(level)) {\n    case 1:\n      return '1.5em'\n    case 2:\n      return '3em'\n    case 3:\n      return '4.5em'\n    case 4:\n      return '6em'\n    case 5:\n      return '7.5em'\n    case 6:\n      return '9em'\n    case 7:\n      return '10.5em'\n    case 8:\n      return '12em'\n    case 9:\n      return '13.5em'\n    case 10:\n      return '15em'\n    default:\n      return '0em'\n  }\n}\n\nconst bullets = ['●', '○', '■']\n\nfunction getContentForListLevelAndStyle(level: number, style: string) {\n  const normalizedLevel = (level - 1) % 3\n  if (style === 'bullet') {\n    return bullets[normalizedLevel]\n  }\n  return '*'\n}\n\nfunction getCounterIncrementForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return 'listItemNumber'\n    case 2:\n      return 'listItemAlpha'\n    case 3:\n      return 'listItemRoman'\n    case 4:\n      return 'listItemNumberNext'\n    case 5:\n      return 'listItemLetterNext'\n    case 6:\n      return 'listItemRomanNext'\n    case 7:\n      return 'listItemNumberNextNext'\n    case 8:\n      return 'listItemAlphaNextNext'\n    case 9:\n      return 'listItemRomanNextNext'\n    default:\n      return 'listItemNumberNextNextNext'\n  }\n}\n\nfunction getCounterResetForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return 'listItemAlpha'\n    case 2:\n      return 'listItemRoman'\n    case 3:\n      return 'listItemNumberNext'\n    case 4:\n      return 'listItemLetterNext'\n    case 5:\n      return 'listItemRomanNext'\n    case 6:\n      return 'listItemNumberNextNext'\n    case 7:\n      return 'listItemAlphaNextNext'\n    case 8:\n      return 'listItemRomanNextNext'\n    case 9:\n      return 'listItemNumberNextNextNext'\n    default:\n      return 'listItemNumberNextNextNext'\n  }\n}\n\nfunction getCounterContentForListLevel(level: number) {\n  switch (level) {\n    case 1:\n      return `counter(listItemNumber) '. '`\n    case 2:\n      return `counter(listItemAlpha, lower-alpha) '. '`\n    case 3:\n      return `counter(listItemRoman, lower-roman) '. '`\n    case 4:\n      return `counter(listItemNumberNext) '. '`\n    case 5:\n      return `counter(listItemLetterNext, lower-alpha) '. '`\n    case 6:\n      return `counter(listItemRomanNext, lower-roman) '. '`\n    case 7:\n      return `counter(listItemNumberNextNext) '. '`\n    case 8:\n      return `counter(listItemAlphaNextNext, lower-alpha) '. '`\n    case 9:\n      return `counter(listItemRomanNextNext, lower-roman) '. '`\n    default:\n      return `counter(listItemNumberNextNextNext) '. '`\n  }\n}\n","import {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type DragEvent,\n  type MutableRefObject,\n  type ReactNode,\n} from 'react'\nimport {Editor, Path, Transforms, type Element as SlateElement} from 'slate'\nimport {ReactEditor, useSlateStatic} from 'slate-react'\nimport {debugWithName} from '../../utils/debug'\nimport {\n  IS_DRAGGING,\n  IS_DRAGGING_BLOCK_ELEMENT,\n  IS_DRAGGING_BLOCK_TARGET_POSITION,\n  IS_DRAGGING_ELEMENT_TARGET,\n} from '../../utils/weakMaps'\n\nconst debug = debugWithName('components:DraggableBlock')\nconst debugRenders = false\n\n/**\n * @internal\n */\nexport interface DraggableBlockProps {\n  children: ReactNode\n  element: SlateElement\n  readOnly: boolean\n  blockRef: MutableRefObject<HTMLDivElement | null>\n}\n\n/**\n * Implements drag and drop functionality on editor block nodes\n * @internal\n */\nexport const DraggableBlock = ({\n  children,\n  element,\n  readOnly,\n  blockRef,\n}: DraggableBlockProps) => {\n  const editor = useSlateStatic()\n  const dragGhostRef: MutableRefObject<undefined | HTMLElement> = useRef()\n  const [isDragOver, setIsDragOver] = useState(false)\n  const isVoid = useMemo(\n    () => Editor.isVoid(editor, element),\n    [editor, element],\n  )\n  const isInline = useMemo(\n    () => Editor.isInline(editor, element),\n    [editor, element],\n  )\n\n  const [blockElement, setBlockElement] = useState<HTMLElement | null>(null)\n\n  useEffect(\n    () =>\n      setBlockElement(\n        blockRef ? blockRef.current : ReactEditor.toDOMNode(editor, element),\n      ),\n    [editor, element, blockRef],\n  )\n\n  // Note: this is called not for the dragging block, but for the targets when the block is dragged over them\n  const handleDragOver = useCallback(\n    (event: DragEvent) => {\n      const isMyDragOver = IS_DRAGGING_BLOCK_ELEMENT.get(editor)\n      // debug('Drag over', blockElement)\n      if (!isMyDragOver || !blockElement) {\n        return\n      }\n      event.preventDefault()\n      event.dataTransfer.dropEffect = 'move'\n      IS_DRAGGING_ELEMENT_TARGET.set(editor, element)\n      const elementRect = blockElement.getBoundingClientRect()\n      const offset = elementRect.top\n      const height = elementRect.height\n      const Y = event.pageY\n      const loc = Math.abs(offset - Y)\n      let position: 'top' | 'bottom' = 'bottom'\n      if (element === editor.children[0]) {\n        position = 'top'\n      } else if (loc < height / 2) {\n        position = 'top'\n        IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)\n      } else {\n        position = 'bottom'\n        IS_DRAGGING_BLOCK_TARGET_POSITION.set(editor, position)\n      }\n      if (isMyDragOver === element) {\n        event.dataTransfer.dropEffect = 'none'\n        return\n      }\n      setIsDragOver(true)\n    },\n    [blockElement, editor, element],\n  )\n\n  // Note: this is called not for the dragging block, but for the targets when the block is dragged over them\n  const handleDragLeave = useCallback(() => {\n    setIsDragOver(false)\n  }, [])\n\n  // Note: this is called for the dragging block\n  const handleDragEnd = useCallback(\n    (event: DragEvent) => {\n      const targetBlock = IS_DRAGGING_ELEMENT_TARGET.get(editor)\n      if (targetBlock) {\n        IS_DRAGGING.set(editor, false)\n        event.preventDefault()\n        event.stopPropagation()\n        IS_DRAGGING_ELEMENT_TARGET.delete(editor)\n        if (dragGhostRef.current) {\n          debug('Removing drag ghost')\n          document.body.removeChild(dragGhostRef.current)\n        }\n        const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor)\n        IS_DRAGGING_BLOCK_TARGET_POSITION.delete(editor)\n        let targetPath = ReactEditor.findPath(editor, targetBlock)\n        const myPath = ReactEditor.findPath(editor, element)\n        const isBefore = Path.isBefore(myPath, targetPath)\n        if (dragPosition === 'bottom' && !isBefore) {\n          // If it is already at the bottom, don't do anything.\n          if (targetPath[0] >= editor.children.length - 1) {\n            debug('target is already at the bottom, not moving')\n            return\n          }\n          const originalPath = targetPath\n          targetPath = Path.next(targetPath)\n          debug(\n            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(\n              targetPath,\n            )}`,\n          )\n        }\n        if (\n          dragPosition === 'top' &&\n          isBefore &&\n          targetPath[0] !== editor.children.length - 1\n        ) {\n          const originalPath = targetPath\n          targetPath = Path.previous(targetPath)\n          debug(\n            `Adjusting targetPath from ${JSON.stringify(originalPath)} to ${JSON.stringify(\n              targetPath,\n            )}`,\n          )\n        }\n        if (Path.equals(targetPath, myPath)) {\n          event.preventDefault()\n          debug('targetPath and myPath is the same, not moving')\n          return\n        }\n        debug(\n          `Moving element ${element._key} from path ${JSON.stringify(myPath)} to ${JSON.stringify(\n            targetPath,\n          )} (${dragPosition})`,\n        )\n        Transforms.moveNodes(editor, {at: myPath, to: targetPath})\n        editor.onChange()\n        return\n      }\n      debug('No target element, not doing anything')\n    },\n    [editor, element],\n  )\n  // Note: this is called not for the dragging block, but for the drop target\n  const handleDrop = useCallback(\n    (event: DragEvent) => {\n      if (IS_DRAGGING_BLOCK_ELEMENT.get(editor)) {\n        debug('On drop (prevented)', element)\n        event.preventDefault()\n        event.stopPropagation()\n        setIsDragOver(false)\n      }\n    },\n    [editor, element],\n  )\n  // Note: this is called for the dragging block\n  const handleDrag = useCallback(\n    (event: DragEvent) => {\n      if (!isVoid) {\n        IS_DRAGGING_BLOCK_ELEMENT.delete(editor)\n        return\n      }\n      IS_DRAGGING.set(editor, true)\n      IS_DRAGGING_BLOCK_ELEMENT.set(editor, element)\n      event.stopPropagation() // Stop propagation so that leafs don't get this and take focus/selection!\n\n      const target = event.target\n\n      if (target instanceof HTMLElement) {\n        target.style.opacity = '1'\n      }\n    },\n    [editor, element, isVoid],\n  )\n\n  // Note: this is called for the dragging block\n  const handleDragStart = useCallback(\n    (event: DragEvent) => {\n      if (!isVoid || isInline) {\n        debug('Not dragging block')\n        IS_DRAGGING_BLOCK_ELEMENT.delete(editor)\n        IS_DRAGGING.set(editor, false)\n        return\n      }\n      debug('Drag start')\n      IS_DRAGGING.set(editor, true)\n      if (event.dataTransfer) {\n        event.dataTransfer.setData('application/portable-text', 'something')\n        event.dataTransfer.effectAllowed = 'move'\n      }\n      // Clone blockElement so that it will not be visually clipped by scroll-containers etc.\n      // The application that uses the portable-text-editor may indicate the element used as\n      // drag ghost by adding a truthy data attribute 'data-pt-drag-ghost-element' to a HTML element.\n      if (blockElement && blockElement instanceof HTMLElement) {\n        let dragGhost = blockElement.cloneNode(true) as HTMLElement\n        const customGhost = dragGhost.querySelector(\n          '[data-pt-drag-ghost-element]',\n        )\n        if (customGhost) {\n          dragGhost = customGhost as HTMLElement\n        }\n\n        // Set the `data-dragged` attribute so the consumer can style the element while it’s dragged\n        dragGhost.setAttribute('data-dragged', '')\n\n        if (document.body) {\n          dragGhostRef.current = dragGhost\n          dragGhost.style.position = 'absolute'\n          dragGhost.style.left = '-99999px'\n          dragGhost.style.boxSizing = 'border-box'\n          document.body.appendChild(dragGhost)\n          const rect = blockElement.getBoundingClientRect()\n          const x = event.clientX - rect.left\n          const y = event.clientY - rect.top\n          dragGhost.style.width = `${rect.width}px`\n          dragGhost.style.height = `${rect.height}px`\n          event.dataTransfer.setDragImage(dragGhost, x, y)\n        }\n      }\n      handleDrag(event)\n    },\n    [blockElement, editor, handleDrag, isInline, isVoid],\n  )\n\n  const isDraggingOverFirstBlock =\n    isDragOver && editor.children[0] === IS_DRAGGING_ELEMENT_TARGET.get(editor)\n  const isDraggingOverLastBlock =\n    isDragOver &&\n    editor.children[editor.children.length - 1] ===\n      IS_DRAGGING_ELEMENT_TARGET.get(editor)\n  const dragPosition = IS_DRAGGING_BLOCK_TARGET_POSITION.get(editor)\n\n  const isDraggingOverTop =\n    isDraggingOverFirstBlock ||\n    (isDragOver &&\n      !isDraggingOverFirstBlock &&\n      !isDraggingOverLastBlock &&\n      dragPosition === 'top')\n  const isDraggingOverBottom =\n    isDraggingOverLastBlock ||\n    (isDragOver &&\n      !isDraggingOverFirstBlock &&\n      !isDraggingOverLastBlock &&\n      dragPosition === 'bottom')\n\n  const dropIndicator = useMemo(\n    () => (\n      <div\n        className=\"pt-drop-indicator\"\n        style={{\n          position: 'absolute',\n          width: '100%',\n          height: 1,\n          borderBottom: '1px solid currentColor',\n          zIndex: 5,\n        }}\n      />\n    ),\n    [],\n  )\n\n  if (readOnly) {\n    return <>{children}</>\n  }\n\n  if (debugRenders) {\n    debug('render')\n  }\n\n  return (\n    <div\n      draggable={isVoid}\n      onDragStart={handleDragStart}\n      onDrag={handleDrag}\n      onDragOver={handleDragOver}\n      onDragLeave={handleDragLeave}\n      onDragEnd={handleDragEnd}\n      onDrop={handleDrop}\n    >\n      {isDraggingOverTop && dropIndicator}\n      {children}\n      {isDraggingOverBottom && dropIndicator}\n    </div>\n  )\n}\n\nDraggableBlock.displayName = 'DraggableBlock'\n","import type {\n  Path,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {useMemo, useRef, type FunctionComponent, type ReactElement} from 'react'\nimport {Editor, Range, Element as SlateElement} from 'slate'\nimport {\n  ReactEditor,\n  useSelected,\n  useSlateStatic,\n  type RenderElementProps,\n} from 'slate-react'\nimport type {\n  BlockRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {fromSlateValue} from '../../utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../../utils/weakMaps'\nimport ObjectNode from '../nodes/DefaultObject'\nimport {\n  DefaultBlockObject,\n  DefaultListItem,\n  DefaultListItemInner,\n} from '../nodes/index'\nimport {DraggableBlock} from './DraggableBlock'\n\nconst debug = debugWithName('components:Element')\nconst debugRenders = false\nconst EMPTY_ANNOTATIONS: PortableTextObject[] = []\n\n/**\n * @internal\n */\nexport interface ElementProps {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement\n  element: SlateElement\n  schemaTypes: PortableTextMemberSchemaTypes\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n}\n\nconst inlineBlockStyle = {display: 'inline-block'}\n\n/**\n * Renders Portable Text block and inline object nodes in Slate\n * @internal\n */\nexport const Element: FunctionComponent<ElementProps> = ({\n  attributes,\n  children,\n  element,\n  schemaTypes,\n  readOnly,\n  renderBlock,\n  renderChild,\n  renderListItem,\n  renderStyle,\n  spellCheck,\n}) => {\n  const editor = useSlateStatic()\n  const selected = useSelected()\n  const blockRef = useRef<HTMLDivElement | null>(null)\n  const inlineBlockObjectRef = useRef(null)\n  const focused =\n    (selected && editor.selection && Range.isCollapsed(editor.selection)) ||\n    false\n\n  const value = useMemo(\n    () =>\n      fromSlateValue(\n        [element],\n        schemaTypes.block.name,\n        KEY_TO_VALUE_ELEMENT.get(editor),\n      )[0],\n    [editor, element, schemaTypes.block.name],\n  )\n\n  let renderedBlock = children\n\n  let className: string | undefined\n\n  const blockPath: Path = useMemo(() => [{_key: element._key}], [element])\n\n  if (typeof element._type !== 'string') {\n    throw new Error(`Expected element to have a _type property`)\n  }\n\n  if (typeof element._key !== 'string') {\n    throw new Error(`Expected element to have a _key property`)\n  }\n\n  // Test for inline objects first\n  if (editor.isInline(element)) {\n    const path = ReactEditor.findPath(editor, element)\n    const [block] = Editor.node(editor, path, {depth: 1})\n    const schemaType = schemaTypes.inlineObjects.find(\n      (_type) => _type.name === element._type,\n    )\n    if (!schemaType) {\n      throw new Error('Could not find type for inline block element')\n    }\n    if (SlateElement.isElement(block)) {\n      const elmPath: Path = [\n        {_key: block._key},\n        'children',\n        {_key: element._key},\n      ]\n      if (debugRenders) {\n        debug(`Render ${element._key} (inline object)`)\n      }\n      return (\n        <span {...attributes}>\n          {/* Note that children must follow immediately or cut and selections will not work properly in Chrome. */}\n          {children}\n          <span\n            draggable={!readOnly}\n            className=\"pt-inline-object\"\n            data-testid=\"pt-inline-object\"\n            ref={inlineBlockObjectRef}\n            key={element._key}\n            style={inlineBlockStyle}\n            contentEditable={false}\n          >\n            {renderChild &&\n              renderChild({\n                annotations: EMPTY_ANNOTATIONS, // These inline objects currently doesn't support annotations. This is a limitation of the current PT spec/model.\n                children: <ObjectNode value={value} />,\n                editorElementRef: inlineBlockObjectRef,\n                focused,\n                path: elmPath,\n                schemaType,\n                selected,\n                type: schemaType,\n                value: value as PortableTextChild,\n              })}\n            {!renderChild && <ObjectNode value={value} />}\n          </span>\n        </span>\n      )\n    }\n    throw new Error('Block not found!')\n  }\n\n  // If not inline, it's either a block (text) or a block object (non-text)\n  // NOTE: text blocks aren't draggable with DraggableBlock (yet?)\n  if (element._type === schemaTypes.block.name) {\n    className = `pt-block pt-text-block`\n    const isListItem = 'listItem' in element\n    if (debugRenders) {\n      debug(`Render ${element._key} (text block)`)\n    }\n    const style = ('style' in element && element.style) || 'normal'\n    className = `pt-block pt-text-block pt-text-block-style-${style}`\n    const blockStyleType = schemaTypes.styles.find(\n      (item) => item.value === style,\n    )\n    if (renderStyle && blockStyleType) {\n      renderedBlock = renderStyle({\n        block: element as PortableTextTextBlock,\n        children,\n        focused,\n        selected,\n        value: style,\n        path: blockPath,\n        schemaType: blockStyleType,\n        editorElementRef: blockRef,\n      })\n    }\n    let level: number | undefined\n    if (isListItem) {\n      if (typeof element.level === 'number') {\n        level = element.level\n      }\n      className += ` pt-list-item pt-list-item-${element.listItem} pt-list-item-level-${level || 1}`\n    }\n    if (editor.isListBlock(value) && isListItem && element.listItem) {\n      const listType = schemaTypes.lists.find(\n        (item) => item.value === element.listItem,\n      )\n      if (renderListItem && listType) {\n        renderedBlock = renderListItem({\n          block: value,\n          children: renderedBlock,\n          focused,\n          selected,\n          value: element.listItem,\n          path: blockPath,\n          schemaType: listType,\n          level: value.level || 1,\n          editorElementRef: blockRef,\n        })\n      } else {\n        renderedBlock = (\n          <DefaultListItem\n            listStyle={value.listItem || schemaTypes.lists[0].value}\n            listLevel={value.level || 1}\n          >\n            <DefaultListItemInner>{renderedBlock}</DefaultListItemInner>\n          </DefaultListItem>\n        )\n      }\n    }\n    const renderProps: Omit<BlockRenderProps, 'type'> = Object.defineProperty(\n      {\n        children: renderedBlock,\n        editorElementRef: blockRef,\n        focused,\n        level,\n        listItem: isListItem ? element.listItem : undefined,\n        path: blockPath,\n        selected,\n        style,\n        schemaType: schemaTypes.block,\n        value,\n      },\n      'type',\n      {\n        enumerable: false,\n        get() {\n          console.warn(\n            \"Property 'type' is deprecated, use 'schemaType' instead.\",\n          )\n          return schemaTypes.block\n        },\n      },\n    )\n\n    const propsOrDefaultRendered = renderBlock\n      ? renderBlock(renderProps as BlockRenderProps)\n      : children\n    return (\n      <div\n        key={element._key}\n        {...attributes}\n        className={className}\n        spellCheck={spellCheck}\n      >\n        <DraggableBlock\n          element={element}\n          readOnly={readOnly}\n          blockRef={blockRef}\n        >\n          <div ref={blockRef}>{propsOrDefaultRendered}</div>\n        </DraggableBlock>\n      </div>\n    )\n  }\n  const schemaType = schemaTypes.blockObjects.find(\n    (_type) => _type.name === element._type,\n  )\n  if (!schemaType) {\n    throw new Error(\n      `Could not find schema type for block element of _type ${element._type}`,\n    )\n  }\n  if (debugRenders) {\n    debug(`Render ${element._key} (object block)`)\n  }\n  className = 'pt-block pt-object-block'\n  const block = fromSlateValue(\n    [element],\n    schemaTypes.block.name,\n    KEY_TO_VALUE_ELEMENT.get(editor),\n  )[0]\n  let renderedBlockFromProps: JSX.Element | undefined\n  if (renderBlock) {\n    const _props: Omit<BlockRenderProps, 'type'> = Object.defineProperty(\n      {\n        children: <ObjectNode value={value} />,\n        editorElementRef: blockRef,\n        focused,\n        path: blockPath,\n        schemaType,\n        selected,\n        value: block,\n      },\n      'type',\n      {\n        enumerable: false,\n        get() {\n          console.warn(\n            \"Property 'type' is deprecated, use 'schemaType' instead.\",\n          )\n          return schemaType\n        },\n      },\n    )\n    renderedBlockFromProps = renderBlock(_props as BlockRenderProps)\n  }\n  return (\n    <div key={element._key} {...attributes} className={className}>\n      {children}\n      <DraggableBlock element={element} readOnly={readOnly} blockRef={blockRef}>\n        {renderedBlockFromProps && (\n          <div ref={blockRef} contentEditable={false}>\n            {renderedBlockFromProps}\n          </div>\n        )}\n        {!renderedBlockFromProps && (\n          <DefaultBlockObject selected={selected}>\n            <ObjectNode value={value} />\n          </DefaultBlockObject>\n        )}\n      </DraggableBlock>\n    </div>\n  )\n}\n\nElement.displayName = 'Element'\n","import {createContext, useContext} from 'react'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\n/**\n * A React context for sharing the editor object.\n */\nexport const PortableTextEditorContext =\n  createContext<PortableTextEditor | null>(null)\n\n/**\n * @public\n * Get the current editor object from the React context.\n */\nexport const usePortableTextEditor = (): PortableTextEditor => {\n  const editor = useContext(PortableTextEditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`usePortableTextEditor\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n\n  return editor\n}\n","import type {PortableTextObject} from '@sanity/types'\nimport {useCallback, type ReactNode} from 'react'\n\ntype Props = {\n  annotation: PortableTextObject\n  children: ReactNode\n}\nexport function DefaultAnnotation(props: Props) {\n  const handleClick = useCallback(\n    () => alert(JSON.stringify(props.annotation)),\n    [props.annotation],\n  )\n  return (\n    <span style={{color: 'blue'}} onClick={handleClick}>\n      {props.children}\n    </span>\n  )\n}\n\nDefaultAnnotation.displayName = 'DefaultAnnotation'\n","import type {\n  ArraySchemaType,\n  BlockSchemaType,\n  ObjectSchemaType,\n  PortableTextBlock,\n  SchemaType,\n  SpanSchemaType,\n} from '@sanity/types'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\n\nexport function getPortableTextMemberSchemaTypes(\n  portableTextType: ArraySchemaType<PortableTextBlock>,\n): PortableTextMemberSchemaTypes {\n  if (!portableTextType) {\n    throw new Error(\"Parameter 'portabletextType' missing (required)\")\n  }\n  const blockType = portableTextType.of?.find(findBlockType) as\n    | BlockSchemaType\n    | undefined\n  if (!blockType) {\n    throw new Error('Block type is not defined in this schema (required)')\n  }\n  const childrenField = blockType.fields?.find(\n    (field) => field.name === 'children',\n  ) as {type: ArraySchemaType} | undefined\n  if (!childrenField) {\n    throw new Error('Children field for block type found in schema (required)')\n  }\n  const ofType = childrenField.type.of\n  if (!ofType) {\n    throw new Error(\n      'Valid types for block children not found in schema (required)',\n    )\n  }\n  const spanType = ofType.find((memberType) => memberType.name === 'span') as\n    | ObjectSchemaType\n    | undefined\n  if (!spanType) {\n    throw new Error('Span type not found in schema (required)')\n  }\n  const inlineObjectTypes = (ofType.filter(\n    (memberType) => memberType.name !== 'span',\n  ) || []) as ObjectSchemaType[]\n  const blockObjectTypes = (portableTextType.of?.filter(\n    (field) => field.name !== blockType.name,\n  ) || []) as ObjectSchemaType[]\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    lists: resolveEnabledListItems(blockType),\n    block: blockType,\n    span: spanType,\n    portableText: portableTextType,\n    inlineObjects: inlineObjectTypes,\n    blockObjects: blockObjectTypes,\n    annotations: (spanType as SpanSchemaType).annotations,\n  }\n}\n\nfunction resolveEnabledStyles(blockType: ObjectSchemaType) {\n  const styleField = blockType.fields?.find(\n    (btField) => btField.name === 'style',\n  )\n  if (!styleField) {\n    throw new Error(\n      \"A field with name 'style' is not defined in the block type (required).\",\n    )\n  }\n  const textStyles =\n    styleField.type.options?.list &&\n    styleField.type.options.list?.filter(\n      (style: {value: string}) => style.value,\n    )\n  if (!textStyles || textStyles.length === 0) {\n    throw new Error(\n      'The style fields need at least one style ' +\n        \"defined. I.e: {title: 'Normal', value: 'normal'}.\",\n    )\n  }\n  return textStyles\n}\n\nfunction resolveEnabledDecorators(spanType: ObjectSchemaType) {\n  return (spanType as any).decorators\n}\n\nfunction resolveEnabledListItems(blockType: ObjectSchemaType) {\n  const listField = blockType.fields?.find(\n    (btField) => btField.name === 'listItem',\n  )\n  if (!listField) {\n    throw new Error(\n      \"A field with name 'listItem' is not defined in the block type (required).\",\n    )\n  }\n  const listItems =\n    listField.type.options?.list &&\n    listField.type.options.list.filter((list: {value: string}) => list.value)\n  if (!listItems) {\n    throw new Error('The list field need at least to be an empty array')\n  }\n  return listItems\n}\n\nfunction findBlockType(type: SchemaType): BlockSchemaType | null {\n  if (type.type) {\n    return findBlockType(type.type)\n  }\n\n  if (type.name === 'block') {\n    return type as BlockSchemaType\n  }\n\n  return null\n}\n","import {Schema} from '@sanity/schema'\n\nexport function compileType(rawType: any) {\n  return Schema.compile({\n    name: 'blockTypeSchema',\n    types: [rawType],\n  }).get(rawType.name)\n}\n","import {\n  diffMatchPatch,\n  insert,\n  set,\n  setIfMissing,\n  unset,\n  type InsertPosition,\n  type Patch,\n} from '@portabletext/patches'\nimport type {Path, PortableTextSpan, PortableTextTextBlock} from '@sanity/types'\nimport {get, isUndefined, omitBy} from 'lodash'\nimport {\n  Text,\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\nimport type {PatchFunctions} from '../editor/plugins/createWithPatches'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport {debugWithName} from './debug'\nimport {fromSlateValue} from './values'\n\nconst debug = debugWithName('operationToPatches')\n\nexport function createOperationToPatches(\n  types: PortableTextMemberSchemaTypes,\n): PatchFunctions {\n  const textBlockName = types.block.name\n  function insertTextPatch(\n    editor: PortableTextSlateEditor,\n    operation: InsertTextOperation,\n    beforeValue: Descendant[],\n  ) {\n    if (debug.enabled) {\n      debug('Operation', JSON.stringify(operation, null, 2))\n    }\n    const block =\n      editor.isTextBlock(editor.children[operation.path[0]]) &&\n      editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const textChild =\n      editor.isTextBlock(block) &&\n      editor.isTextSpan(block.children[operation.path[1]]) &&\n      (block.children[operation.path[1]] as PortableTextSpan)\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [\n      {_key: block._key},\n      'children',\n      {_key: textChild._key},\n      'text',\n    ]\n    const prevBlock = beforeValue[operation.path[0]]\n    const prevChild =\n      editor.isTextBlock(prevBlock) && prevBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevChild) ? prevChild.text : ''\n    const patch = diffMatchPatch(prevText, textChild.text, path)\n    return patch.value.length ? [patch] : []\n  }\n\n  function removeTextPatch(\n    editor: PortableTextSlateEditor,\n    operation: RemoveTextOperation,\n    beforeValue: Descendant[],\n  ) {\n    const block = editor && editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const child =\n      (editor.isTextBlock(block) && block.children[operation.path[1]]) ||\n      undefined\n    const textChild: PortableTextSpan | undefined = editor.isTextSpan(child)\n      ? child\n      : undefined\n    if (child && !textChild) {\n      throw new Error('Expected span')\n    }\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [\n      {_key: block._key},\n      'children',\n      {_key: textChild._key},\n      'text',\n    ]\n    const beforeBlock = beforeValue[operation.path[0]]\n    const prevTextChild =\n      editor.isTextBlock(beforeBlock) && beforeBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevTextChild) && prevTextChild.text\n    const patch = diffMatchPatch(prevText || '', textChild.text, path)\n    return patch.value ? [patch] : []\n  }\n\n  function setNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: SetNodeOperation,\n  ) {\n    if (operation.path.length === 1) {\n      const block = editor.children[operation.path[0]]\n      if (typeof block._key !== 'string') {\n        throw new Error('Expected block to have a _key')\n      }\n      const setNode = omitBy(\n        {...editor.children[operation.path[0]], ...operation.newProperties},\n        isUndefined,\n      ) as unknown as Descendant\n      return [\n        set(fromSlateValue([setNode], textBlockName)[0], [{_key: block._key}]),\n      ]\n    } else if (operation.path.length === 2) {\n      const block = editor.children[operation.path[0]]\n      if (editor.isTextBlock(block)) {\n        const child = block.children[operation.path[1]]\n        if (child) {\n          const blockKey = block._key\n          const childKey = child._key\n          const patches: Patch[] = []\n          const keys = Object.keys(operation.newProperties)\n          keys.forEach((keyName) => {\n            // Special case for setting _key on a child. We have to target it by index and not the _key.\n            if (keys.length === 1 && keyName === '_key') {\n              const val = get(operation.newProperties, keyName)\n              patches.push(\n                set(val, [\n                  {_key: blockKey},\n                  'children',\n                  block.children.indexOf(child),\n                  keyName,\n                ]),\n              )\n            } else {\n              const val = get(operation.newProperties, keyName)\n              patches.push(\n                set(val, [\n                  {_key: blockKey},\n                  'children',\n                  {_key: childKey},\n                  keyName,\n                ]),\n              )\n            }\n          })\n          return patches\n        }\n        throw new Error('Could not find a valid child')\n      }\n      throw new Error('Could not find a valid block')\n    } else {\n      throw new Error(\n        `Unexpected path encountered: ${JSON.stringify(operation.path)}`,\n      )\n    }\n  }\n\n  function insertNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: InsertNodeOperation,\n    beforeValue: Descendant[],\n  ): Patch[] {\n    const block = beforeValue[operation.path[0]]\n    const isTextBlock = editor.isTextBlock(block)\n    if (operation.path.length === 1) {\n      const position = operation.path[0] === 0 ? 'before' : 'after'\n      const beforeBlock = beforeValue[operation.path[0] - 1]\n      const targetKey =\n        operation.path[0] === 0 ? block?._key : beforeBlock?._key\n      if (targetKey) {\n        return [\n          insert(\n            [fromSlateValue([operation.node as Descendant], textBlockName)[0]],\n            position,\n            [{_key: targetKey}],\n          ),\n        ]\n      }\n      return [\n        setIfMissing(beforeValue, []),\n        insert(\n          [fromSlateValue([operation.node as Descendant], textBlockName)[0]],\n          'before',\n          [operation.path[0]],\n        ),\n      ]\n    } else if (\n      isTextBlock &&\n      operation.path.length === 2 &&\n      editor.children[operation.path[0]]\n    ) {\n      const position =\n        block.children.length === 0 || !block.children[operation.path[1] - 1]\n          ? 'before'\n          : 'after'\n      const node = {...operation.node} as Descendant\n      if (!node._type && Text.isText(node)) {\n        node._type = 'span'\n        node.marks = []\n      }\n      const blk = fromSlateValue(\n        [\n          {\n            _key: 'bogus',\n            _type: textBlockName,\n            children: [node],\n          },\n        ],\n        textBlockName,\n      )[0] as PortableTextTextBlock\n      const child = blk.children[0]\n      return [\n        insert([child], position, [\n          {_key: block._key},\n          'children',\n          block.children.length <= 1 || !block.children[operation.path[1] - 1]\n            ? 0\n            : {_key: block.children[operation.path[1] - 1]._key},\n        ]),\n      ]\n    }\n    debug(\n      'Something was inserted into a void block. Not producing editor patches.',\n    )\n    return []\n  }\n\n  function splitNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: SplitNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n    const splitBlock = editor.children[operation.path[0]]\n    if (!editor.isTextBlock(splitBlock)) {\n      throw new Error(\n        `Block with path ${JSON.stringify(\n          operation.path[0],\n        )} is not a text block and can't be split`,\n      )\n    }\n    if (operation.path.length === 1) {\n      const oldBlock = beforeValue[operation.path[0]]\n      if (editor.isTextBlock(oldBlock)) {\n        const targetValue = fromSlateValue(\n          [editor.children[operation.path[0] + 1]],\n          textBlockName,\n        )[0]\n        if (targetValue) {\n          patches.push(\n            insert([targetValue], 'after', [{_key: splitBlock._key}]),\n          )\n          const spansToUnset = oldBlock.children.slice(operation.position)\n          spansToUnset.forEach((span) => {\n            const path = [{_key: oldBlock._key}, 'children', {_key: span._key}]\n            patches.push(unset(path))\n          })\n        }\n      }\n      return patches\n    }\n    if (operation.path.length === 2) {\n      const splitSpan = splitBlock.children[operation.path[1]]\n      if (editor.isTextSpan(splitSpan)) {\n        const targetSpans = (\n          fromSlateValue(\n            [\n              {\n                ...splitBlock,\n                children: splitBlock.children.slice(\n                  operation.path[1] + 1,\n                  operation.path[1] + 2,\n                ),\n              } as Descendant,\n            ],\n            textBlockName,\n          )[0] as PortableTextTextBlock\n        ).children\n\n        patches.push(\n          insert(targetSpans, 'after', [\n            {_key: splitBlock._key},\n            'children',\n            {_key: splitSpan._key},\n          ]),\n        )\n        patches.push(\n          set(splitSpan.text, [\n            {_key: splitBlock._key},\n            'children',\n            {_key: splitSpan._key},\n            'text',\n          ]),\n        )\n      }\n      return patches\n    }\n    return patches\n  }\n\n  function removeNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: RemoveNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const block = beforeValue[operation.path[0]]\n    if (operation.path.length === 1) {\n      // Remove a single block\n      if (block && block._key) {\n        return [unset([{_key: block._key}])]\n      }\n      throw new Error('Block not found')\n    } else if (editor.isTextBlock(block) && operation.path.length === 2) {\n      const spanToRemove = block.children[operation.path[1]]\n\n      if (spanToRemove) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === operation.node._key,\n        )\n\n        if (spansMatchingKey.length > 1) {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${operation.node._key}. It's ambiguous which one to remove.`,\n            JSON.stringify(block, null, 2),\n          )\n          return []\n        }\n\n        return [\n          unset([{_key: block._key}, 'children', {_key: spanToRemove._key}]),\n        ]\n      }\n      debug('Span not found in editor trying to remove node')\n      return []\n    } else {\n      debug('Not creating patch inside object block')\n      return []\n    }\n  }\n\n  function mergeNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: MergeNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n\n    const block = beforeValue[operation.path[0]]\n    const updatedBlock = editor.children[operation.path[0]]\n\n    if (operation.path.length === 1) {\n      if (block?._key) {\n        const newBlock = fromSlateValue(\n          [editor.children[operation.path[0] - 1]],\n          textBlockName,\n        )[0]\n        patches.push(set(newBlock, [{_key: newBlock._key}]))\n        patches.push(unset([{_key: block._key}]))\n      } else {\n        throw new Error('Target key not found!')\n      }\n    } else if (\n      editor.isTextBlock(block) &&\n      editor.isTextBlock(updatedBlock) &&\n      operation.path.length === 2\n    ) {\n      const updatedSpan =\n        updatedBlock.children[operation.path[1] - 1] &&\n        editor.isTextSpan(updatedBlock.children[operation.path[1] - 1])\n          ? updatedBlock.children[operation.path[1] - 1]\n          : undefined\n      const removedSpan =\n        block.children[operation.path[1]] &&\n        editor.isTextSpan(block.children[operation.path[1]])\n          ? block.children[operation.path[1]]\n          : undefined\n\n      if (updatedSpan) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === updatedSpan._key,\n        )\n\n        if (spansMatchingKey.length === 1) {\n          patches.push(\n            set(updatedSpan.text, [\n              {_key: block._key},\n              'children',\n              {_key: updatedSpan._key},\n              'text',\n            ]),\n          )\n        } else {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${updatedSpan._key}. It's ambiguous which one to update.`,\n            JSON.stringify(block, null, 2),\n          )\n        }\n      }\n\n      if (removedSpan) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === removedSpan._key,\n        )\n\n        if (spansMatchingKey.length === 1) {\n          patches.push(\n            unset([{_key: block._key}, 'children', {_key: removedSpan._key}]),\n          )\n        } else {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${removedSpan._key}. It's ambiguous which one to remove.`,\n            JSON.stringify(block, null, 2),\n          )\n        }\n      }\n    } else {\n      debug(\"Void nodes can't be merged, not creating any patches\")\n    }\n    return patches\n  }\n\n  function moveNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: MoveNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n    const block = beforeValue[operation.path[0]]\n    const targetBlock = beforeValue[operation.newPath[0]]\n    if (operation.path.length === 1) {\n      const position: InsertPosition =\n        operation.path[0] > operation.newPath[0] ? 'before' : 'after'\n      patches.push(unset([{_key: block._key}]))\n      patches.push(\n        insert([fromSlateValue([block], textBlockName)[0]], position, [\n          {_key: targetBlock._key},\n        ]),\n      )\n    } else if (\n      operation.path.length === 2 &&\n      editor.isTextBlock(block) &&\n      editor.isTextBlock(targetBlock)\n    ) {\n      const child = block.children[operation.path[1]]\n      const targetChild = targetBlock.children[operation.newPath[1]]\n      const position =\n        operation.newPath[1] === targetBlock.children.length\n          ? 'after'\n          : 'before'\n      const childToInsert = (\n        fromSlateValue([block], textBlockName)[0] as PortableTextTextBlock\n      ).children[operation.path[1]]\n      patches.push(unset([{_key: block._key}, 'children', {_key: child._key}]))\n      patches.push(\n        insert([childToInsert], position, [\n          {_key: targetBlock._key},\n          'children',\n          {_key: targetChild._key},\n        ]),\n      )\n    }\n    return patches\n  }\n\n  return {\n    insertNodePatch,\n    insertTextPatch,\n    mergeNodePatch,\n    moveNodePatch,\n    removeNodePatch,\n    removeTextPatch,\n    setNodePatch,\n    splitNodePatch,\n  }\n}\n","import type {Editor} from 'slate'\nimport type {EditorActor} from '../editor-machine'\n\nexport function createWithEventListeners(editorActor: EditorActor) {\n  return function withEventListeners(editor: Editor) {\n    editor.deleteBackward = (unit) => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete backward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.deleteForward = (unit) => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete forward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertBreak = () => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertSoftBreak = () => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert soft break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertText = (text, options) => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert text',\n          text,\n          options,\n        },\n        editor,\n      })\n      return\n    }\n\n    return editor\n  }\n}\n","import {\n  isPortableTextSpan,\n  type ObjectSchemaType,\n  type Path,\n  type PortableTextBlock,\n  type PortableTextChild,\n  type PortableTextObject,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n  type SchemaType,\n} from '@sanity/types'\nimport {\n  Editor,\n  Node,\n  Range,\n  Element as SlateElement,\n  Path as SlatePath,\n  Text,\n  Transforms,\n} from 'slate'\nimport {ReactEditor} from 'slate-react'\nimport type {DOMNode} from 'slate-react/dist/utils/dom'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorSelection,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {toPortableTextRange, toSlateRange} from '../../utils/ranges'\nimport {\n  fromSlateValue,\n  isEqualToEmptyEditor,\n  toSlateValue,\n} from '../../utils/values'\nimport {\n  KEY_TO_VALUE_ELEMENT,\n  SLATE_TO_PORTABLE_TEXT_RANGE,\n} from '../../utils/weakMaps'\nimport type {EditorActor} from '../editor-machine'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('API:editable')\n\nexport function createWithEditableAPI(\n  editorActor: EditorActor,\n  portableTextEditor: PortableTextEditor,\n  types: PortableTextMemberSchemaTypes,\n) {\n  return function withEditableAPI(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    portableTextEditor.setEditable({\n      focus: (): void => {\n        ReactEditor.focus(editor)\n      },\n      blur: (): void => {\n        ReactEditor.blur(editor)\n      },\n      toggleMark: (mark: string): void => {\n        editor.pteToggleMark(mark)\n      },\n      toggleList: (listStyle: string): void => {\n        editor.pteToggleListItem(listStyle)\n      },\n      toggleBlockStyle: (blockStyle: string): void => {\n        editor.pteToggleBlockStyle(blockStyle)\n      },\n      isMarkActive: (mark: string): boolean => {\n        // Try/catch this, as Slate may error because the selection is currently wrong\n        // TODO: catch only relevant error from Slate\n        try {\n          return editor.pteIsMarkActive(mark)\n        } catch (err) {\n          console.warn(err)\n          return false\n        }\n      },\n      marks: (): string[] => {\n        return (\n          {\n            ...(Editor.marks(editor) || {}),\n          }.marks || []\n        )\n      },\n      undo: (): void => editor.undo(),\n      redo: (): void => editor.redo(),\n      select: (selection: EditorSelection): void => {\n        const slateSelection = toSlateRange(selection, editor)\n        if (slateSelection) {\n          Transforms.select(editor, slateSelection)\n        } else {\n          Transforms.deselect(editor)\n        }\n        editor.onChange()\n      },\n      focusBlock: (): PortableTextBlock | undefined => {\n        if (editor.selection) {\n          const block = Node.descendant(\n            editor,\n            editor.selection.focus.path.slice(0, 1),\n          )\n          if (block) {\n            return fromSlateValue(\n              [block],\n              types.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor),\n            )[0]\n          }\n        }\n        return undefined\n      },\n      focusChild: (): PortableTextChild | undefined => {\n        if (editor.selection) {\n          const block = Node.descendant(\n            editor,\n            editor.selection.focus.path.slice(0, 1),\n          )\n          if (block && editor.isTextBlock(block)) {\n            const ptBlock = fromSlateValue(\n              [block],\n              types.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor),\n            )[0] as PortableTextTextBlock\n            return ptBlock.children[editor.selection.focus.path[1]]\n          }\n        }\n        return undefined\n      },\n      insertChild: (type: SchemaType, value?: {[prop: string]: any}): Path => {\n        if (!editor.selection) {\n          throw new Error('The editor has no selection')\n        }\n        const [focusBlock] = Array.from(\n          Editor.nodes(editor, {\n            at: editor.selection.focus.path.slice(0, 1),\n            match: (n) => n._type === types.block.name,\n          }),\n        )[0] || [undefined]\n        if (!focusBlock) {\n          throw new Error('No focused text block')\n        }\n        if (\n          type.name !== types.span.name &&\n          !types.inlineObjects.some((t) => t.name === type.name)\n        ) {\n          throw new Error(\n            'This type cannot be inserted as a child to a text block',\n          )\n        }\n        const block = toSlateValue(\n          [\n            {\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              _type: types.block.name,\n              children: [\n                {\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  _type: type.name,\n                  ...(value ? value : {}),\n                },\n              ],\n            },\n          ],\n          portableTextEditor,\n        )[0] as unknown as SlateElement\n        const child = block.children[0]\n        const focusChildPath = editor.selection.focus.path.slice(0, 2)\n        const isSpanNode = child._type === types.span.name\n        const focusNode = Node.get(editor, focusChildPath)\n\n        // If we are inserting a span, and currently have focus on an inline object,\n        // move the selection to the next span (guaranteed by normalizing rules) before inserting it.\n        if (isSpanNode && focusNode._type !== types.span.name) {\n          debug(\n            'Inserting span child next to inline object child, moving selection + 1',\n          )\n          editor.move({distance: 1, unit: 'character'})\n        }\n\n        Transforms.insertNodes(editor, child, {\n          select: true,\n          at: editor.selection,\n        })\n        editor.onChange()\n        return (\n          toPortableTextRange(\n            fromSlateValue(\n              editor.children,\n              types.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor),\n            ),\n            editor.selection,\n            types,\n          )?.focus.path || []\n        )\n      },\n      insertBlock: (type: SchemaType, value?: {[prop: string]: any}): Path => {\n        const block = toSlateValue(\n          [\n            {\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              _type: type.name,\n              ...(value ? value : {}),\n            },\n          ],\n          portableTextEditor,\n        )[0] as unknown as Node\n\n        if (!editor.selection) {\n          const lastBlock = Array.from(\n            Editor.nodes(editor, {\n              match: (n) => !Editor.isEditor(n),\n              at: [],\n              reverse: true,\n            }),\n          )[0]\n\n          // If there is no selection, let's just insert the new block at the\n          // end of the document\n          Editor.insertNode(editor, block)\n\n          if (lastBlock && isEqualToEmptyEditor([lastBlock[0]], types)) {\n            // And if the last block was an empty text block, let's remove\n            // that too\n            Transforms.removeNodes(editor, {at: lastBlock[1]})\n          }\n\n          editor.onChange()\n\n          return (\n            toPortableTextRange(\n              fromSlateValue(\n                editor.children,\n                types.block.name,\n                KEY_TO_VALUE_ELEMENT.get(editor),\n              ),\n              editor.selection,\n              types,\n            )?.focus.path ?? []\n          )\n        }\n\n        const focusBlock = Array.from(\n          Editor.nodes(editor, {\n            at: editor.selection.focus.path.slice(0, 1),\n            match: (n) => n._type === types.block.name,\n          }),\n        )[0]\n\n        Editor.insertNode(editor, block)\n\n        if (focusBlock && isEqualToEmptyEditor([focusBlock[0]], types)) {\n          Transforms.removeNodes(editor, {at: focusBlock[1]})\n        }\n\n        editor.onChange()\n\n        return (\n          toPortableTextRange(\n            fromSlateValue(\n              editor.children,\n              types.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor),\n            ),\n            editor.selection,\n            types,\n          )?.focus.path || []\n        )\n      },\n      hasBlockStyle: (style: string): boolean => {\n        try {\n          return editor.pteHasBlockStyle(style)\n        } catch {\n          // This is fine.\n          return false\n        }\n      },\n      hasListStyle: (listStyle: string): boolean => {\n        try {\n          return editor.pteHasListStyle(listStyle)\n        } catch {\n          // This is fine.\n          return false\n        }\n      },\n      isVoid: (element: PortableTextBlock | PortableTextChild) => {\n        return ![types.block.name, types.span.name].includes(element._type)\n      },\n      findByPath: (\n        path: Path,\n      ): [\n        PortableTextBlock | PortableTextChild | undefined,\n        Path | undefined,\n      ] => {\n        const slatePath = toSlateRange(\n          {focus: {path, offset: 0}, anchor: {path, offset: 0}},\n          editor,\n        )\n        if (slatePath) {\n          const [block, blockPath] = Editor.node(\n            editor,\n            slatePath.focus.path.slice(0, 1),\n          )\n          if (block && blockPath && typeof block._key === 'string') {\n            if (path.length === 1 && slatePath.focus.path.length === 1) {\n              return [\n                fromSlateValue([block], types.block.name)[0],\n                [{_key: block._key}],\n              ]\n            }\n            const ptBlock = fromSlateValue(\n              [block],\n              types.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor),\n            )[0]\n            if (editor.isTextBlock(ptBlock)) {\n              const ptChild = ptBlock.children[slatePath.focus.path[1]]\n              if (ptChild) {\n                return [\n                  ptChild,\n                  [{_key: block._key}, 'children', {_key: ptChild._key}],\n                ]\n              }\n            }\n          }\n        }\n        return [undefined, undefined]\n      },\n      findDOMNode: (\n        element: PortableTextBlock | PortableTextChild,\n      ): DOMNode | undefined => {\n        let node: DOMNode | undefined\n        try {\n          const [item] = Array.from(\n            Editor.nodes(editor, {\n              at: [],\n              match: (n) => n._key === element._key,\n            }) || [],\n          )[0] || [undefined]\n          node = ReactEditor.toDOMNode(editor, item)\n        } catch {\n          // Nothing\n        }\n        return node\n      },\n      activeAnnotations: (): PortableTextObject[] => {\n        if (!editor.selection || editor.selection.focus.path.length < 2) {\n          return []\n        }\n        try {\n          const activeAnnotations: PortableTextObject[] = []\n          const spans = Editor.nodes(editor, {\n            at: editor.selection,\n            match: (node) =>\n              Text.isText(node) &&\n              node.marks !== undefined &&\n              Array.isArray(node.marks) &&\n              node.marks.length > 0,\n          })\n          for (const [span, path] of spans) {\n            const [block] = Editor.node(editor, path, {depth: 1})\n            if (editor.isTextBlock(block)) {\n              block.markDefs?.forEach((def) => {\n                if (\n                  Text.isText(span) &&\n                  span.marks &&\n                  Array.isArray(span.marks) &&\n                  span.marks.includes(def._key)\n                ) {\n                  activeAnnotations.push(def)\n                }\n              })\n            }\n          }\n          return activeAnnotations\n        } catch {\n          return []\n        }\n      },\n      isAnnotationActive: (\n        annotationType: PortableTextObject['_type'],\n      ): boolean => {\n        if (!editor.selection || editor.selection.focus.path.length < 2) {\n          return false\n        }\n\n        try {\n          const spans = [\n            ...Editor.nodes(editor, {\n              at: editor.selection,\n              match: (node) => Text.isText(node),\n            }),\n          ]\n\n          if (spans.length === 0) {\n            return false\n          }\n\n          if (\n            spans.some(\n              ([span]) =>\n                !isPortableTextSpan(span) ||\n                !span.marks ||\n                span.marks?.length === 0,\n            )\n          )\n            return false\n\n          const selectionMarkDefs = spans.reduce((accMarkDefs, [, path]) => {\n            const [block] = Editor.node(editor, path, {depth: 1})\n            if (editor.isTextBlock(block) && block.markDefs) {\n              return [...accMarkDefs, ...block.markDefs]\n            }\n            return accMarkDefs\n          }, [] as PortableTextObject[])\n\n          return spans.every(([span]) => {\n            if (!isPortableTextSpan(span)) return false\n\n            const spanMarkDefs = span.marks?.map(\n              (markKey) =>\n                selectionMarkDefs.find((def) => def?._key === markKey)?._type,\n            )\n\n            return spanMarkDefs?.includes(annotationType)\n          })\n        } catch {\n          return false\n        }\n      },\n      addAnnotation: (type, value) => {\n        const {selection: originalSelection} = editor\n        let returnValue: ReturnType<EditableAPI['addAnnotation']> | undefined =\n          undefined\n\n        if (originalSelection) {\n          if (Range.isCollapsed(originalSelection)) {\n            editor.pteExpandToWord()\n            editor.onChange()\n          }\n\n          // If we still have a selection, add the annotation to the selected text\n          if (editor.selection) {\n            let spanPath: Path | undefined\n            let markDefPath: Path | undefined\n            const markDefPaths: Path[] = []\n\n            Editor.withoutNormalizing(editor, () => {\n              if (!editor.selection) {\n                return\n              }\n\n              const selectedBlocks = Editor.nodes(editor, {\n                at: editor.selection,\n                match: (node) => editor.isTextBlock(node),\n                reverse: Range.isBackward(editor.selection),\n              })\n\n              for (const [block, blockPath] of selectedBlocks) {\n                if (block.children.length === 0) {\n                  continue\n                }\n\n                if (\n                  block.children.length === 1 &&\n                  block.children[0].text === ''\n                ) {\n                  continue\n                }\n\n                const annotationKey = editorActor\n                  .getSnapshot()\n                  .context.keyGenerator()\n                const markDefs = block.markDefs ?? []\n                const existingMarkDef = markDefs.find(\n                  (markDef) =>\n                    markDef._type === type.name &&\n                    markDef._key === annotationKey,\n                )\n\n                if (existingMarkDef === undefined) {\n                  Transforms.setNodes(\n                    editor,\n                    {\n                      markDefs: [\n                        ...markDefs,\n                        {\n                          _type: type.name,\n                          _key: annotationKey,\n                          ...value,\n                        },\n                      ],\n                    },\n                    {at: blockPath},\n                  )\n\n                  markDefPath = [\n                    {_key: block._key},\n                    'markDefs',\n                    {_key: annotationKey},\n                  ]\n                  if (Range.isBackward(editor.selection)) {\n                    markDefPaths.unshift(markDefPath)\n                  } else {\n                    markDefPaths.push(markDefPath)\n                  }\n                }\n\n                Transforms.setNodes(\n                  editor,\n                  {},\n                  {match: Text.isText, split: true},\n                )\n\n                const children = Node.children(editor, blockPath)\n\n                for (const [span, path] of children) {\n                  if (!editor.isTextSpan(span)) {\n                    continue\n                  }\n\n                  if (!Range.includes(editor.selection, path)) {\n                    continue\n                  }\n\n                  const marks = span.marks ?? []\n                  const existingSameTypeAnnotations = marks.filter((mark) =>\n                    markDefs.some(\n                      (markDef) =>\n                        markDef._key === mark && markDef._type === type.name,\n                    ),\n                  )\n\n                  Transforms.setNodes(\n                    editor,\n                    {\n                      marks: [\n                        ...marks.filter(\n                          (mark) => !existingSameTypeAnnotations.includes(mark),\n                        ),\n                        annotationKey,\n                      ],\n                    },\n                    {at: path},\n                  )\n                  spanPath = [{_key: block._key}, 'children', {_key: span._key}]\n                }\n              }\n\n              if (markDefPath && spanPath) {\n                returnValue = {\n                  markDefPath,\n                  markDefPaths,\n                  spanPath,\n                }\n              }\n            })\n            editor.onChange()\n          }\n        }\n        return returnValue\n      },\n      delete: (\n        selection: EditorSelection,\n        options?: EditableAPIDeleteOptions,\n      ): void => {\n        if (selection) {\n          const range = toSlateRange(selection, editor)\n          const hasRange =\n            range && range.anchor.path.length > 0 && range.focus.path.length > 0\n          if (!hasRange) {\n            throw new Error('Invalid range')\n          }\n          if (range) {\n            if (!options?.mode || options?.mode === 'selected') {\n              debug(`Deleting content in selection`)\n              Transforms.delete(editor, {\n                at: range,\n                hanging: true,\n                voids: true,\n              })\n              editor.onChange()\n              return\n            }\n            if (options?.mode === 'blocks') {\n              debug(`Deleting blocks touched by selection`)\n              Transforms.removeNodes(editor, {\n                at: range,\n                voids: true,\n                match: (node) => {\n                  return (\n                    editor.isTextBlock(node) ||\n                    (!editor.isTextBlock(node) && SlateElement.isElement(node))\n                  )\n                },\n              })\n            }\n            if (options?.mode === 'children') {\n              debug(`Deleting children touched by selection`)\n              Transforms.removeNodes(editor, {\n                at: range,\n                voids: true,\n                match: (node) => {\n                  return (\n                    node._type === types.span.name || // Text children\n                    (!editor.isTextBlock(node) && SlateElement.isElement(node)) // inline blocks\n                  )\n                },\n              })\n            }\n            // If the editor was emptied, insert a placeholder block\n            // directly into the editor's children. We don't want to do this\n            // through a Transform (because that would trigger a change event\n            // that would insert the placeholder into the actual value\n            // which should remain empty)\n            if (editor.children.length === 0) {\n              editor.children = [editor.pteCreateTextBlock({decorators: []})]\n            }\n            editor.onChange()\n          }\n        }\n      },\n      removeAnnotation: (type: ObjectSchemaType): void => {\n        debug('Removing annotation', type)\n\n        Editor.withoutNormalizing(editor, () => {\n          if (!editor.selection) {\n            return\n          }\n\n          if (Range.isCollapsed(editor.selection)) {\n            const [block, blockPath] = Editor.node(editor, editor.selection, {\n              depth: 1,\n            })\n\n            if (!editor.isTextBlock(block)) {\n              return\n            }\n\n            const markDefs = block.markDefs ?? []\n            const potentialAnnotations = markDefs.filter(\n              (markDef) => markDef._type === type.name,\n            )\n\n            const [selectedChild, selectedChildPath] = Editor.node(\n              editor,\n              editor.selection,\n              {\n                depth: 2,\n              },\n            )\n\n            if (!editor.isTextSpan(selectedChild)) {\n              return\n            }\n\n            const annotationToRemove = selectedChild.marks?.find((mark) =>\n              potentialAnnotations.some((markDef) => markDef._key === mark),\n            )\n\n            if (!annotationToRemove) {\n              return\n            }\n\n            const previousSpansWithSameAnnotation: Array<\n              [span: PortableTextSpan, path: SlatePath]\n            > = []\n\n            for (const [child, childPath] of Node.children(editor, blockPath, {\n              reverse: true,\n            })) {\n              if (!editor.isTextSpan(child)) {\n                continue\n              }\n\n              if (!SlatePath.isBefore(childPath, selectedChildPath)) {\n                continue\n              }\n\n              if (child.marks?.includes(annotationToRemove)) {\n                previousSpansWithSameAnnotation.push([child, childPath])\n              } else {\n                break\n              }\n            }\n\n            const nextSpansWithSameAnnotation: Array<\n              [span: PortableTextSpan, path: SlatePath]\n            > = []\n\n            for (const [child, childPath] of Node.children(editor, blockPath)) {\n              if (!editor.isTextSpan(child)) {\n                continue\n              }\n\n              if (!SlatePath.isAfter(childPath, selectedChildPath)) {\n                continue\n              }\n\n              if (child.marks?.includes(annotationToRemove)) {\n                nextSpansWithSameAnnotation.push([child, childPath])\n              } else {\n                break\n              }\n            }\n\n            for (const [child, childPath] of [\n              ...previousSpansWithSameAnnotation,\n              [selectedChild, selectedChildPath] as const,\n              ...nextSpansWithSameAnnotation,\n            ]) {\n              Transforms.setNodes(\n                editor,\n                {\n                  marks: child.marks?.filter(\n                    (mark) => mark !== annotationToRemove,\n                  ),\n                },\n                {at: childPath},\n              )\n            }\n          } else {\n            Transforms.setNodes(\n              editor,\n              {},\n              {\n                match: (node) => editor.isTextSpan(node),\n                split: true,\n                hanging: true,\n              },\n            )\n\n            const blocks = Editor.nodes(editor, {\n              at: editor.selection,\n              match: (node) => editor.isTextBlock(node),\n            })\n\n            for (const [block, blockPath] of blocks) {\n              const children = Node.children(editor, blockPath)\n\n              for (const [child, childPath] of children) {\n                if (!editor.isTextSpan(child)) {\n                  continue\n                }\n\n                if (!Range.includes(editor.selection, childPath)) {\n                  continue\n                }\n\n                const markDefs = block.markDefs ?? []\n                const marks = child.marks ?? []\n                const marksWithoutAnnotation = marks.filter((mark) => {\n                  const markDef = markDefs.find(\n                    (markDef) => markDef._key === mark,\n                  )\n                  return markDef?._type !== type.name\n                })\n\n                if (marksWithoutAnnotation.length !== marks.length) {\n                  Transforms.setNodes(\n                    editor,\n                    {\n                      marks: marksWithoutAnnotation,\n                    },\n                    {at: childPath},\n                  )\n                }\n              }\n            }\n          }\n        })\n        editor.onChange()\n      },\n      getSelection: (): EditorSelection | null => {\n        let ptRange: EditorSelection = null\n        if (editor.selection) {\n          const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n          if (existing) {\n            return existing\n          }\n          ptRange = toPortableTextRange(\n            fromSlateValue(\n              editor.children,\n              types.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor),\n            ),\n            editor.selection,\n            types,\n          )\n          SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n        }\n        return ptRange\n      },\n      getValue: () => {\n        return fromSlateValue(\n          editor.children,\n          types.block.name,\n          KEY_TO_VALUE_ELEMENT.get(editor),\n        )\n      },\n      isCollapsedSelection: () => {\n        return !!editor.selection && Range.isCollapsed(editor.selection)\n      },\n      isExpandedSelection: () => {\n        return !!editor.selection && Range.isExpanded(editor.selection)\n      },\n      insertBreak: () => {\n        editor.insertBreak()\n        editor.onChange()\n      },\n      getFragment: () => {\n        return fromSlateValue(editor.getFragment(), types.block.name)\n      },\n      isSelectionsOverlapping: (\n        selectionA: EditorSelection,\n        selectionB: EditorSelection,\n      ) => {\n        // Convert the selections to Slate ranges\n        const rangeA = toSlateRange(selectionA, editor)\n        const rangeB = toSlateRange(selectionB, editor)\n\n        // Make sure the ranges are valid\n        const isValidRanges = Range.isRange(rangeA) && Range.isRange(rangeB)\n\n        // Check if the ranges are overlapping\n        const isOverlapping = isValidRanges && Range.includes(rangeA, rangeB)\n\n        return isOverlapping\n      },\n    })\n    return editor\n  }\n}\n","import type {Editor} from 'slate'\nimport {\n  IS_PROCESSING_LOCAL_CHANGES,\n  IS_PROCESSING_REMOTE_CHANGES,\n} from './weakMaps'\n\nexport function withRemoteChanges(editor: Editor, fn: () => void): void {\n  const prev = isChangingRemotely(editor) || false\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, true)\n  fn()\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, prev)\n}\n\nexport function isChangingRemotely(editor: Editor): boolean | undefined {\n  return IS_PROCESSING_REMOTE_CHANGES.get(editor)\n}\n\nexport function isChangingLocally(editor: Editor): boolean | undefined {\n  return IS_PROCESSING_LOCAL_CHANGES.get(editor)\n}\n","import type {Editor} from 'slate'\n\nconst IS_UDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\nconst IS_REDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withUndoing(editor: Editor, fn: () => void) {\n  const prev = isUndoing(editor)\n  IS_UDOING.set(editor, true)\n  fn()\n  IS_UDOING.set(editor, prev)\n}\n\nexport function isUndoing(editor: Editor) {\n  return IS_UDOING.get(editor) ?? false\n}\n\nexport function setIsUndoing(editor: Editor, isUndoing: boolean) {\n  IS_UDOING.set(editor, isUndoing)\n}\n\nexport function withRedoing(editor: Editor, fn: () => void) {\n  const prev = isRedoing(editor)\n  IS_REDOING.set(editor, true)\n  fn()\n  IS_REDOING.set(editor, prev)\n}\n\nexport function isRedoing(editor: Editor) {\n  return IS_REDOING.get(editor) ?? false\n}\n\nexport function setIsRedoing(editor: Editor, isRedoing: boolean) {\n  IS_REDOING.set(editor, isRedoing)\n}\n","import type {PortableTextSlateEditor} from '../../types/editor'\nimport {isChangingRemotely} from '../../utils/withChanges'\nimport {isRedoing, isUndoing} from '../../utils/withUndoRedo'\n\n/**\n * This plugin makes sure that the PTE maxBlocks prop is respected\n *\n */\nexport function createWithMaxBlocks(maxBlocks: number) {\n  return function withMaxBlocks(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n    editor.apply = (operation) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      const rows = maxBlocks\n      if (rows > 0 && editor.children.length >= rows) {\n        if (\n          (operation.type === 'insert_node' ||\n            operation.type === 'split_node') &&\n          operation.path.length === 1\n        ) {\n          return\n        }\n      }\n      apply(operation)\n    }\n    return editor\n  }\n}\n","import {Editor, Element, Node, Transforms} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {isChangingRemotely} from '../../utils/withChanges'\nimport {isRedoing, isUndoing} from '../../utils/withUndoRedo'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that every new node in the editor get a new _key prop when created\n *\n */\nexport function createWithObjectKeys(\n  editorActor: EditorActor,\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  return function withKeys(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply, normalizeNode} = editor\n\n    // The default behavior is to always generate a new key here.\n    // For example, when undoing and redoing we want to retain the keys, but\n    // when we create a new bold span by splitting a non-bold-span we want the produced node to get a new key.\n    editor.apply = (operation) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      if (operation.type === 'split_node') {\n        apply({\n          ...operation,\n          properties: {\n            ...operation.properties,\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n          },\n        })\n\n        return\n      }\n\n      if (operation.type === 'insert_node') {\n        if (!Editor.isEditor(operation.node)) {\n          apply({\n            ...operation,\n            node: {\n              ...operation.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n            },\n          })\n\n          return\n        }\n      }\n\n      apply(operation)\n    }\n\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n      if (Element.isElement(node) && node._type === schemaTypes.block.name) {\n        // Set key on block itself\n        if (!node._key) {\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {_key: editorActor.getSnapshot().context.keyGenerator()},\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n        // Set keys on it's children\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (!child._key) {\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {_key: editorActor.getSnapshot().context.keyGenerator()},\n              {at: childPath},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n      normalizeNode(entry)\n    }\n\n    return editor\n  }\n}\n","function isHighSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 55296 && charCode <= 56319;\n}\nfunction isLowSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 56320 && charCode <= 57343;\n}\nfunction cloneDiff(diff) {\n  const [type, patch] = diff;\n  return [type, patch];\n}\nfunction getCommonOverlap(textA, textB) {\n  let text1 = textA;\n  let text2 = textB;\n  const text1Length = text1.length;\n  const text2Length = text2.length;\n  if (text1Length === 0 || text2Length === 0) {\n    return 0;\n  }\n  if (text1Length > text2Length) {\n    text1 = text1.substring(text1Length - text2Length);\n  } else if (text1Length < text2Length) {\n    text2 = text2.substring(0, text1Length);\n  }\n  const textLength = Math.min(text1Length, text2Length);\n  if (text1 === text2) {\n    return textLength;\n  }\n  let best = 0;\n  let length = 1;\n  for (let found = 0; found !== -1;) {\n    const pattern = text1.substring(textLength - length);\n    found = text2.indexOf(pattern);\n    if (found === -1) {\n      return best;\n    }\n    length += found;\n    if (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) {\n      best = length;\n      length++;\n    }\n  }\n  return best;\n}\nfunction getCommonPrefix(text1, text2) {\n  if (!text1 || !text2 || text1[0] !== text2[0]) {\n    return 0;\n  }\n  let pointerMin = 0;\n  let pointerMax = Math.min(text1.length, text2.length);\n  let pointerMid = pointerMax;\n  let pointerStart = 0;\n  while (pointerMin < pointerMid) {\n    if (text1.substring(pointerStart, pointerMid) === text2.substring(pointerStart, pointerMid)) {\n      pointerMin = pointerMid;\n      pointerStart = pointerMin;\n    } else {\n      pointerMax = pointerMid;\n    }\n    pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  }\n  return pointerMid;\n}\nfunction getCommonSuffix(text1, text2) {\n  if (!text1 || !text2 || text1[text1.length - 1] !== text2[text2.length - 1]) {\n    return 0;\n  }\n  let pointerMin = 0;\n  let pointerMax = Math.min(text1.length, text2.length);\n  let pointerMid = pointerMax;\n  let pointerEnd = 0;\n  while (pointerMin < pointerMid) {\n    if (text1.substring(text1.length - pointerMid, text1.length - pointerEnd) === text2.substring(text2.length - pointerMid, text2.length - pointerEnd)) {\n      pointerMin = pointerMid;\n      pointerEnd = pointerMin;\n    } else {\n      pointerMax = pointerMid;\n    }\n    pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  }\n  return pointerMid;\n}\nfunction cleanupSemantic(rawDiffs) {\n  let diffs = rawDiffs.map(diff => cloneDiff(diff));\n  let hasChanges = false;\n  const equalities = [];\n  let equalitiesLength = 0;\n  let lastEquality = null;\n  let pointer = 0;\n  let lengthInsertions1 = 0;\n  let lengthDeletions1 = 0;\n  let lengthInsertions2 = 0;\n  let lengthDeletions2 = 0;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] === DIFF_EQUAL) {\n      equalities[equalitiesLength++] = pointer;\n      lengthInsertions1 = lengthInsertions2;\n      lengthDeletions1 = lengthDeletions2;\n      lengthInsertions2 = 0;\n      lengthDeletions2 = 0;\n      lastEquality = diffs[pointer][1];\n    } else {\n      if (diffs[pointer][0] === DIFF_INSERT) {\n        lengthInsertions2 += diffs[pointer][1].length;\n      } else {\n        lengthDeletions2 += diffs[pointer][1].length;\n      }\n      if (lastEquality && lastEquality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastEquality.length <= Math.max(lengthInsertions2, lengthDeletions2)) {\n        diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]);\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--;\n        equalitiesLength--;\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n        lengthInsertions1 = 0;\n        lengthDeletions1 = 0;\n        lengthInsertions2 = 0;\n        lengthDeletions2 = 0;\n        lastEquality = null;\n        hasChanges = true;\n      }\n    }\n    pointer++;\n  }\n  if (hasChanges) {\n    diffs = cleanupMerge(diffs);\n  }\n  diffs = cleanupSemanticLossless(diffs);\n  pointer = 1;\n  while (pointer < diffs.length) {\n    if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {\n      const deletion = diffs[pointer - 1][1];\n      const insertion = diffs[pointer][1];\n      const overlapLength1 = getCommonOverlap(deletion, insertion);\n      const overlapLength2 = getCommonOverlap(insertion, deletion);\n      if (overlapLength1 >= overlapLength2) {\n        if (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) {\n          diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlapLength1)]);\n          diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1);\n          diffs[pointer + 1][1] = insertion.substring(overlapLength1);\n          pointer++;\n        }\n      } else if (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) {\n        diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlapLength2)]);\n        diffs[pointer - 1][0] = DIFF_INSERT;\n        diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2);\n        diffs[pointer + 1][0] = DIFF_DELETE;\n        diffs[pointer + 1][1] = deletion.substring(overlapLength2);\n        pointer++;\n      }\n      pointer++;\n    }\n    pointer++;\n  }\n  return diffs;\n}\nconst nonAlphaNumericRegex = /[^a-zA-Z0-9]/;\nconst whitespaceRegex = /\\s/;\nconst linebreakRegex = /[\\r\\n]/;\nconst blanklineEndRegex = /\\n\\r?\\n$/;\nconst blanklineStartRegex = /^\\r?\\n\\r?\\n/;\nfunction cleanupSemanticLossless(rawDiffs) {\n  const diffs = rawDiffs.map(diff => cloneDiff(diff));\n  function diffCleanupSemanticScore(one, two) {\n    if (!one || !two) {\n      return 6;\n    }\n    const char1 = one.charAt(one.length - 1);\n    const char2 = two.charAt(0);\n    const nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex);\n    const nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex);\n    const whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex);\n    const whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex);\n    const lineBreak1 = whitespace1 && char1.match(linebreakRegex);\n    const lineBreak2 = whitespace2 && char2.match(linebreakRegex);\n    const blankLine1 = lineBreak1 && one.match(blanklineEndRegex);\n    const blankLine2 = lineBreak2 && two.match(blanklineStartRegex);\n    if (blankLine1 || blankLine2) {\n      return 5;\n    } else if (lineBreak1 || lineBreak2) {\n      return 4;\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n      return 3;\n    } else if (whitespace1 || whitespace2) {\n      return 2;\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n      return 1;\n    }\n    return 0;\n  }\n  let pointer = 1;\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      let equality1 = diffs[pointer - 1][1];\n      let edit = diffs[pointer][1];\n      let equality2 = diffs[pointer + 1][1];\n      const commonOffset = getCommonSuffix(equality1, edit);\n      if (commonOffset) {\n        const commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\n        equality2 = commonString + equality2;\n      }\n      let bestEquality1 = equality1;\n      let bestEdit = edit;\n      let bestEquality2 = equality2;\n      let bestScore = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n      while (edit.charAt(0) === equality2.charAt(0)) {\n        equality1 += edit.charAt(0);\n        edit = edit.substring(1) + equality2.charAt(0);\n        equality2 = equality2.substring(1);\n        const score = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n        if (score >= bestScore) {\n          bestScore = score;\n          bestEquality1 = equality1;\n          bestEdit = edit;\n          bestEquality2 = equality2;\n        }\n      }\n      if (diffs[pointer - 1][1] !== bestEquality1) {\n        if (bestEquality1) {\n          diffs[pointer - 1][1] = bestEquality1;\n        } else {\n          diffs.splice(pointer - 1, 1);\n          pointer--;\n        }\n        diffs[pointer][1] = bestEdit;\n        if (bestEquality2) {\n          diffs[pointer + 1][1] = bestEquality2;\n        } else {\n          diffs.splice(pointer + 1, 1);\n          pointer--;\n        }\n      }\n    }\n    pointer++;\n  }\n  return diffs;\n}\nfunction cleanupMerge(rawDiffs) {\n  let diffs = rawDiffs.map(diff => cloneDiff(diff));\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0;\n  let countDelete = 0;\n  let countInsert = 0;\n  let textDelete = \"\";\n  let textInsert = \"\";\n  let commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++;\n        textInsert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        countDelete++;\n        textDelete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        if (countDelete + countInsert > 1) {\n          if (countDelete !== 0 && countInsert !== 0) {\n            commonlength = getCommonPrefix(textInsert, textDelete);\n            if (commonlength !== 0) {\n              if (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL) {\n                diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, [DIFF_EQUAL, textInsert.substring(0, commonlength)]);\n                pointer++;\n              }\n              textInsert = textInsert.substring(commonlength);\n              textDelete = textDelete.substring(commonlength);\n            }\n            commonlength = getCommonSuffix(textInsert, textDelete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1];\n              textInsert = textInsert.substring(0, textInsert.length - commonlength);\n              textDelete = textDelete.substring(0, textDelete.length - commonlength);\n            }\n          }\n          pointer -= countDelete + countInsert;\n          diffs.splice(pointer, countDelete + countInsert);\n          if (textDelete.length) {\n            diffs.splice(pointer, 0, [DIFF_DELETE, textDelete]);\n            pointer++;\n          }\n          if (textInsert.length) {\n            diffs.splice(pointer, 0, [DIFF_INSERT, textInsert]);\n            pointer++;\n          }\n          pointer++;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL) {\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        countInsert = 0;\n        countDelete = 0;\n        textDelete = \"\";\n        textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation\");\n    }\n  }\n  if (diffs[diffs.length - 1][1] === \"\") {\n    diffs.pop();\n  }\n  let hasChanges = false;\n  pointer = 1;\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      if (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) === diffs[pointer - 1][1]) {\n        diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        hasChanges = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1]) {\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        hasChanges = true;\n      }\n    }\n    pointer++;\n  }\n  if (hasChanges) {\n    diffs = cleanupMerge(diffs);\n  }\n  return diffs;\n}\nfunction trueCount() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return args.reduce((n, bool) => n + (bool ? 1 : 0), 0);\n}\nfunction cleanupEfficiency(rawDiffs) {\n  let editCost = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  let diffs = rawDiffs.map(diff => cloneDiff(diff));\n  let hasChanges = false;\n  const equalities = [];\n  let equalitiesLength = 0;\n  let lastEquality = null;\n  let pointer = 0;\n  let preIns = false;\n  let preDel = false;\n  let postIns = false;\n  let postDel = false;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] === DIFF_EQUAL) {\n      if (diffs[pointer][1].length < editCost && (postIns || postDel)) {\n        equalities[equalitiesLength++] = pointer;\n        preIns = postIns;\n        preDel = postDel;\n        lastEquality = diffs[pointer][1];\n      } else {\n        equalitiesLength = 0;\n        lastEquality = null;\n      }\n      postIns = false;\n      postDel = false;\n    } else {\n      if (diffs[pointer][0] === DIFF_DELETE) {\n        postDel = true;\n      } else {\n        postIns = true;\n      }\n      if (lastEquality && (preIns && preDel && postIns && postDel || lastEquality.length < editCost / 2 && trueCount(preIns, preDel, postIns, postDel) === 3)) {\n        diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]);\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--;\n        lastEquality = null;\n        if (preIns && preDel) {\n          postIns = true;\n          postDel = true;\n          equalitiesLength = 0;\n        } else {\n          equalitiesLength--;\n          pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n          postIns = false;\n          postDel = false;\n        }\n        hasChanges = true;\n      }\n    }\n    pointer++;\n  }\n  if (hasChanges) {\n    diffs = cleanupMerge(diffs);\n  }\n  return diffs;\n}\nfunction bisect(text1, text2, deadline) {\n  const text1Length = text1.length;\n  const text2Length = text2.length;\n  const maxD = Math.ceil((text1Length + text2Length) / 2);\n  const vOffset = maxD;\n  const vLength = 2 * maxD;\n  const v1 = new Array(vLength);\n  const v2 = new Array(vLength);\n  for (let x = 0; x < vLength; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[vOffset + 1] = 0;\n  v2[vOffset + 1] = 0;\n  const delta = text1Length - text2Length;\n  const front = delta % 2 !== 0;\n  let k1start = 0;\n  let k1end = 0;\n  let k2start = 0;\n  let k2end = 0;\n  for (let d = 0; d < maxD; d++) {\n    if (Date.now() > deadline) {\n      break;\n    }\n    for (let k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      const k1Offset = vOffset + k1;\n      let x1;\n      if (k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1]) {\n        x1 = v1[k1Offset + 1];\n      } else {\n        x1 = v1[k1Offset - 1] + 1;\n      }\n      let y1 = x1 - k1;\n      while (x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1Offset] = x1;\n      if (x1 > text1Length) {\n        k1end += 2;\n      } else if (y1 > text2Length) {\n        k1start += 2;\n      } else if (front) {\n        const k2Offset = vOffset + delta - k1;\n        if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {\n          const x2 = text1Length - v2[k2Offset];\n          if (x1 >= x2) {\n            return bisectSplit(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n    for (let k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      const k2Offset = vOffset + k2;\n      let x2;\n      if (k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1]) {\n        x2 = v2[k2Offset + 1];\n      } else {\n        x2 = v2[k2Offset - 1] + 1;\n      }\n      let y2 = x2 - k2;\n      while (x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2Offset] = x2;\n      if (x2 > text1Length) {\n        k2end += 2;\n      } else if (y2 > text2Length) {\n        k2start += 2;\n      } else if (!front) {\n        const k1Offset = vOffset + delta - k2;\n        if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {\n          const x1 = v1[k1Offset];\n          const y1 = vOffset + x1 - k1Offset;\n          x2 = text1Length - x2;\n          if (x1 >= x2) {\n            return bisectSplit(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n  }\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n}\nfunction bisectSplit(text1, text2, x, y, deadline) {\n  const text1a = text1.substring(0, x);\n  const text2a = text2.substring(0, y);\n  const text1b = text1.substring(x);\n  const text2b = text2.substring(y);\n  const diffs = doDiff(text1a, text2a, {\n    checkLines: false,\n    deadline\n  });\n  const diffsb = doDiff(text1b, text2b, {\n    checkLines: false,\n    deadline\n  });\n  return diffs.concat(diffsb);\n}\nfunction findHalfMatch(text1, text2) {\n  let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  if (timeout <= 0) {\n    return null;\n  }\n  const longText = text1.length > text2.length ? text1 : text2;\n  const shortText = text1.length > text2.length ? text2 : text1;\n  if (longText.length < 4 || shortText.length * 2 < longText.length) {\n    return null;\n  }\n  const halfMatch1 = halfMatchI(longText, shortText, Math.ceil(longText.length / 4));\n  const halfMatch2 = halfMatchI(longText, shortText, Math.ceil(longText.length / 2));\n  let halfMatch;\n  if (halfMatch1 && halfMatch2) {\n    halfMatch = halfMatch1[4].length > halfMatch2[4].length ? halfMatch1 : halfMatch2;\n  } else if (!halfMatch1 && !halfMatch2) {\n    return null;\n  } else if (!halfMatch2) {\n    halfMatch = halfMatch1;\n  } else if (!halfMatch1) {\n    halfMatch = halfMatch2;\n  }\n  if (!halfMatch) {\n    throw new Error(\"Unable to find a half match.\");\n  }\n  let text1A;\n  let text1B;\n  let text2A;\n  let text2B;\n  if (text1.length > text2.length) {\n    text1A = halfMatch[0];\n    text1B = halfMatch[1];\n    text2A = halfMatch[2];\n    text2B = halfMatch[3];\n  } else {\n    text2A = halfMatch[0];\n    text2B = halfMatch[1];\n    text1A = halfMatch[2];\n    text1B = halfMatch[3];\n  }\n  const midCommon = halfMatch[4];\n  return [text1A, text1B, text2A, text2B, midCommon];\n}\nfunction halfMatchI(longText, shortText, i) {\n  const seed = longText.slice(i, i + Math.floor(longText.length / 4));\n  let j = -1;\n  let bestCommon = \"\";\n  let bestLongTextA;\n  let bestLongTextB;\n  let bestShortTextA;\n  let bestShortTextB;\n  while ((j = shortText.indexOf(seed, j + 1)) !== -1) {\n    const prefixLength = getCommonPrefix(longText.slice(i), shortText.slice(j));\n    const suffixLength = getCommonSuffix(longText.slice(0, i), shortText.slice(0, j));\n    if (bestCommon.length < suffixLength + prefixLength) {\n      bestCommon = shortText.slice(j - suffixLength, j) + shortText.slice(j, j + prefixLength);\n      bestLongTextA = longText.slice(0, i - suffixLength);\n      bestLongTextB = longText.slice(i + prefixLength);\n      bestShortTextA = shortText.slice(0, j - suffixLength);\n      bestShortTextB = shortText.slice(j + prefixLength);\n    }\n  }\n  if (bestCommon.length * 2 >= longText.length) {\n    return [bestLongTextA || \"\", bestLongTextB || \"\", bestShortTextA || \"\", bestShortTextB || \"\", bestCommon || \"\"];\n  }\n  return null;\n}\nfunction charsToLines(diffs, lineArray) {\n  for (let x = 0; x < diffs.length; x++) {\n    const chars = diffs[x][1];\n    const text = [];\n    for (let y = 0; y < chars.length; y++) {\n      text[y] = lineArray[chars.charCodeAt(y)];\n    }\n    diffs[x][1] = text.join(\"\");\n  }\n}\nfunction linesToChars(textA, textB) {\n  const lineArray = [];\n  const lineHash = {};\n  lineArray[0] = \"\";\n  function diffLinesToMunge(text) {\n    let chars = \"\";\n    let lineStart = 0;\n    let lineEnd = -1;\n    let lineArrayLength = lineArray.length;\n    while (lineEnd < text.length - 1) {\n      lineEnd = text.indexOf(\"\\n\", lineStart);\n      if (lineEnd === -1) {\n        lineEnd = text.length - 1;\n      }\n      let line = text.slice(lineStart, lineEnd + 1);\n      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== void 0) {\n        chars += String.fromCharCode(lineHash[line]);\n      } else {\n        if (lineArrayLength === maxLines) {\n          line = text.slice(lineStart);\n          lineEnd = text.length;\n        }\n        chars += String.fromCharCode(lineArrayLength);\n        lineHash[line] = lineArrayLength;\n        lineArray[lineArrayLength++] = line;\n      }\n      lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  let maxLines = 4e4;\n  const chars1 = diffLinesToMunge(textA);\n  maxLines = 65535;\n  const chars2 = diffLinesToMunge(textB);\n  return {\n    chars1,\n    chars2,\n    lineArray\n  };\n}\nfunction doLineModeDiff(textA, textB, opts) {\n  let text1 = textA;\n  let text2 = textB;\n  const a = linesToChars(text1, text2);\n  text1 = a.chars1;\n  text2 = a.chars2;\n  const linearray = a.lineArray;\n  let diffs = doDiff(text1, text2, {\n    checkLines: false,\n    deadline: opts.deadline\n  });\n  charsToLines(diffs, linearray);\n  diffs = cleanupSemantic(diffs);\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0;\n  let countDelete = 0;\n  let countInsert = 0;\n  let textDelete = \"\";\n  let textInsert = \"\";\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++;\n        textInsert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        countDelete++;\n        textDelete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        if (countDelete >= 1 && countInsert >= 1) {\n          diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert);\n          pointer = pointer - countDelete - countInsert;\n          const aa = doDiff(textDelete, textInsert, {\n            checkLines: false,\n            deadline: opts.deadline\n          });\n          for (let j = aa.length - 1; j >= 0; j--) {\n            diffs.splice(pointer, 0, aa[j]);\n          }\n          pointer += aa.length;\n        }\n        countInsert = 0;\n        countDelete = 0;\n        textDelete = \"\";\n        textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n    pointer++;\n  }\n  diffs.pop();\n  return diffs;\n}\nfunction computeDiff(text1, text2, opts) {\n  let diffs;\n  if (!text1) {\n    return [[DIFF_INSERT, text2]];\n  }\n  if (!text2) {\n    return [[DIFF_DELETE, text1]];\n  }\n  const longtext = text1.length > text2.length ? text1 : text2;\n  const shorttext = text1.length > text2.length ? text2 : text1;\n  const i = longtext.indexOf(shorttext);\n  if (i !== -1) {\n    diffs = [[DIFF_INSERT, longtext.substring(0, i)], [DIFF_EQUAL, shorttext], [DIFF_INSERT, longtext.substring(i + shorttext.length)]];\n    if (text1.length > text2.length) {\n      diffs[0][0] = DIFF_DELETE;\n      diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n  if (shorttext.length === 1) {\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  }\n  const halfMatch = findHalfMatch(text1, text2);\n  if (halfMatch) {\n    const text1A = halfMatch[0];\n    const text1B = halfMatch[1];\n    const text2A = halfMatch[2];\n    const text2B = halfMatch[3];\n    const midCommon = halfMatch[4];\n    const diffsA = doDiff(text1A, text2A, opts);\n    const diffsB = doDiff(text1B, text2B, opts);\n    return diffsA.concat([[DIFF_EQUAL, midCommon]], diffsB);\n  }\n  if (opts.checkLines && text1.length > 100 && text2.length > 100) {\n    return doLineModeDiff(text1, text2, opts);\n  }\n  return bisect(text1, text2, opts.deadline);\n}\nconst DIFF_DELETE = -1;\nconst DIFF_INSERT = 1;\nconst DIFF_EQUAL = 0;\nfunction diff(textA, textB, opts) {\n  if (textA === null || textB === null) {\n    throw new Error(\"Null input. (diff)\");\n  }\n  const diffs = doDiff(textA, textB, createInternalOpts(opts || {}));\n  adjustDiffForSurrogatePairs(diffs);\n  return diffs;\n}\nfunction doDiff(textA, textB, options) {\n  let text1 = textA;\n  let text2 = textB;\n  if (text1 === text2) {\n    return text1 ? [[DIFF_EQUAL, text1]] : [];\n  }\n  let commonlength = getCommonPrefix(text1, text2);\n  const commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n  commonlength = getCommonSuffix(text1, text2);\n  const commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n  let diffs = computeDiff(text1, text2, options);\n  if (commonprefix) {\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\n  }\n  if (commonsuffix) {\n    diffs.push([DIFF_EQUAL, commonsuffix]);\n  }\n  diffs = cleanupMerge(diffs);\n  return diffs;\n}\nfunction createDeadLine(timeout) {\n  let t = 1;\n  if (typeof timeout !== \"undefined\") {\n    t = timeout <= 0 ? Number.MAX_VALUE : timeout;\n  }\n  return Date.now() + t * 1e3;\n}\nfunction createInternalOpts(opts) {\n  return {\n    checkLines: true,\n    deadline: createDeadLine(opts.timeout || 1),\n    ...opts\n  };\n}\nfunction combineChar(data, char, dir) {\n  return dir === 1 ? data + char : char + data;\n}\nfunction splitChar(data, dir) {\n  return dir === 1 ? [data.substring(0, data.length - 1), data[data.length - 1]] : [data.substring(1), data[0]];\n}\nfunction hasSharedChar(diffs, i, j, dir) {\n  return dir === 1 ? diffs[i][1][diffs[i][1].length - 1] === diffs[j][1][diffs[j][1].length - 1] : diffs[i][1][0] === diffs[j][1][0];\n}\nfunction deisolateChar(diffs, i, dir) {\n  const inv = dir === 1 ? -1 : 1;\n  let insertIdx = null;\n  let deleteIdx = null;\n  let j = i + dir;\n  for (; j >= 0 && j < diffs.length && (insertIdx === null || deleteIdx === null); j += dir) {\n    const [op, text2] = diffs[j];\n    if (text2.length === 0) {\n      continue;\n    }\n    if (op === DIFF_INSERT) {\n      if (insertIdx === null) {\n        insertIdx = j;\n      }\n      continue;\n    } else if (op === DIFF_DELETE) {\n      if (deleteIdx === null) {\n        deleteIdx = j;\n      }\n      continue;\n    } else if (op === DIFF_EQUAL) {\n      if (insertIdx === null && deleteIdx === null) {\n        const [rest, char2] = splitChar(diffs[i][1], dir);\n        diffs[i][1] = rest;\n        diffs[j][1] = combineChar(diffs[j][1], char2, inv);\n        return;\n      }\n      break;\n    }\n  }\n  if (insertIdx !== null && deleteIdx !== null && hasSharedChar(diffs, insertIdx, deleteIdx, dir)) {\n    const [insertText, insertChar] = splitChar(diffs[insertIdx][1], inv);\n    const [deleteText] = splitChar(diffs[deleteIdx][1], inv);\n    diffs[insertIdx][1] = insertText;\n    diffs[deleteIdx][1] = deleteText;\n    diffs[i][1] = combineChar(diffs[i][1], insertChar, dir);\n    return;\n  }\n  const [text, char] = splitChar(diffs[i][1], dir);\n  diffs[i][1] = text;\n  if (insertIdx === null) {\n    diffs.splice(j, 0, [DIFF_INSERT, char]);\n    if (deleteIdx !== null && deleteIdx >= j) deleteIdx++;\n  } else {\n    diffs[insertIdx][1] = combineChar(diffs[insertIdx][1], char, inv);\n  }\n  if (deleteIdx === null) {\n    diffs.splice(j, 0, [DIFF_DELETE, char]);\n  } else {\n    diffs[deleteIdx][1] = combineChar(diffs[deleteIdx][1], char, inv);\n  }\n}\nfunction adjustDiffForSurrogatePairs(diffs) {\n  for (let i = 0; i < diffs.length; i++) {\n    const [diffType, diffText] = diffs[i];\n    if (diffText.length === 0) continue;\n    const firstChar = diffText[0];\n    const lastChar = diffText[diffText.length - 1];\n    if (isHighSurrogate(lastChar) && diffType === DIFF_EQUAL) {\n      deisolateChar(diffs, i, 1);\n    }\n    if (isLowSurrogate(firstChar) && diffType === DIFF_EQUAL) {\n      deisolateChar(diffs, i, -1);\n    }\n  }\n  for (let i = 0; i < diffs.length; i++) {\n    if (diffs[i][1].length === 0) {\n      diffs.splice(i, 1);\n    }\n  }\n}\nconst DEFAULT_OPTIONS = {\n  /**\n   * At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n   */\n  threshold: 0.5,\n  /**\n   * How far to search for a match (0 = exact location, 1000+ = broad match).\n   * A match this many characters away from the expected location will add\n   * 1.0 to the score (0.0 is a perfect match).\n   */\n  distance: 1e3\n};\nfunction applyDefaults(options) {\n  return {\n    ...DEFAULT_OPTIONS,\n    ...options\n  };\n}\nconst MAX_BITS$1 = 32;\nfunction bitap(text, pattern, loc) {\n  let opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  if (pattern.length > MAX_BITS$1) {\n    throw new Error(\"Pattern too long for this browser.\");\n  }\n  const options = applyDefaults(opts);\n  const s = getAlphabetFromPattern(pattern);\n  function getBitapScore(e, x) {\n    const accuracy = e / pattern.length;\n    const proximity = Math.abs(loc - x);\n    if (!options.distance) {\n      return proximity ? 1 : accuracy;\n    }\n    return accuracy + proximity / options.distance;\n  }\n  let scoreThreshold = options.threshold;\n  let bestLoc = text.indexOf(pattern, loc);\n  if (bestLoc !== -1) {\n    scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold);\n    bestLoc = text.lastIndexOf(pattern, loc + pattern.length);\n    if (bestLoc !== -1) {\n      scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold);\n    }\n  }\n  const matchmask = 1 << pattern.length - 1;\n  bestLoc = -1;\n  let binMin;\n  let binMid;\n  let binMax = pattern.length + text.length;\n  let lastRd = [];\n  for (let d = 0; d < pattern.length; d++) {\n    binMin = 0;\n    binMid = binMax;\n    while (binMin < binMid) {\n      if (getBitapScore(d, loc + binMid) <= scoreThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    }\n    binMax = binMid;\n    let start = Math.max(1, loc - binMid + 1);\n    const finish = Math.min(loc + binMid, text.length) + pattern.length;\n    const rd = new Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (let j = finish; j >= start; j--) {\n      const charMatch = s[text.charAt(j - 1)];\n      if (d === 0) {\n        rd[j] = (rd[j + 1] << 1 | 1) & charMatch;\n      } else {\n        rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1];\n      }\n      if (rd[j] & matchmask) {\n        const score = getBitapScore(d, j - 1);\n        if (score <= scoreThreshold) {\n          scoreThreshold = score;\n          bestLoc = j - 1;\n          if (bestLoc > loc) {\n            start = Math.max(1, 2 * loc - bestLoc);\n          } else {\n            break;\n          }\n        }\n      }\n    }\n    if (getBitapScore(d + 1, loc) > scoreThreshold) {\n      break;\n    }\n    lastRd = rd;\n  }\n  return bestLoc;\n}\nfunction getAlphabetFromPattern(pattern) {\n  const s = {};\n  for (let i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] = 0;\n  }\n  for (let i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n  }\n  return s;\n}\nfunction match(text, pattern, searchLocation) {\n  if (text === null || pattern === null || searchLocation === null) {\n    throw new Error(\"Null input. (match())\");\n  }\n  const loc = Math.max(0, Math.min(searchLocation, text.length));\n  if (text === pattern) {\n    return 0;\n  } else if (!text.length) {\n    return -1;\n  } else if (text.substring(loc, loc + pattern.length) === pattern) {\n    return loc;\n  }\n  return bitap(text, pattern, loc);\n}\nfunction createPatchObject(start1, start2) {\n  return {\n    diffs: [],\n    start1,\n    start2,\n    utf8Start1: start1,\n    utf8Start2: start2,\n    length1: 0,\n    length2: 0,\n    utf8Length1: 0,\n    utf8Length2: 0\n  };\n}\nfunction diffText1(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join(\"\");\n}\nfunction diffText2(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_DELETE) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join(\"\");\n}\nfunction countUtf8Bytes(str) {\n  let bytes = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (typeof codePoint === \"undefined\") {\n      throw new Error(\"Failed to get codepoint\");\n    }\n    bytes += utf8len(codePoint);\n  }\n  return bytes;\n}\nfunction adjustIndiciesToUcs2(patches, base) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let byteOffset = 0;\n  let idx = 0;\n  function advanceTo(target) {\n    for (; byteOffset < target;) {\n      const codePoint = base.codePointAt(idx);\n      if (typeof codePoint === \"undefined\") {\n        return idx;\n      }\n      byteOffset += utf8len(codePoint);\n      if (codePoint > 65535) {\n        idx += 2;\n      } else {\n        idx += 1;\n      }\n    }\n    if (!options.allowExceedingIndices && byteOffset !== target) {\n      throw new Error(\"Failed to determine byte offset\");\n    }\n    return idx;\n  }\n  const adjusted = [];\n  for (const patch of patches) {\n    adjusted.push({\n      diffs: patch.diffs.map(diff => cloneDiff(diff)),\n      start1: advanceTo(patch.start1),\n      start2: advanceTo(patch.start2),\n      utf8Start1: patch.utf8Start1,\n      utf8Start2: patch.utf8Start2,\n      length1: patch.length1,\n      length2: patch.length2,\n      utf8Length1: patch.utf8Length1,\n      utf8Length2: patch.utf8Length2\n    });\n  }\n  return adjusted;\n}\nfunction utf8len(codePoint) {\n  if (codePoint <= 127) return 1;\n  if (codePoint <= 2047) return 2;\n  if (codePoint <= 65535) return 3;\n  return 4;\n}\nconst MAX_BITS = 32;\nconst DEFAULT_MARGIN = 4;\nconst DEFAULT_OPTS = {\n  margin: 4\n};\nfunction getDefaultOpts() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    ...DEFAULT_OPTS,\n    ...opts\n  };\n}\nfunction make(a, b, options) {\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    let diffs = diff(a, b, {\n      checkLines: true\n    });\n    if (diffs.length > 2) {\n      diffs = cleanupSemantic(diffs);\n      diffs = cleanupEfficiency(diffs);\n    }\n    return _make(a, diffs, getDefaultOpts(options));\n  }\n  if (a && Array.isArray(a) && typeof b === \"undefined\") {\n    return _make(diffText1(a), a, getDefaultOpts(options));\n  }\n  if (typeof a === \"string\" && b && Array.isArray(b)) {\n    return _make(a, b, getDefaultOpts(options));\n  }\n  throw new Error(\"Unknown call format to make()\");\n}\nfunction _make(textA, diffs, options) {\n  if (diffs.length === 0) {\n    return [];\n  }\n  const patches = [];\n  let patch = createPatchObject(0, 0);\n  let patchDiffLength = 0;\n  let charCount1 = 0;\n  let charCount2 = 0;\n  let utf8Count1 = 0;\n  let utf8Count2 = 0;\n  let prepatchText = textA;\n  let postpatchText = textA;\n  for (let x = 0; x < diffs.length; x++) {\n    const currentDiff = diffs[x];\n    const [diffType, diffText] = currentDiff;\n    const diffTextLength = diffText.length;\n    const diffByteLength = countUtf8Bytes(diffText);\n    if (!patchDiffLength && diffType !== DIFF_EQUAL) {\n      patch.start1 = charCount1;\n      patch.start2 = charCount2;\n      patch.utf8Start1 = utf8Count1;\n      patch.utf8Start2 = utf8Count2;\n    }\n    switch (diffType) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = currentDiff;\n        patch.length2 += diffTextLength;\n        patch.utf8Length2 += diffByteLength;\n        postpatchText = postpatchText.substring(0, charCount2) + diffText + postpatchText.substring(charCount2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diffTextLength;\n        patch.utf8Length1 += diffByteLength;\n        patch.diffs[patchDiffLength++] = currentDiff;\n        postpatchText = postpatchText.substring(0, charCount2) + postpatchText.substring(charCount2 + diffTextLength);\n        break;\n      case DIFF_EQUAL:\n        if (diffTextLength <= 2 * options.margin && patchDiffLength && diffs.length !== x + 1) {\n          patch.diffs[patchDiffLength++] = currentDiff;\n          patch.length1 += diffTextLength;\n          patch.length2 += diffTextLength;\n          patch.utf8Length1 += diffByteLength;\n          patch.utf8Length2 += diffByteLength;\n        } else if (diffTextLength >= 2 * options.margin) {\n          if (patchDiffLength) {\n            addContext(patch, prepatchText, options);\n            patches.push(patch);\n            patch = createPatchObject(-1, -1);\n            patchDiffLength = 0;\n            prepatchText = postpatchText;\n            charCount1 = charCount2;\n            utf8Count1 = utf8Count2;\n          }\n        }\n        break;\n      default:\n        throw new Error(\"Unknown diff type\");\n    }\n    if (diffType !== DIFF_INSERT) {\n      charCount1 += diffTextLength;\n      utf8Count1 += diffByteLength;\n    }\n    if (diffType !== DIFF_DELETE) {\n      charCount2 += diffTextLength;\n      utf8Count2 += diffByteLength;\n    }\n  }\n  if (patchDiffLength) {\n    addContext(patch, prepatchText, options);\n    patches.push(patch);\n  }\n  return patches;\n}\nfunction addContext(patch, text, opts) {\n  if (text.length === 0) {\n    return;\n  }\n  let pattern = text.substring(patch.start2, patch.start2 + patch.length1);\n  let padding = 0;\n  while (text.indexOf(pattern) !== text.lastIndexOf(pattern) && pattern.length < MAX_BITS - opts.margin - opts.margin) {\n    padding += opts.margin;\n    pattern = text.substring(patch.start2 - padding, patch.start2 + patch.length1 + padding);\n  }\n  padding += opts.margin;\n  let prefixStart = patch.start2 - padding;\n  if (prefixStart >= 1 && isLowSurrogate(text[prefixStart])) {\n    prefixStart--;\n  }\n  const prefix = text.substring(prefixStart, patch.start2);\n  if (prefix) {\n    patch.diffs.unshift([DIFF_EQUAL, prefix]);\n  }\n  const prefixLength = prefix.length;\n  const prefixUtf8Length = countUtf8Bytes(prefix);\n  let suffixEnd = patch.start2 + patch.length1 + padding;\n  if (suffixEnd < text.length && isLowSurrogate(text[suffixEnd])) {\n    suffixEnd++;\n  }\n  const suffix = text.substring(patch.start2 + patch.length1, suffixEnd);\n  if (suffix) {\n    patch.diffs.push([DIFF_EQUAL, suffix]);\n  }\n  const suffixLength = suffix.length;\n  const suffixUtf8Length = countUtf8Bytes(suffix);\n  patch.start1 -= prefixLength;\n  patch.start2 -= prefixLength;\n  patch.utf8Start1 -= prefixUtf8Length;\n  patch.utf8Start2 -= prefixUtf8Length;\n  patch.length1 += prefixLength + suffixLength;\n  patch.length2 += prefixLength + suffixLength;\n  patch.utf8Length1 += prefixUtf8Length + suffixUtf8Length;\n  patch.utf8Length2 += prefixUtf8Length + suffixUtf8Length;\n}\nfunction levenshtein(diffs) {\n  let leven = 0;\n  let insertions = 0;\n  let deletions = 0;\n  for (let x = 0; x < diffs.length; x++) {\n    const op = diffs[x][0];\n    const data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        leven += Math.max(insertions, deletions);\n        insertions = 0;\n        deletions = 0;\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n  }\n  leven += Math.max(insertions, deletions);\n  return leven;\n}\nfunction xIndex(diffs, loc) {\n  let chars1 = 0;\n  let chars2 = 0;\n  let lastChars1 = 0;\n  let lastChars2 = 0;\n  let x;\n  for (x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      chars1 += diffs[x][1].length;\n    }\n    if (diffs[x][0] !== DIFF_DELETE) {\n      chars2 += diffs[x][1].length;\n    }\n    if (chars1 > loc) {\n      break;\n    }\n    lastChars1 = chars1;\n    lastChars2 = chars2;\n  }\n  if (diffs.length !== x && diffs[x][0] === DIFF_DELETE) {\n    return lastChars2;\n  }\n  return lastChars2 + (loc - lastChars1);\n}\nfunction addPadding(patches) {\n  let margin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_MARGIN;\n  const paddingLength = margin;\n  let nullPadding = \"\";\n  for (let x = 1; x <= paddingLength; x++) {\n    nullPadding += String.fromCharCode(x);\n  }\n  for (const p of patches) {\n    p.start1 += paddingLength;\n    p.start2 += paddingLength;\n    p.utf8Start1 += paddingLength;\n    p.utf8Start2 += paddingLength;\n  }\n  let patch = patches[0];\n  let diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[0][0] !== DIFF_EQUAL) {\n    diffs.unshift([DIFF_EQUAL, nullPadding]);\n    patch.start1 -= paddingLength;\n    patch.start2 -= paddingLength;\n    patch.utf8Start1 -= paddingLength;\n    patch.utf8Start2 -= paddingLength;\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n    patch.utf8Length1 += paddingLength;\n    patch.utf8Length2 += paddingLength;\n  } else if (paddingLength > diffs[0][1].length) {\n    const firstDiffLength = diffs[0][1].length;\n    const extraLength = paddingLength - firstDiffLength;\n    diffs[0][1] = nullPadding.substring(firstDiffLength) + diffs[0][1];\n    patch.start1 -= extraLength;\n    patch.start2 -= extraLength;\n    patch.utf8Start1 -= extraLength;\n    patch.utf8Start2 -= extraLength;\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n    patch.utf8Length1 += extraLength;\n    patch.utf8Length2 += extraLength;\n  }\n  patch = patches[patches.length - 1];\n  diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[diffs.length - 1][0] !== DIFF_EQUAL) {\n    diffs.push([DIFF_EQUAL, nullPadding]);\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n    patch.utf8Length1 += paddingLength;\n    patch.utf8Length2 += paddingLength;\n  } else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    const extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n    patch.utf8Length1 += extraLength;\n    patch.utf8Length2 += extraLength;\n  }\n  return nullPadding;\n}\nfunction splitMax(patches) {\n  let margin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_MARGIN;\n  const patchSize = MAX_BITS;\n  for (let x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patchSize) {\n      continue;\n    }\n    const bigpatch = patches[x];\n    patches.splice(x--, 1);\n    let start1 = bigpatch.start1;\n    let start2 = bigpatch.start2;\n    let preContext = \"\";\n    while (bigpatch.diffs.length !== 0) {\n      const patch = createPatchObject(start1 - preContext.length, start2 - preContext.length);\n      let empty = true;\n      if (preContext !== \"\") {\n        const precontextByteCount = countUtf8Bytes(preContext);\n        patch.length1 = preContext.length;\n        patch.utf8Length1 = precontextByteCount;\n        patch.length2 = preContext.length;\n        patch.utf8Length2 = precontextByteCount;\n        patch.diffs.push([DIFF_EQUAL, preContext]);\n      }\n      while (bigpatch.diffs.length !== 0 && patch.length1 < patchSize - margin) {\n        const diffType = bigpatch.diffs[0][0];\n        let diffText = bigpatch.diffs[0][1];\n        let diffTextByteCount = countUtf8Bytes(diffText);\n        if (diffType === DIFF_INSERT) {\n          patch.length2 += diffText.length;\n          patch.utf8Length2 += diffTextByteCount;\n          start2 += diffText.length;\n          const diff = bigpatch.diffs.shift();\n          if (diff) {\n            patch.diffs.push(diff);\n          }\n          empty = false;\n        } else if (diffType === DIFF_DELETE && patch.diffs.length === 1 && patch.diffs[0][0] === DIFF_EQUAL && diffText.length > 2 * patchSize) {\n          patch.length1 += diffText.length;\n          patch.utf8Length1 += diffTextByteCount;\n          start1 += diffText.length;\n          empty = false;\n          patch.diffs.push([diffType, diffText]);\n          bigpatch.diffs.shift();\n        } else {\n          diffText = diffText.substring(0, patchSize - patch.length1 - margin);\n          diffTextByteCount = countUtf8Bytes(diffText);\n          patch.length1 += diffText.length;\n          patch.utf8Length1 += diffTextByteCount;\n          start1 += diffText.length;\n          if (diffType === DIFF_EQUAL) {\n            patch.length2 += diffText.length;\n            patch.utf8Length2 += diffTextByteCount;\n            start2 += diffText.length;\n          } else {\n            empty = false;\n          }\n          patch.diffs.push([diffType, diffText]);\n          if (diffText === bigpatch.diffs[0][1]) {\n            bigpatch.diffs.shift();\n          } else {\n            bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diffText.length);\n          }\n        }\n      }\n      preContext = diffText2(patch.diffs);\n      preContext = preContext.substring(preContext.length - margin);\n      const postContext = diffText1(bigpatch.diffs).substring(0, margin);\n      const postContextByteCount = countUtf8Bytes(postContext);\n      if (postContext !== \"\") {\n        patch.length1 += postContext.length;\n        patch.length2 += postContext.length;\n        patch.utf8Length1 += postContextByteCount;\n        patch.utf8Length2 += postContextByteCount;\n        if (patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {\n          patch.diffs[patch.diffs.length - 1][1] += postContext;\n        } else {\n          patch.diffs.push([DIFF_EQUAL, postContext]);\n        }\n      }\n      if (!empty) {\n        patches.splice(++x, 0, patch);\n      }\n    }\n  }\n}\nfunction apply(patches, originalText) {\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (typeof patches === \"string\") {\n    throw new Error(\"Patches must be an array - pass the patch to `parsePatch()` first\");\n  }\n  let text = originalText;\n  if (patches.length === 0) {\n    return [text, []];\n  }\n  const parsed = adjustIndiciesToUcs2(patches, text, {\n    allowExceedingIndices: opts.allowExceedingIndices\n  });\n  const margin = opts.margin || DEFAULT_MARGIN;\n  const deleteThreshold = opts.deleteThreshold || 0.4;\n  const nullPadding = addPadding(parsed, margin);\n  text = nullPadding + text + nullPadding;\n  splitMax(parsed, margin);\n  let delta = 0;\n  const results = [];\n  for (let x = 0; x < parsed.length; x++) {\n    const expectedLoc = parsed[x].start2 + delta;\n    const text1 = diffText1(parsed[x].diffs);\n    let startLoc;\n    let endLoc = -1;\n    if (text1.length > MAX_BITS) {\n      startLoc = match(text, text1.substring(0, MAX_BITS), expectedLoc);\n      if (startLoc !== -1) {\n        endLoc = match(text, text1.substring(text1.length - MAX_BITS), expectedLoc + text1.length - MAX_BITS);\n        if (endLoc === -1 || startLoc >= endLoc) {\n          startLoc = -1;\n        }\n      }\n    } else {\n      startLoc = match(text, text1, expectedLoc);\n    }\n    if (startLoc === -1) {\n      results[x] = false;\n      delta -= parsed[x].length2 - parsed[x].length1;\n    } else {\n      results[x] = true;\n      delta = startLoc - expectedLoc;\n      let text2;\n      if (endLoc === -1) {\n        text2 = text.substring(startLoc, startLoc + text1.length);\n      } else {\n        text2 = text.substring(startLoc, endLoc + MAX_BITS);\n      }\n      if (text1 === text2) {\n        text = text.substring(0, startLoc) + diffText2(parsed[x].diffs) + text.substring(startLoc + text1.length);\n      } else {\n        let diffs = diff(text1, text2, {\n          checkLines: false\n        });\n        if (text1.length > MAX_BITS && levenshtein(diffs) / text1.length > deleteThreshold) {\n          results[x] = false;\n        } else {\n          diffs = cleanupSemanticLossless(diffs);\n          let index1 = 0;\n          let index2 = 0;\n          for (let y = 0; y < parsed[x].diffs.length; y++) {\n            const mod = parsed[x].diffs[y];\n            if (mod[0] !== DIFF_EQUAL) {\n              index2 = xIndex(diffs, index1);\n            }\n            if (mod[0] === DIFF_INSERT) {\n              text = text.substring(0, startLoc + index2) + mod[1] + text.substring(startLoc + index2);\n            } else if (mod[0] === DIFF_DELETE) {\n              text = text.substring(0, startLoc + index2) + text.substring(startLoc + xIndex(diffs, index1 + mod[1].length));\n            }\n            if (mod[0] !== DIFF_DELETE) {\n              index1 += mod[1].length;\n            }\n          }\n        }\n      }\n    }\n  }\n  text = text.substring(nullPadding.length, text.length - nullPadding.length);\n  return [text, results];\n}\nfunction stringify(patches) {\n  return patches.map(stringifyPatch).join(\"\");\n}\nfunction stringifyPatch(patch) {\n  const {\n    utf8Length1,\n    utf8Length2,\n    utf8Start1,\n    utf8Start2,\n    diffs\n  } = patch;\n  let coords1;\n  if (utf8Length1 === 0) {\n    coords1 = \"\".concat(utf8Start1, \",0\");\n  } else if (utf8Length1 === 1) {\n    coords1 = \"\".concat(utf8Start1 + 1);\n  } else {\n    coords1 = \"\".concat(utf8Start1 + 1, \",\").concat(utf8Length1);\n  }\n  let coords2;\n  if (utf8Length2 === 0) {\n    coords2 = \"\".concat(utf8Start2, \",0\");\n  } else if (utf8Length2 === 1) {\n    coords2 = \"\".concat(utf8Start2 + 1);\n  } else {\n    coords2 = \"\".concat(utf8Start2 + 1, \",\").concat(utf8Length2);\n  }\n  const text = [\"@@ -\".concat(coords1, \" +\").concat(coords2, \" @@\\n\")];\n  let op;\n  for (let x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        op = \"+\";\n        break;\n      case DIFF_DELETE:\n        op = \"-\";\n        break;\n      case DIFF_EQUAL:\n        op = \" \";\n        break;\n      default:\n        throw new Error(\"Unknown patch operation.\");\n    }\n    text[x + 1] = \"\".concat(op + encodeURI(diffs[x][1]), \"\\n\");\n  }\n  return text.join(\"\").replace(/%20/g, \" \");\n}\nconst patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\nfunction parse(textline) {\n  if (!textline) {\n    return [];\n  }\n  const patches = [];\n  const lines = textline.split(\"\\n\");\n  let textPointer = 0;\n  while (textPointer < lines.length) {\n    const m = lines[textPointer].match(patchHeader);\n    if (!m) {\n      throw new Error(\"Invalid patch string: \".concat(lines[textPointer]));\n    }\n    const patch = createPatchObject(toInt(m[1]), toInt(m[3]));\n    patches.push(patch);\n    if (m[2] === \"\") {\n      patch.start1--;\n      patch.utf8Start1--;\n      patch.length1 = 1;\n      patch.utf8Length1 = 1;\n    } else if (m[2] === \"0\") {\n      patch.length1 = 0;\n      patch.utf8Length1 = 0;\n    } else {\n      patch.start1--;\n      patch.utf8Start1--;\n      patch.utf8Length1 = toInt(m[2]);\n      patch.length1 = patch.utf8Length1;\n    }\n    if (m[4] === \"\") {\n      patch.start2--;\n      patch.utf8Start2--;\n      patch.length2 = 1;\n      patch.utf8Length2 = 1;\n    } else if (m[4] === \"0\") {\n      patch.length2 = 0;\n      patch.utf8Length2 = 0;\n    } else {\n      patch.start2--;\n      patch.utf8Start2--;\n      patch.utf8Length2 = toInt(m[4]);\n      patch.length2 = patch.utf8Length2;\n    }\n    textPointer++;\n    while (textPointer < lines.length) {\n      const currentLine = lines[textPointer];\n      const sign = currentLine.charAt(0);\n      if (sign === \"@\") {\n        break;\n      }\n      if (sign === \"\") {\n        textPointer++;\n        continue;\n      }\n      let line;\n      try {\n        line = decodeURI(currentLine.slice(1));\n      } catch (ex) {\n        throw new Error(\"Illegal escape in parse: \".concat(currentLine));\n      }\n      const utf8Diff = countUtf8Bytes(line) - line.length;\n      if (sign === \"-\") {\n        patch.diffs.push([DIFF_DELETE, line]);\n        patch.length1 -= utf8Diff;\n      } else if (sign === \"+\") {\n        patch.diffs.push([DIFF_INSERT, line]);\n        patch.length2 -= utf8Diff;\n      } else if (sign === \" \") {\n        patch.diffs.push([DIFF_EQUAL, line]);\n        patch.length1 -= utf8Diff;\n        patch.length2 -= utf8Diff;\n      } else {\n        throw new Error(\"Invalid patch mode \\\"\".concat(sign, \"\\\" in: \").concat(line));\n      }\n      textPointer++;\n    }\n  }\n  return patches;\n}\nfunction toInt(num) {\n  return parseInt(num, 10);\n}\nexport { DIFF_DELETE, DIFF_EQUAL, DIFF_INSERT, adjustIndiciesToUcs2, apply as applyPatches, cleanupEfficiency, cleanupSemantic, diff as makeDiff, make as makePatches, match, parse as parsePatch, stringifyPatch, stringify as stringifyPatches };\n//# sourceMappingURL=index.js.map\n","import {\n  applyAll,\n  type DiffMatchPatch,\n  type InsertPatch,\n  type Patch,\n  type SetPatch,\n  type UnsetPatch,\n} from '@portabletext/patches'\nimport {\n  cleanupEfficiency,\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  applyPatches as diffMatchPatchApplyPatches,\n  makeDiff,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {\n  KeyedSegment,\n  Path,\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n} from '@sanity/types'\nimport {\n  Element,\n  Text,\n  Transforms,\n  type Descendant,\n  type Node,\n  type Path as SlatePath,\n} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport {debugWithName} from './debug'\nimport {toSlateValue} from './values'\nimport {KEY_TO_SLATE_ELEMENT} from './weakMaps'\n\nconst debug = debugWithName('applyPatches')\nconst debugVerbose = debug.enabled && true\n\n/**\n * Creates a function that can apply a patch onto a PortableTextSlateEditor.\n */\nexport function createApplyPatch(\n  schemaTypes: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor, patch: Patch) => boolean {\n  return (editor: PortableTextSlateEditor, patch: Patch): boolean => {\n    let changed = false\n\n    // Save some CPU cycles by not stringifying unless enabled\n    if (debugVerbose) {\n      debug(\n        '\\n\\nNEW PATCH =============================================================',\n      )\n      debug(JSON.stringify(patch, null, 2))\n    }\n\n    try {\n      switch (patch.type) {\n        case 'insert':\n          changed = insertPatch(editor, patch, schemaTypes)\n          break\n        case 'unset':\n          changed = unsetPatch(editor, patch)\n          break\n        case 'set':\n          changed = setPatch(editor, patch)\n          break\n        case 'diffMatchPatch':\n          changed = diffMatchPatch(editor, patch)\n          break\n        default:\n          debug('Unhandled patch', patch.type)\n      }\n    } catch (err) {\n      console.error(err)\n    }\n\n    return changed\n  }\n}\n\n/**\n * Apply a remote diff match patch to the current PTE instance.\n * Note meant for external consumption, only exported for testing purposes.\n *\n * @param editor - Portable text slate editor instance\n * @param patch - The PTE diff match patch operation to apply\n * @returns true if the patch was applied, false otherwise\n * @internal\n */\nexport function diffMatchPatch(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  patch: DiffMatchPatch,\n): boolean {\n  const {block, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n  if (!block) {\n    debug('Block not found')\n    return false\n  }\n  if (!child || !childPath) {\n    debug('Child not found')\n    return false\n  }\n  const isSpanTextDiffMatchPatch =\n    block &&\n    editor.isTextBlock(block) &&\n    patch.path.length === 4 &&\n    patch.path[1] === 'children' &&\n    patch.path[3] === 'text'\n\n  if (!isSpanTextDiffMatchPatch || !Text.isText(child)) {\n    return false\n  }\n\n  const patches = parsePatch(patch.value)\n  const [newValue] = diffMatchPatchApplyPatches(patches, child.text, {\n    allowExceedingIndices: true,\n  })\n  const diff = cleanupEfficiency(makeDiff(child.text, newValue), 5)\n\n  debugState(editor, 'before')\n  let offset = 0\n  for (const [op, text] of diff) {\n    if (op === DIFF_INSERT) {\n      editor.apply({type: 'insert_text', path: childPath, offset, text})\n      offset += text.length\n    } else if (op === DIFF_DELETE) {\n      editor.apply({type: 'remove_text', path: childPath, offset: offset, text})\n    } else if (op === DIFF_EQUAL) {\n      offset += text.length\n    }\n  }\n  debugState(editor, 'after')\n\n  return true\n}\n\nfunction insertPatch(\n  editor: PortableTextSlateEditor,\n  patch: InsertPatch,\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  const {\n    block: targetBlock,\n    child: targetChild,\n    blockPath: targetBlockPath,\n    childPath: targetChildPath,\n  } = findBlockAndChildFromPath(editor, patch.path)\n  if (!targetBlock || !targetBlockPath) {\n    debug('Block not found')\n    return false\n  }\n  if (patch.path.length > 1 && patch.path[1] !== 'children') {\n    debug('Ignoring patch targeting void value')\n    return false\n  }\n  // Insert blocks\n  if (patch.path.length === 1) {\n    const {items, position} = patch\n    const blocksToInsert = toSlateValue(\n      items as PortableTextBlock[],\n      {schemaTypes},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    ) as Descendant[]\n    const targetBlockIndex = targetBlockPath[0]\n    const normalizedIdx =\n      position === 'after' ? targetBlockIndex + 1 : targetBlockIndex\n    debug(`Inserting blocks at path [${normalizedIdx}]`)\n    debugState(editor, 'before')\n    Transforms.insertNodes(editor, blocksToInsert, {at: [normalizedIdx]})\n    debugState(editor, 'after')\n    return true\n  }\n  // Insert children\n  const {items, position} = patch\n  if (!targetChild || !targetChildPath) {\n    debug('Child not found')\n    return false\n  }\n  const childrenToInsert =\n    targetBlock &&\n    toSlateValue(\n      [{...targetBlock, children: items as PortableTextChild[]}],\n      {schemaTypes},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    )\n  const targetChildIndex = targetChildPath[1]\n  const normalizedIdx =\n    position === 'after' ? targetChildIndex + 1 : targetChildIndex\n  const childInsertPath = [targetChildPath[0], normalizedIdx]\n  debug(`Inserting children at path ${childInsertPath}`)\n  debugState(editor, 'before')\n  if (childrenToInsert && Element.isElement(childrenToInsert[0])) {\n    Transforms.insertNodes(editor, childrenToInsert[0].children, {\n      at: childInsertPath,\n    })\n  }\n  debugState(editor, 'after')\n  return true\n}\n\nfunction setPatch(editor: PortableTextSlateEditor, patch: SetPatch) {\n  let value = patch.value\n  if (typeof patch.path[3] === 'string') {\n    value = {}\n    value[patch.path[3]] = patch.value\n  }\n  const {block, blockPath, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n\n  if (!block) {\n    debug('Block not found')\n    return false\n  }\n  const isTextBlock = editor.isTextBlock(block)\n\n  // Ignore patches targeting nested void data, like 'markDefs'\n  if (isTextBlock && patch.path.length > 1 && patch.path[1] !== 'children') {\n    debug('Ignoring setting void value')\n    return false\n  }\n\n  debugState(editor, 'before')\n\n  // If this is targeting a text block child\n  if (isTextBlock && child && childPath) {\n    if (Text.isText(value) && Text.isText(child)) {\n      const newText = child.text\n      const oldText = value.text\n      if (oldText !== newText) {\n        debug('Setting text property')\n        editor.apply({\n          type: 'remove_text',\n          path: childPath,\n          offset: 0,\n          text: newText,\n        })\n        editor.apply({\n          type: 'insert_text',\n          path: childPath,\n          offset: 0,\n          text: value.text,\n        })\n        // call OnChange here to emit the new selection\n        // the user's selection might be interfering with\n        editor.onChange()\n      }\n    } else {\n      debug('Setting non-text property')\n      editor.apply({\n        type: 'set_node',\n        path: childPath,\n        properties: {},\n        newProperties: value as Partial<Node>,\n      })\n    }\n    return true\n  } else if (Element.isElement(block) && patch.path.length === 1 && blockPath) {\n    debug('Setting block property')\n    const {children, ...nextRest} = value as unknown as PortableTextBlock\n    const {children: prevChildren, ...prevRest} = block || {children: undefined}\n    // Set any block properties\n    editor.apply({\n      type: 'set_node',\n      path: blockPath,\n      properties: {...prevRest},\n      newProperties: nextRest,\n    })\n    // Replace the children in the block\n    // Note that children must be explicitly inserted, and can't be set with set_node\n    debug('Setting children')\n    block.children.forEach((c, cIndex) => {\n      editor.apply({\n        type: 'remove_node',\n        path: blockPath.concat(block.children.length - 1 - cIndex),\n        node: c,\n      })\n    })\n    if (Array.isArray(children)) {\n      children.forEach((c, cIndex) => {\n        editor.apply({\n          type: 'insert_node',\n          path: blockPath.concat(cIndex),\n          node: c,\n        })\n      })\n    }\n  } else if (block && 'value' in block) {\n    const newVal = applyAll([block.value], [patch])[0]\n    Transforms.setNodes(editor, {...block, value: newVal}, {at: blockPath})\n    return true\n  }\n  debugState(editor, 'after')\n  return true\n}\n\nfunction unsetPatch(editor: PortableTextSlateEditor, patch: UnsetPatch) {\n  // Value\n  if (patch.path.length === 0) {\n    debug('Removing everything')\n    debugState(editor, 'before')\n    const previousSelection = editor.selection\n    Transforms.deselect(editor)\n    editor.children.forEach((_child, i) => {\n      Transforms.removeNodes(editor, {at: [i]})\n    })\n    Transforms.insertNodes(editor, editor.pteCreateTextBlock({decorators: []}))\n    if (previousSelection) {\n      Transforms.select(editor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n    }\n    // call OnChange here to emit the new selection\n    editor.onChange()\n    debugState(editor, 'after')\n    return true\n  }\n  const {block, blockPath, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n\n  // Single blocks\n  if (patch.path.length === 1) {\n    if (!block || !blockPath) {\n      debug('Block not found')\n      return false\n    }\n    const blockIndex = blockPath[0]\n    debug(`Removing block at path [${blockIndex}]`)\n    debugState(editor, 'before')\n\n    Transforms.removeNodes(editor, {at: [blockIndex]})\n    debugState(editor, 'after')\n    return true\n  }\n\n  // Unset on text block children\n  if (\n    editor.isTextBlock(block) &&\n    patch.path[1] === 'children' &&\n    patch.path.length === 3\n  ) {\n    if (!child || !childPath) {\n      debug('Child not found')\n      return false\n    }\n    debug(`Unsetting child at path ${JSON.stringify(childPath)}`)\n    debugState(editor, 'before')\n    if (debugVerbose) {\n      debug(`Removing child at path ${JSON.stringify(childPath)}`)\n    }\n    Transforms.removeNodes(editor, {at: childPath})\n    debugState(editor, 'after')\n    return true\n  }\n  return false\n}\n\nfunction isKeyedSegment(segment: PathSegment): segment is KeyedSegment {\n  return typeof segment === 'object' && '_key' in segment\n}\n\nfunction debugState(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection'\n  >,\n  stateName: string,\n) {\n  if (!debugVerbose) {\n    return\n  }\n\n  debug(`Children ${stateName}:`, JSON.stringify(editor.children, null, 2))\n  debug(`Selection ${stateName}: `, JSON.stringify(editor.selection, null, 2))\n}\n\nfunction findBlockFromPath(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  path: Path,\n): {block?: Descendant; path?: SlatePath} {\n  let blockIndex = -1\n  const block = editor.children.find((node: Descendant, index: number) => {\n    const isMatch = isKeyedSegment(path[0])\n      ? node._key === path[0]._key\n      : index === path[0]\n    if (isMatch) {\n      blockIndex = index\n    }\n    return isMatch\n  })\n  if (!block) {\n    return {}\n  }\n  return {block, path: [blockIndex] as SlatePath}\n}\n\nfunction findBlockAndChildFromPath(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  path: Path,\n): {\n  child?: Descendant\n  childPath?: SlatePath\n  block?: Descendant\n  blockPath?: SlatePath\n} {\n  const {block, path: blockPath} = findBlockFromPath(editor, path)\n  if (!(Element.isElement(block) && path[1] === 'children')) {\n    return {block, blockPath, child: undefined, childPath: undefined}\n  }\n  let childIndex = -1\n  const child = block.children.find((node, index: number) => {\n    const isMatch = isKeyedSegment(path[2])\n      ? node._key === path[2]._key\n      : index === path[2]\n    if (isMatch) {\n      childIndex = index\n    }\n    return isMatch\n  })\n  if (!child) {\n    return {block, blockPath, child: undefined, childPath: undefined}\n  }\n  return {\n    block,\n    child,\n    blockPath,\n    childPath: blockPath?.concat(childIndex) as SlatePath,\n  }\n}\n","import type {Editor} from 'slate'\n\nexport const PATCHING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withoutPatching(editor: Editor, fn: () => void): void {\n  const prev = isPatching(editor)\n  PATCHING.set(editor, false)\n  fn()\n  PATCHING.set(editor, prev)\n}\n\nexport function isPatching(editor: Editor): boolean | undefined {\n  return PATCHING.get(editor)\n}\n","/**\n * This plugin will make the editor support undo/redo on the local state only.\n * The undo/redo steps are rebased against incoming patches since the step occurred.\n */\n\nimport type {Patch} from '@portabletext/patches'\nimport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {ObjectSchemaType, PortableTextBlock} from '@sanity/types'\nimport {flatten, isEqual} from 'lodash'\nimport {\n  Editor,\n  Operation,\n  Path,\n  Transforms,\n  type Descendant,\n  type SelectionOperation,\n} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {fromSlateValue} from '../../utils/values'\nimport {\n  setIsRedoing,\n  setIsUndoing,\n  withRedoing,\n  withUndoing,\n} from '../../utils/withUndoRedo'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withUndoRedo')\nconst debugVerbose = debug.enabled && false\n\nconst SAVING = new WeakMap<Editor, boolean | undefined>()\nconst REMOTE_PATCHES = new WeakMap<\n  Editor,\n  {\n    patch: Patch\n    time: Date\n    snapshot: PortableTextBlock[] | undefined\n    previousSnapshot: PortableTextBlock[] | undefined\n  }[]\n>()\nconst UNDO_STEP_LIMIT = 1000\n\nconst isSaving = (editor: Editor): boolean | undefined => {\n  const state = SAVING.get(editor)\n  return state === undefined ? true : state\n}\n\nexport interface Options {\n  editorActor: EditorActor\n  readOnly: boolean\n  blockSchemaType: ObjectSchemaType\n}\n\nconst getRemotePatches = (editor: Editor) => {\n  if (!REMOTE_PATCHES.get(editor)) {\n    REMOTE_PATCHES.set(editor, [])\n  }\n  return REMOTE_PATCHES.get(editor) || []\n}\n\nexport function createWithUndoRedo(\n  options: Options,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const {editorActor, readOnly, blockSchemaType} = options\n\n  return (editor: PortableTextSlateEditor) => {\n    let previousSnapshot: PortableTextBlock[] | undefined = fromSlateValue(\n      editor.children,\n      blockSchemaType.name,\n    )\n    const remotePatches = getRemotePatches(editor)\n\n    editor.subscriptions.push(() => {\n      debug('Subscribing to patches')\n      const sub = editorActor.on('patches', ({patches, snapshot}) => {\n        let reset = false\n        patches.forEach((patch) => {\n          if (!reset && patch.origin !== 'local' && remotePatches) {\n            if (patch.type === 'unset' && patch.path.length === 0) {\n              debug(\n                'Someone else cleared the content, resetting undo/redo history',\n              )\n              editor.history = {undos: [], redos: []}\n              remotePatches.splice(0, remotePatches.length)\n              SAVING.set(editor, true)\n              reset = true\n              return\n            }\n            remotePatches.push({\n              patch,\n              time: new Date(),\n              snapshot,\n              previousSnapshot,\n            })\n          }\n        })\n        previousSnapshot = snapshot\n      })\n      return () => {\n        debug('Unsubscribing to patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.history = {undos: [], redos: []}\n    const {apply} = editor\n    editor.apply = (op: Operation) => {\n      if (readOnly) {\n        apply(op)\n        return\n      }\n      const {operations, history} = editor\n      const {undos} = history\n      const step = undos[undos.length - 1]\n      const lastOp =\n        step && step.operations && step.operations[step.operations.length - 1]\n      const overwrite = shouldOverwrite(op, lastOp)\n      const save = isSaving(editor)\n\n      let merge = true\n      if (save) {\n        if (!step) {\n          merge = false\n        } else if (operations.length === 0) {\n          merge = shouldMerge(op, lastOp) || overwrite\n        }\n\n        if (step && merge) {\n          step.operations.push(op)\n        } else {\n          const newStep = {\n            operations: [\n              ...(editor.selection === null\n                ? []\n                : [createSelectOperation(editor)]),\n              op,\n            ],\n            timestamp: new Date(),\n          }\n          undos.push(newStep)\n          debug('Created new undo step', step)\n        }\n\n        while (undos.length > UNDO_STEP_LIMIT) {\n          undos.shift()\n        }\n\n        if (shouldClear(op)) {\n          history.redos = []\n        }\n      }\n      apply(op)\n    }\n\n    editor.undo = () => {\n      if (readOnly) {\n        return\n      }\n      const {undos} = editor.history\n      if (undos.length > 0) {\n        const step = undos[undos.length - 1]\n        debug('Undoing', step)\n        if (step.operations.length > 0) {\n          const otherPatches = remotePatches.filter(\n            (item) => item.time >= step.timestamp,\n          )\n          let transformedOperations = step.operations\n          otherPatches.forEach((item) => {\n            transformedOperations = flatten(\n              transformedOperations.map((op) =>\n                transformOperation(\n                  editor,\n                  item.patch,\n                  op,\n                  item.snapshot,\n                  item.previousSnapshot,\n                ),\n              ),\n            )\n          })\n          const reversedOperations = transformedOperations\n            .map(Operation.inverse)\n            .reverse()\n\n          try {\n            Editor.withoutNormalizing(editor, () => {\n              withUndoing(editor, () => {\n                withoutSaving(editor, () => {\n                  reversedOperations.forEach((op) => {\n                    editor.apply(op)\n                  })\n                })\n              })\n            })\n            editor.normalize()\n            editor.onChange()\n          } catch (err) {\n            debug('Could not perform undo step', err)\n            remotePatches.splice(0, remotePatches.length)\n            Transforms.deselect(editor)\n            editor.history = {undos: [], redos: []}\n            SAVING.set(editor, true)\n            setIsUndoing(editor, false)\n            editor.onChange()\n            return\n          }\n          editor.history.redos.push(step)\n          editor.history.undos.pop()\n        }\n      }\n    }\n\n    editor.redo = () => {\n      if (readOnly) {\n        return\n      }\n      const {redos} = editor.history\n      if (redos.length > 0) {\n        const step = redos[redos.length - 1]\n        debug('Redoing', step)\n        if (step.operations.length > 0) {\n          const otherPatches = remotePatches.filter(\n            (item) => item.time >= step.timestamp,\n          )\n          let transformedOperations = step.operations\n          otherPatches.forEach((item) => {\n            transformedOperations = flatten(\n              transformedOperations.map((op) =>\n                transformOperation(\n                  editor,\n                  item.patch,\n                  op,\n                  item.snapshot,\n                  item.previousSnapshot,\n                ),\n              ),\n            )\n          })\n          try {\n            Editor.withoutNormalizing(editor, () => {\n              withRedoing(editor, () => {\n                withoutSaving(editor, () => {\n                  transformedOperations.forEach((op) => {\n                    editor.apply(op)\n                  })\n                })\n              })\n            })\n            editor.normalize()\n            editor.onChange()\n          } catch (err) {\n            debug('Could not perform redo step', err)\n            remotePatches.splice(0, remotePatches.length)\n            Transforms.deselect(editor)\n            editor.history = {undos: [], redos: []}\n            SAVING.set(editor, true)\n            setIsRedoing(editor, false)\n            editor.onChange()\n            return\n          }\n          editor.history.undos.push(step)\n          editor.history.redos.pop()\n        }\n      }\n    }\n\n    // Plugin return\n    return editor\n  }\n}\n\n/**\n * This will adjust the operation paths and offsets according to the\n * remote patches by other editors since the step operations was performed.\n */\nfunction transformOperation(\n  editor: PortableTextSlateEditor,\n  patch: Patch,\n  operation: Operation,\n  snapshot: PortableTextBlock[] | undefined,\n  previousSnapshot: PortableTextBlock[] | undefined,\n): Operation[] {\n  if (debugVerbose) {\n    debug(\n      `Adjusting '${operation.type}' operation paths for '${patch.type}' patch`,\n    )\n    debug(`Operation ${JSON.stringify(operation)}`)\n    debug(`Patch ${JSON.stringify(patch)}`)\n  }\n\n  const transformedOperation = {...operation}\n\n  if (patch.type === 'insert' && patch.path.length === 1) {\n    const insertBlockIndex = (snapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    debug(\n      `Adjusting block path (+${patch.items.length}) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n    )\n    return [\n      adjustBlockPath(\n        transformedOperation,\n        patch.items.length,\n        insertBlockIndex,\n      ),\n    ]\n  }\n\n  if (patch.type === 'unset' && patch.path.length === 1) {\n    const unsetBlockIndex = (previousSnapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    // If this operation is targeting the same block that got removed, return empty\n    if (\n      'path' in transformedOperation &&\n      Array.isArray(transformedOperation.path) &&\n      transformedOperation.path[0] === unsetBlockIndex\n    ) {\n      debug('Skipping transformation that targeted removed block')\n      return []\n    }\n    if (debugVerbose) {\n      debug(`Selection ${JSON.stringify(editor.selection)}`)\n      debug(\n        `Adjusting block path (-1) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n      )\n    }\n    return [adjustBlockPath(transformedOperation, -1, unsetBlockIndex)]\n  }\n\n  // Someone reset the whole value\n  if (patch.type === 'unset' && patch.path.length === 0) {\n    debug(\n      `Adjusting selection for unset everything patch and ${operation.type} operation`,\n    )\n    return []\n  }\n\n  if (patch.type === 'diffMatchPatch') {\n    const operationTargetBlock = findOperationTargetBlock(\n      editor,\n      transformedOperation,\n    )\n    if (\n      !operationTargetBlock ||\n      !isEqual({_key: operationTargetBlock._key}, patch.path[0])\n    ) {\n      return [transformedOperation]\n    }\n    const diffPatches = parsePatch(patch.value)\n    diffPatches.forEach((diffPatch) => {\n      let adjustOffsetBy = 0\n      let changedOffset = diffPatch.utf8Start1\n      const {diffs} = diffPatch\n      diffs.forEach((diff, index) => {\n        const [diffType, text] = diff\n        if (diffType === DIFF_INSERT) {\n          adjustOffsetBy += text.length\n          changedOffset += text.length\n        } else if (diffType === DIFF_DELETE) {\n          adjustOffsetBy -= text.length\n          changedOffset -= text.length\n        } else if (diffType === DIFF_EQUAL) {\n          // Only up to the point where there are no other changes\n          if (!diffs.slice(index).every(([dType]) => dType === DIFF_EQUAL)) {\n            changedOffset += text.length\n          }\n        }\n      })\n      // Adjust accordingly if someone inserted text in the same node before us\n      if (transformedOperation.type === 'insert_text') {\n        if (changedOffset < transformedOperation.offset) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust accordingly if someone removed text in the same node before us\n      if (transformedOperation.type === 'remove_text') {\n        if (\n          changedOffset <=\n          transformedOperation.offset - transformedOperation.text.length\n        ) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust set_selection operation's points to new offset\n      if (transformedOperation.type === 'set_selection') {\n        const currentFocus = transformedOperation.properties?.focus\n          ? {...transformedOperation.properties.focus}\n          : undefined\n        const currentAnchor = transformedOperation?.properties?.anchor\n          ? {...transformedOperation.properties.anchor}\n          : undefined\n        const newFocus = transformedOperation?.newProperties?.focus\n          ? {...transformedOperation.newProperties.focus}\n          : undefined\n        const newAnchor = transformedOperation?.newProperties?.anchor\n          ? {...transformedOperation.newProperties.anchor}\n          : undefined\n        if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n          const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n          points.forEach((point) => {\n            if (point && changedOffset < point.offset) {\n              point.offset += adjustOffsetBy\n            }\n          })\n          if (currentFocus && currentAnchor) {\n            transformedOperation.properties = {\n              focus: currentFocus,\n              anchor: currentAnchor,\n            }\n          }\n          if (newFocus && newAnchor) {\n            transformedOperation.newProperties = {\n              focus: newFocus,\n              anchor: newAnchor,\n            }\n          }\n        }\n      }\n    })\n    return [transformedOperation]\n  }\n  return [transformedOperation]\n}\n/**\n * Adjust the block path for a operation\n */\nfunction adjustBlockPath(\n  operation: Operation,\n  level: number,\n  blockIndex: number,\n): Operation {\n  const transformedOperation = {...operation}\n  if (\n    blockIndex >= 0 &&\n    transformedOperation.type !== 'set_selection' &&\n    Array.isArray(transformedOperation.path) &&\n    transformedOperation.path[0] >= blockIndex + level &&\n    transformedOperation.path[0] + level > -1\n  ) {\n    const newPath = [\n      transformedOperation.path[0] + level,\n      ...transformedOperation.path.slice(1),\n    ]\n    transformedOperation.path = newPath\n  }\n  if (transformedOperation.type === 'set_selection') {\n    const currentFocus = transformedOperation.properties?.focus\n      ? {...transformedOperation.properties.focus}\n      : undefined\n    const currentAnchor = transformedOperation?.properties?.anchor\n      ? {...transformedOperation.properties.anchor}\n      : undefined\n    const newFocus = transformedOperation?.newProperties?.focus\n      ? {...transformedOperation.newProperties.focus}\n      : undefined\n    const newAnchor = transformedOperation?.newProperties?.anchor\n      ? {...transformedOperation.newProperties.anchor}\n      : undefined\n    if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n      const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n      points.forEach((point) => {\n        if (\n          point &&\n          point.path[0] >= blockIndex + level &&\n          point.path[0] + level > -1\n        ) {\n          point.path = [point.path[0] + level, ...point.path.slice(1)]\n        }\n      })\n      if (currentFocus && currentAnchor) {\n        transformedOperation.properties = {\n          focus: currentFocus,\n          anchor: currentAnchor,\n        }\n      }\n      if (newFocus && newAnchor) {\n        transformedOperation.newProperties = {\n          focus: newFocus,\n          anchor: newAnchor,\n        }\n      }\n    }\n  }\n  //   // Assign fresh point objects (we don't want to mutate the original ones)\n  return transformedOperation\n}\n\n// Helper functions for editor.apply above\n\nconst shouldMerge = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection') {\n    return true\n  }\n\n  // Text input\n  if (\n    prev &&\n    op.type === 'insert_text' &&\n    prev.type === 'insert_text' &&\n    op.offset === prev.offset + prev.text.length &&\n    Path.equals(op.path, prev.path) &&\n    op.text !== ' ' // Tokenize between words\n  ) {\n    return true\n  }\n\n  // Text deletion\n  if (\n    prev &&\n    op.type === 'remove_text' &&\n    prev.type === 'remove_text' &&\n    op.offset + op.text.length === prev.offset &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  // Don't merge\n  return false\n}\n\nconst shouldOverwrite = (\n  op: Operation,\n  prev: Operation | undefined,\n): boolean => {\n  if (prev && op.type === 'set_selection' && prev.type === 'set_selection') {\n    return true\n  }\n\n  return false\n}\n\nconst shouldClear = (op: Operation): boolean => {\n  if (op.type === 'set_selection') {\n    return false\n  }\n\n  return true\n}\n\nexport function withoutSaving(editor: Editor, fn: () => void): void {\n  const prev = isSaving(editor)\n  SAVING.set(editor, false)\n  fn()\n  SAVING.set(editor, prev)\n}\n\nfunction createSelectOperation(editor: Editor): SelectionOperation {\n  return {\n    type: 'set_selection',\n    properties: {...editor.selection},\n    newProperties: {...editor.selection},\n  }\n}\n\nfunction findOperationTargetBlock(\n  editor: PortableTextSlateEditor,\n  operation: Operation,\n): Descendant | undefined {\n  let block: Descendant | undefined\n  if (operation.type === 'set_selection' && editor.selection) {\n    block = editor.children[editor.selection.focus.path[0]]\n  } else if ('path' in operation) {\n    block = editor.children[operation.path[0]]\n  }\n  return block\n}\n","import {insert, setIfMissing, unset, type Patch} from '@portabletext/patches'\nimport {\n  Editor,\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type Operation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {createApplyPatch} from '../../utils/applyPatch'\nimport {debugWithName} from '../../utils/debug'\nimport {fromSlateValue, isEqualToEmptyEditor} from '../../utils/values'\nimport {\n  IS_PROCESSING_REMOTE_CHANGES,\n  KEY_TO_VALUE_ELEMENT,\n} from '../../utils/weakMaps'\nimport {withRemoteChanges} from '../../utils/withChanges'\nimport {\n  isPatching,\n  PATCHING,\n  withoutPatching,\n} from '../../utils/withoutPatching'\nimport type {EditorActor} from '../editor-machine'\nimport {withoutSaving} from './createWithUndoRedo'\n\nconst debug = debugWithName('plugin:withPatches')\nconst debugVerbose = false\n\nexport interface PatchFunctions {\n  insertNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  insertTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertTextOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  mergeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MergeNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  moveNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MoveNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  removeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  removeTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveTextOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  setNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SetNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  splitNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SplitNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n}\n\ninterface Options {\n  editorActor: EditorActor\n  patchFunctions: PatchFunctions\n  readOnly: boolean\n  schemaTypes: PortableTextMemberSchemaTypes\n}\n\nexport function createWithPatches({\n  editorActor,\n  patchFunctions,\n  readOnly,\n  schemaTypes,\n}: Options): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  // The previous editor children are needed to figure out the _key of deleted nodes\n  // The editor.children would no longer contain that information if the node is already deleted.\n  let previousChildren: Descendant[]\n\n  const applyPatch = createApplyPatch(schemaTypes)\n\n  return function withPatches(editor: PortableTextSlateEditor) {\n    IS_PROCESSING_REMOTE_CHANGES.set(editor, false)\n    PATCHING.set(editor, true)\n    previousChildren = [...editor.children]\n\n    const {apply} = editor\n    let bufferedPatches: Patch[] = []\n\n    const handleBufferedRemotePatches = () => {\n      if (bufferedPatches.length === 0) {\n        return\n      }\n      const patches = bufferedPatches\n      bufferedPatches = []\n      let changed = false\n      withRemoteChanges(editor, () => {\n        Editor.withoutNormalizing(editor, () => {\n          withoutPatching(editor, () => {\n            withoutSaving(editor, () => {\n              patches.forEach((patch) => {\n                if (debug.enabled)\n                  debug(`Handling remote patch ${JSON.stringify(patch)}`)\n                changed = applyPatch(editor, patch)\n              })\n            })\n          })\n        })\n        if (changed) {\n          editor.normalize()\n          editor.onChange()\n        }\n      })\n    }\n\n    const handlePatches = ({patches}: {patches: Patch[]}) => {\n      const remotePatches = patches.filter((p) => p.origin !== 'local')\n      if (remotePatches.length === 0) {\n        return\n      }\n      bufferedPatches = bufferedPatches.concat(remotePatches)\n      handleBufferedRemotePatches()\n    }\n\n    editor.subscriptions.push(() => {\n      debug('Subscribing to remote patches')\n      const sub = editorActor.on('patches', handlePatches)\n      return () => {\n        debug('Unsubscribing to remote patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.apply = (operation: Operation): void | Editor => {\n      if (readOnly) {\n        apply(operation)\n        return editor\n      }\n      let patches: Patch[] = []\n\n      // Update previous children here before we apply\n      previousChildren = editor.children\n\n      const editorWasEmpty = isEqualToEmptyEditor(previousChildren, schemaTypes)\n\n      // Apply the operation\n      apply(operation)\n\n      const editorIsEmpty = isEqualToEmptyEditor(editor.children, schemaTypes)\n\n      if (!isPatching(editor)) {\n        if (debugVerbose && debug.enabled)\n          debug(\n            `Editor is not producing patch for operation ${operation.type}`,\n            operation,\n          )\n        return editor\n      }\n\n      // If the editor was empty and now isn't, insert the placeholder into it.\n      if (\n        editorWasEmpty &&\n        !editorIsEmpty &&\n        operation.type !== 'set_selection'\n      ) {\n        patches.push(insert(previousChildren, 'before', [0]))\n      }\n\n      switch (operation.type) {\n        case 'insert_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertTextPatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeTextPatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'split_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.splitNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'insert_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'set_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.setNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'merge_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.mergeNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'move_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.moveNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        default:\n        // Do nothing\n      }\n\n      // Unset the value if a operation made the editor empty\n      if (\n        !editorWasEmpty &&\n        editorIsEmpty &&\n        ['merge_node', 'set_node', 'remove_text', 'remove_node'].includes(\n          operation.type,\n        )\n      ) {\n        patches = [...patches, unset([])]\n        editorActor.send({\n          type: 'unset',\n          previousValue: fromSlateValue(\n            previousChildren,\n            schemaTypes.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n        })\n      }\n\n      // Prepend patches with setIfMissing if going from empty editor to something involving a patch.\n      if (editorWasEmpty && patches.length > 0) {\n        patches = [setIfMissing([], []), ...patches]\n      }\n\n      // Emit all patches\n      if (patches.length > 0) {\n        patches.forEach((patch) => {\n          editorActor.send({\n            type: 'patch',\n            patch: {...patch, origin: 'local'},\n          })\n        })\n      }\n      return editor\n    }\n    return editor\n  }\n}\n","import {Editor, Path} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {SlateTextBlock, VoidElement} from '../../types/slate'\nimport {debugWithName} from '../../utils/debug'\nimport {isChangingRemotely} from '../../utils/withChanges'\nimport {isRedoing, isUndoing} from '../../utils/withUndoRedo'\n\nconst debug = debugWithName('plugin:withPlaceholderBlock')\n\n/**\n * Keep a \"placeholder\" block present when the editor is empty\n *\n */\nexport function createWithPlaceholderBlock(): (\n  editor: PortableTextSlateEditor,\n) => PortableTextSlateEditor {\n  return function withPlaceholderBlock(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n\n    editor.apply = (op) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'remove_node') {\n        const node = op.node as SlateTextBlock | VoidElement\n        if (op.path[0] === 0 && Editor.isVoid(editor, node)) {\n          // Check next path, if it exists, do nothing\n          const nextPath = Path.next(op.path)\n          // Is removing the first block which is a void (not a text block), add a new empty text block in it, if there is no other element in the next path\n          if (!editor.children[nextPath[0]]) {\n            debug('Adding placeholder block')\n            Editor.insertNode(\n              editor,\n              editor.pteCreateTextBlock({decorators: []}),\n            )\n          }\n        }\n      }\n      apply(op)\n    }\n    return editor\n  }\n}\n","import {Editor, Path, Text as SlateText, Transforms, type Node} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextBlockStyle')\n\nexport function createWithPortableTextBlockStyle(\n  editorActor: EditorActor,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const defaultStyle = types.styles[0].value\n  return function withPortableTextBlockStyle(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    // Extend Slate's default normalization to reset split node to normal style\n    // if there is no text at the right end of the split.\n    const {normalizeNode} = editor\n\n    editor.normalizeNode = (nodeEntry) => {\n      const [, path] = nodeEntry\n\n      for (const op of editor.operations) {\n        if (\n          op.type === 'split_node' &&\n          op.path.length === 1 &&\n          editor.isTextBlock(op.properties) &&\n          op.properties.style !== defaultStyle &&\n          op.path[0] === path[0] &&\n          !Path.equals(path, op.path)\n        ) {\n          const [child] = Editor.node(editor, [op.path[0] + 1, 0])\n          if (SlateText.isText(child) && child.text === '') {\n            debug(`Normalizing split node to ${defaultStyle} style`, op)\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {style: defaultStyle},\n              {at: [op.path[0] + 1], voids: false},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    editor.pteHasBlockStyle = (style: string): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => editor.isTextBlock(node) && node.style === style,\n        }),\n      ]\n      if (selectedBlocks.length > 0) {\n        return true\n      }\n      return false\n    }\n\n    editor.pteToggleBlockStyle = (blockStyle: string): void => {\n      if (!editor.selection) {\n        return\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => editor.isTextBlock(node),\n        }),\n      ]\n      selectedBlocks.forEach(([node, path]) => {\n        if (editor.isTextBlock(node) && node.style === blockStyle) {\n          debug(`Unsetting block style '${blockStyle}'`)\n          Transforms.setNodes(\n            editor,\n            {...node, style: defaultStyle} as Partial<Node>,\n            {\n              at: path,\n            },\n          )\n        } else {\n          if (blockStyle) {\n            debug(`Setting style '${blockStyle}'`)\n          } else {\n            debug('Setting default style', defaultStyle)\n          }\n          Transforms.setNodes(\n            editor,\n            {\n              ...node,\n              style: blockStyle || defaultStyle,\n            } as Partial<Node>,\n            {at: path},\n          )\n        }\n      })\n      editor.onChange()\n    }\n    return editor\n  }\n}\n","import {Editor, Element, Text, Transforms, type Node} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\n\nconst debug = debugWithName('plugin:withPortableTextLists')\nconst MAX_LIST_LEVEL = 10\n\nexport function createWithPortableTextLists(\n  types: PortableTextMemberSchemaTypes,\n) {\n  return function withPortableTextLists(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.pteToggleListItem = (listItemStyle: string) => {\n      const isActive = editor.pteHasListStyle(listItemStyle)\n      if (isActive) {\n        debug(`Remove list item '${listItemStyle}'`)\n        editor.pteUnsetListItem(listItemStyle)\n      } else {\n        debug(`Add list item '${listItemStyle}'`)\n        editor.pteSetListItem(listItemStyle)\n      }\n    }\n\n    editor.pteUnsetListItem = (listItemStyle: string) => {\n      if (!editor.selection) {\n        return\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) =>\n            Element.isElement(node) && node._type === types.block.name,\n        }),\n      ]\n      selectedBlocks.forEach(([node, path]) => {\n        if (editor.isListBlock(node)) {\n          const {listItem, level, ...rest} = node\n          const newNode = {\n            ...rest,\n            listItem: undefined,\n            level: undefined,\n          } as Partial<Node>\n          debug(`Unsetting list '${listItemStyle}'`)\n          Transforms.setNodes(editor, newNode, {at: path})\n        }\n      })\n    }\n\n    editor.pteSetListItem = (listItemStyle: string) => {\n      if (!editor.selection) {\n        return\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => editor.isTextBlock(node),\n        }),\n      ]\n      selectedBlocks.forEach(([node, path]) => {\n        debug(`Setting list '${listItemStyle}'`)\n        Transforms.setNodes(\n          editor,\n          {\n            ...node,\n            level: 1,\n            listItem: listItemStyle || (types.lists[0] && types.lists[0].value),\n          } as Partial<Node>,\n          {at: path},\n        )\n      })\n    }\n\n    editor.pteEndList = () => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) =>\n            Element.isElement(node) &&\n            editor.isListBlock(node) &&\n            node.children.length === 1 &&\n            Text.isText(node.children[0]) &&\n            node.children[0].text === '',\n        }),\n      ]\n      if (selectedBlocks.length === 0) {\n        return false\n      }\n      selectedBlocks.forEach(([node, path]) => {\n        if (Element.isElement(node)) {\n          debug('Unset list')\n          Transforms.setNodes(\n            editor,\n            {\n              ...node,\n              level: undefined,\n              listItem: undefined,\n            },\n            {at: path},\n          )\n        }\n      })\n      return true // Note: we are exiting the plugin chain by not returning editor (or hotkey plugin 'enter' will fire)\n    }\n\n    editor.pteIncrementBlockLevels = (reverse?: boolean): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => !!editor.isListBlock(node),\n        }),\n      ]\n      if (selectedBlocks.length === 0) {\n        return false\n      }\n      selectedBlocks.forEach(([node, path]) => {\n        if (editor.isListBlock(node)) {\n          let level = node.level || 1\n          if (reverse) {\n            level--\n            debug(\n              'Decrementing list level',\n              Math.min(MAX_LIST_LEVEL, Math.max(1, level)),\n            )\n          } else {\n            level++\n            debug(\n              'Incrementing list level',\n              Math.min(MAX_LIST_LEVEL, Math.max(1, level)),\n            )\n          }\n          Transforms.setNodes(\n            editor,\n            {level: Math.min(MAX_LIST_LEVEL, Math.max(1, level))},\n            {at: path},\n          )\n        }\n      })\n      return true\n    }\n\n    editor.pteHasListStyle = (listStyle: string): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const selectedBlocks = [\n        ...Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => editor.isTextBlock(node),\n        }),\n      ]\n\n      if (selectedBlocks.length > 0) {\n        return selectedBlocks.every(\n          ([node]) => editor.isListBlock(node) && node.listItem === listStyle,\n        )\n      }\n      return false\n    }\n\n    return editor\n  }\n}\n","function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction isPortableTextSpan(node) {\n  return node._type === \"span\" && \"text\" in node && typeof node.text == \"string\" && (typeof node.marks > \"u\" || Array.isArray(node.marks) && node.marks.every(mark => typeof mark == \"string\"));\n}\nfunction isPortableTextBlock(node) {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type == \"string\" &&\n    // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && (\n    // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    !(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) &&\n    // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every(def => typeof def._key == \"string\")) &&\n    // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) &&\n    // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every(child => typeof child == \"object\" && \"_type\" in child)\n  );\n}\nfunction isPortableTextListItemBlock(block) {\n  return isPortableTextBlock(block) && \"listItem\" in block && typeof block.listItem == \"string\" && (typeof block.level > \"u\" || typeof block.level == \"number\");\n}\nfunction isPortableTextToolkitList(block) {\n  return block._type === \"@list\";\n}\nfunction isPortableTextToolkitSpan(span) {\n  return span._type === \"@span\";\n}\nfunction isPortableTextToolkitTextNode(node) {\n  return node._type === \"@text\";\n}\nconst knownDecorators = [\"strong\", \"em\", \"code\", \"underline\", \"strike-through\"];\nfunction sortMarksByOccurences(span, index, blockChildren) {\n  if (!isPortableTextSpan(span) || !span.marks) return [];\n  if (!span.marks.length) return [];\n  const marks = span.marks.slice(),\n    occurences = {};\n  return marks.forEach(mark => {\n    occurences[mark] = 1;\n    for (let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++) {\n      const sibling = blockChildren[siblingIndex];\n      if (sibling && isPortableTextSpan(sibling) && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1) occurences[mark]++;else break;\n    }\n  }), marks.sort((markA, markB) => sortMarks(occurences, markA, markB));\n}\nfunction sortMarks(occurences, markA, markB) {\n  const aOccurences = occurences[markA],\n    bOccurences = occurences[markB];\n  if (aOccurences !== bOccurences) return bOccurences - aOccurences;\n  const aKnownPos = knownDecorators.indexOf(markA),\n    bKnownPos = knownDecorators.indexOf(markB);\n  return aKnownPos !== bKnownPos ? aKnownPos - bKnownPos : markA.localeCompare(markB);\n}\nfunction buildMarksTree(block) {\n  var _a;\n  const {\n    children,\n    markDefs = []\n  } = block;\n  if (!children || !children.length) return [];\n  const sortedMarks = children.map(sortMarksByOccurences),\n    rootNode = {\n      _type: \"@span\",\n      children: [],\n      markType: \"<unknown>\"\n    };\n  let nodeStack = [rootNode];\n  for (let i = 0; i < children.length; i++) {\n    const span = children[i];\n    if (!span) continue;\n    const marksNeeded = sortedMarks[i] || [];\n    let pos = 1;\n    if (nodeStack.length > 1) for (pos; pos < nodeStack.length; pos++) {\n      const mark = ((_a = nodeStack[pos]) == null ? void 0 : _a.markKey) || \"\",\n        index = marksNeeded.indexOf(mark);\n      if (index === -1) break;\n      marksNeeded.splice(index, 1);\n    }\n    nodeStack = nodeStack.slice(0, pos);\n    let currentNode = nodeStack[nodeStack.length - 1];\n    if (currentNode) {\n      for (const markKey of marksNeeded) {\n        const markDef = markDefs.find(def => def._key === markKey),\n          markType = markDef ? markDef._type : markKey,\n          node = {\n            _type: \"@span\",\n            _key: span._key,\n            children: [],\n            markDef,\n            markType,\n            markKey\n          };\n        currentNode.children.push(node), nodeStack.push(node), currentNode = node;\n      }\n      if (isPortableTextSpan(span)) {\n        const lines = span.text.split(`\n`);\n        for (let line = lines.length; line-- > 1;) lines.splice(line, 0, `\n`);\n        currentNode.children = currentNode.children.concat(lines.map(text => ({\n          _type: \"@text\",\n          text\n        })));\n      } else currentNode.children = currentNode.children.concat(span);\n    }\n  }\n  return rootNode.children;\n}\nfunction nestLists(blocks, mode) {\n  const tree = [];\n  let currentList;\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    if (block) {\n      if (!isPortableTextListItemBlock(block)) {\n        tree.push(block), currentList = void 0;\n        continue;\n      }\n      if (!currentList) {\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (blockMatchesList(block, currentList)) {\n        currentList.children.push(block);\n        continue;\n      }\n      if ((block.level || 1) > currentList.level) {\n        const newList = listFromBlock(block, i, mode);\n        if (mode === \"html\") {\n          const lastListItem = currentList.children[currentList.children.length - 1],\n            newLastChild = _objectSpread(_objectSpread({}, lastListItem), {}, {\n              children: [...lastListItem.children, newList]\n            });\n          currentList.children[currentList.children.length - 1] = newLastChild;\n        } else currentList.children.push(newList);\n        currentList = newList;\n        continue;\n      }\n      if ((block.level || 1) < currentList.level) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, block);\n        if (match) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        }\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (block.listItem !== currentList.listItem) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, {\n            level: block.level || 1\n          });\n        if (match && match.listItem === block.listItem) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        } else {\n          currentList = listFromBlock(block, i, mode), tree.push(currentList);\n          continue;\n        }\n      }\n      console.warn(\"Unknown state encountered for block\", block), tree.push(block);\n    }\n  }\n  return tree;\n}\nfunction blockMatchesList(block, list) {\n  return (block.level || 1) === list.level && block.listItem === list.listItem;\n}\nfunction listFromBlock(block, index, mode) {\n  return {\n    _type: \"@list\",\n    _key: `${block._key || `${index}`}-parent`,\n    mode,\n    level: block.level || 1,\n    listItem: block.listItem,\n    children: [block]\n  };\n}\nfunction findListMatching(rootNode, matching) {\n  const level = matching.level || 1,\n    style = matching.listItem || \"normal\",\n    filterOnType = typeof matching.listItem == \"string\";\n  if (isPortableTextToolkitList(rootNode) && (rootNode.level || 1) === level && filterOnType && (rootNode.listItem || \"normal\") === style) return rootNode;\n  if (!(\"children\" in rootNode)) return;\n  const node = rootNode.children[rootNode.children.length - 1];\n  return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : void 0;\n}\nfunction spanToPlainText(span) {\n  let text = \"\";\n  return span.children.forEach(current => {\n    isPortableTextToolkitTextNode(current) ? text += current.text : isPortableTextToolkitSpan(current) && (text += spanToPlainText(current));\n  }), text;\n}\nconst leadingSpace = /^\\s/,\n  trailingSpace = /^\\s/;\nfunction toPlainText(block) {\n  const blocks = Array.isArray(block) ? block : [block];\n  let text = \"\";\n  return blocks.forEach((current, index) => {\n    if (!isPortableTextBlock(current)) return;\n    let pad = !1;\n    current.children.forEach(span => {\n      isPortableTextSpan(span) ? (text += pad && text && !trailingSpace.test(text) && !leadingSpace.test(span.text) ? \" \" : \"\", text += span.text, pad = !1) : pad = !0;\n    }), index !== blocks.length - 1 && (text += `\n\n`);\n  }), text;\n}\nconst LIST_NEST_MODE_HTML = \"html\",\n  LIST_NEST_MODE_DIRECT = \"direct\";\nexport { LIST_NEST_MODE_DIRECT, LIST_NEST_MODE_HTML, buildMarksTree, isPortableTextBlock, isPortableTextListItemBlock, isPortableTextSpan, isPortableTextToolkitList, isPortableTextToolkitSpan, isPortableTextToolkitTextNode, nestLists, sortMarksByOccurences, spanToPlainText, toPlainText };\n//# sourceMappingURL=index.js.map\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Node, Path} from 'slate'\nimport type {PortableTextSlateEditor} from '../types/editor'\n\nexport function getPreviousSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let previousSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath, {\n    reverse: true,\n  })) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isBefore(childPath, spanPath)) {\n      previousSpan = child\n      break\n    }\n  }\n\n  return previousSpan\n}\n\nexport function getNextSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let nextSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath)) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isAfter(childPath, spanPath)) {\n      nextSpan = child\n      break\n    }\n  }\n\n  return nextSpan\n}\n","/**\n *\n * This plugin will change Slate's default marks model (every prop is a mark) with the Portable Text model (marks is an array of strings on prop .marks).\n *\n */\n\nimport {isPortableTextBlock, isPortableTextSpan} from '@portabletext/toolkit'\nimport type {PortableTextObject, PortableTextSpan} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {Editor, Element, Node, Path, Range, Text, Transforms} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {toPortableTextRange} from '../../utils/ranges'\nimport {getNextSpan, getPreviousSpan} from '../../utils/sibling-utils'\nimport {isChangingRemotely} from '../../utils/withChanges'\nimport {isRedoing, isUndoing} from '../../utils/withUndoRedo'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextMarkModel')\n\nexport function createWithPortableTextMarkModel(\n  editorActor: EditorActor,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPortableTextMarkModel(editor: PortableTextSlateEditor) {\n    const {apply, normalizeNode} = editor\n    const decorators = types.decorators.map((t) => t.value)\n\n    // Selections are normally emitted automatically via\n    // onChange, but they will keep the object reference if\n    // the selection is the same as the previous.\n    // When toggling marks however, it might not even\n    // result in a onChange event (for instance when nothing is selected),\n    // and if you toggle marks on a block with one single span,\n    // the selection would also stay the same.\n    // We should force a new selection object here when toggling marks,\n    // because toolbars and other things can very conveniently\n    // be memo'ed on the editor selection to update itself.\n    const forceNewSelection = () => {\n      if (editor.selection) {\n        Transforms.select(editor, {...editor.selection})\n        editor.selection = {...editor.selection} // Ensure new object\n      }\n      const ptRange = toPortableTextRange(\n        editor.children,\n        editor.selection,\n        types,\n      )\n      editorActor.send({type: 'selection', selection: ptRange})\n    }\n\n    // Extend Slate's default normalization. Merge spans with same set of .marks when doing merge_node operations, and clean up markDefs / marks\n    editor.normalizeNode = (nodeEntry) => {\n      const [node, path] = nodeEntry\n\n      if (editor.isTextBlock(node)) {\n        const children = Node.children(editor, path)\n\n        for (const [child, childPath] of children) {\n          const nextNode = node.children[childPath[1] + 1]\n\n          if (\n            editor.isTextSpan(child) &&\n            editor.isTextSpan(nextNode) &&\n            isEqual(child.marks, nextNode.marks)\n          ) {\n            debug(\n              'Merging spans',\n              JSON.stringify(child, null, 2),\n              JSON.stringify(nextNode, null, 2),\n            )\n            editorActor.send({type: 'normalizing'})\n            Transforms.mergeNodes(editor, {\n              at: [childPath[0], childPath[1] + 1],\n              voids: true,\n            })\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Add missing .markDefs to block nodes\n       */\n      if (editor.isTextBlock(node) && !Array.isArray(node.markDefs)) {\n        debug('Adding .markDefs to block node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {markDefs: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Add missing .marks to span nodes\n       */\n      if (editor.isTextSpan(node) && !Array.isArray(node.marks)) {\n        debug('Adding .marks to span node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {marks: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Remove annotations from empty spans\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n        const decorators = types.decorators.map((decorator) => decorator.value)\n        const annotations = node.marks?.filter(\n          (mark) => !decorators.includes(mark),\n        )\n\n        if (editor.isTextBlock(block)) {\n          if (node.text === '' && annotations && annotations.length > 0) {\n            debug('Removing annotations from empty span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {marks: node.marks?.filter((mark) => decorators.includes(mark))},\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from child spans of block nodes\n       */\n      if (editor.isTextBlock(node)) {\n        const decorators = types.decorators.map((decorator) => decorator.value)\n\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (editor.isTextSpan(child)) {\n            const marks = child.marks ?? []\n            const orphanedAnnotations = marks.filter((mark) => {\n              return (\n                !decorators.includes(mark) &&\n                !node.markDefs?.find((def) => def._key === mark)\n              )\n            })\n\n            if (orphanedAnnotations.length > 0) {\n              debug('Removing orphaned annotations from span node')\n              editorActor.send({type: 'normalizing'})\n              Transforms.setNodes(\n                editor,\n                {\n                  marks: marks.filter(\n                    (mark) => !orphanedAnnotations.includes(mark),\n                  ),\n                },\n                {at: childPath},\n              )\n              editorActor.send({type: 'done normalizing'})\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from span nodes\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n\n        if (editor.isTextBlock(block)) {\n          const decorators = types.decorators.map(\n            (decorator) => decorator.value,\n          )\n          const marks = node.marks ?? []\n          const orphanedAnnotations = marks.filter((mark) => {\n            return (\n              !decorators.includes(mark) &&\n              !block.markDefs?.find((def) => def._key === mark)\n            )\n          })\n\n          if (orphanedAnnotations.length > 0) {\n            debug('Removing orphaned annotations from span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {\n                marks: marks.filter(\n                  (mark) => !orphanedAnnotations.includes(mark),\n                ),\n              },\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      // Remove duplicate markDefs\n      if (editor.isTextBlock(node)) {\n        const markDefs = node.markDefs ?? []\n        const markDefKeys = new Set<string>()\n        const newMarkDefs: Array<PortableTextObject> = []\n\n        for (const markDef of markDefs) {\n          if (!markDefKeys.has(markDef._key)) {\n            markDefKeys.add(markDef._key)\n            newMarkDefs.push(markDef)\n          }\n        }\n\n        if (markDefs.length !== newMarkDefs.length) {\n          debug('Removing duplicate markDefs')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(editor, {markDefs: newMarkDefs}, {at: path})\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      // Check consistency of markDefs (unless we are merging two nodes)\n      if (\n        editor.isTextBlock(node) &&\n        !editor.operations.some(\n          (op) =>\n            op.type === 'merge_node' &&\n            'markDefs' in op.properties &&\n            op.path.length === 1,\n        )\n      ) {\n        const newMarkDefs = (node.markDefs || []).filter((def) => {\n          return node.children.find((child) => {\n            return (\n              Text.isText(child) &&\n              Array.isArray(child.marks) &&\n              child.marks.includes(def._key)\n            )\n          })\n        })\n        if (node.markDefs && !isEqual(newMarkDefs, node.markDefs)) {\n          debug('Removing markDef not in use')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {\n              markDefs: newMarkDefs,\n            },\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    editor.apply = (op) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'set_selection') {\n        const marks = Editor.marks(editor)\n\n        if (\n          marks &&\n          op.properties &&\n          op.newProperties &&\n          op.properties.anchor &&\n          op.properties.focus &&\n          op.newProperties.anchor &&\n          op.newProperties.focus\n        ) {\n          const previousSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.properties.anchor,\n            focus: op.properties.focus,\n          })\n          const newSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.newProperties.anchor,\n            focus: op.newProperties.focus,\n          })\n\n          if (previousSelectionIsCollapsed && newSelectionIsCollapsed) {\n            const focusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.properties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const newFocusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.newProperties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const movedToNextSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] + 1 &&\n              focusSpan.text.length === op.properties.focus.offset &&\n              op.newProperties.focus.offset === 0\n            const movedToPreviousSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] - 1 &&\n              op.properties.focus.offset === 0 &&\n              newFocusSpan.text.length === op.newProperties.focus.offset\n\n            // If the editor has marks and we are not visually moving the\n            // selection then we just abort. Otherwise the marks would be\n            // cleared and we can't use them for the possible subsequent insert\n            // operation.\n            if (movedToNextSpan || movedToPreviousSpan) {\n              return\n            }\n          }\n        }\n      }\n\n      if (op.type === 'insert_node') {\n        const {selection} = editor\n\n        if (selection) {\n          const [_block, blockPath] = Editor.node(editor, selection, {depth: 1})\n          const previousSpan = getPreviousSpan({\n            editor,\n            blockPath,\n            spanPath: op.path,\n          })\n          const previousSpanAnnotations = previousSpan\n            ? previousSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const nextSpan = getNextSpan({\n            editor,\n            blockPath,\n            spanPath: [op.path[0], op.path[1] - 1],\n          })\n          const nextSpanAnnotations = nextSpan\n            ? nextSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const annotationsEnding =\n            previousSpanAnnotations?.filter(\n              (annotation) => !nextSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheEndOfAnnotation = annotationsEnding.length > 0\n\n          if (\n            atTheEndOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsEnding.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsEnding.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const annotationsStarting =\n            nextSpanAnnotations?.filter(\n              (annotation) => !previousSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheStartOfAnnotation = annotationsStarting.length > 0\n\n          if (\n            atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsStarting.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsStarting.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n        }\n      }\n\n      if (op.type === 'insert_text') {\n        const {selection} = editor\n        const collapsedSelection = selection\n          ? Range.isCollapsed(selection)\n          : false\n\n        if (selection && collapsedSelection) {\n          const [_block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n\n          const [span, spanPath] =\n            Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: selection.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0] ?? ([undefined, undefined] as const)\n\n          const marks = span.marks ?? []\n          const marksWithoutAnnotations = marks.filter((mark) =>\n            decorators.includes(mark),\n          )\n          const spanHasAnnotations =\n            marks.length > marksWithoutAnnotations.length\n\n          const spanIsEmpty = span.text.length === 0\n\n          const atTheBeginningOfSpan = selection.anchor.offset === 0\n          const atTheEndOfSpan = selection.anchor.offset === span.text.length\n\n          const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n          const nextSpan = getNextSpan({editor, blockPath, spanPath})\n          const nextSpanAnnotations =\n            nextSpan?.marks?.filter((mark) => !decorators.includes(mark)) ?? []\n          const spanAnnotations = marks.filter(\n            (mark) => !decorators.includes(mark),\n          )\n\n          const previousSpanHasAnnotations = previousSpan\n            ? previousSpan.marks?.some((mark) => !decorators.includes(mark))\n            : false\n          const previousSpanHasSameAnnotations = previousSpan\n            ? previousSpan.marks\n                ?.filter((mark) => !decorators.includes(mark))\n                .every((mark) => marks.includes(mark))\n            : false\n          const previousSpanHasSameAnnotation = previousSpan\n            ? previousSpan.marks?.some(\n                (mark) => !decorators.includes(mark) && marks.includes(mark),\n              )\n            : false\n\n          const previousSpanHasSameMarks = previousSpan\n            ? previousSpan.marks?.every((mark) => marks.includes(mark))\n            : false\n          const nextSpanSharesSomeAnnotations = spanAnnotations.some((mark) =>\n            nextSpanAnnotations?.includes(mark),\n          )\n\n          if (spanHasAnnotations && !spanIsEmpty) {\n            if (atTheBeginningOfSpan) {\n              if (previousSpanHasSameMarks) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? [],\n                })\n                return\n              } else if (previousSpanHasSameAnnotations) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? [],\n                })\n                return\n              } else if (previousSpanHasSameAnnotation) {\n                apply(op)\n                return\n              } else if (!previousSpan) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: [],\n                })\n                return\n              }\n            }\n\n            if (atTheEndOfSpan) {\n              if (\n                (nextSpan &&\n                  nextSpanSharesSomeAnnotations &&\n                  nextSpanAnnotations.length < spanAnnotations.length) ||\n                !nextSpanSharesSomeAnnotations\n              ) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: nextSpan?.marks ?? [],\n                })\n                return\n              }\n\n              if (!nextSpan) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: [],\n                })\n                return\n              }\n            }\n          }\n\n          if (atTheBeginningOfSpan && !spanIsEmpty && !!previousSpan) {\n            Transforms.insertNodes(editor, {\n              _type: 'span',\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              text: op.text,\n              marks: previousSpanHasAnnotations\n                ? []\n                : (previousSpan.marks ?? []).filter((mark) =>\n                    decorators.includes(mark),\n                  ),\n            })\n            return\n          }\n        }\n      }\n\n      if (op.type === 'remove_text') {\n        const {selection} = editor\n\n        if (selection && Range.isExpanded(selection)) {\n          const [block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n          const [span, spanPath] =\n            Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: {path: op.path, offset: op.offset},\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0] ?? ([undefined, undefined] as const)\n\n          if (span && block && isPortableTextBlock(block)) {\n            const markDefs = block.markDefs ?? []\n            const marks = span.marks ?? []\n            const spanHasAnnotations = marks.some((mark) =>\n              markDefs.find((markDef) => markDef._key === mark),\n            )\n            const deletingFromTheEnd =\n              op.offset + op.text.length === span.text.length\n            const deletingAllText = op.offset === 0 && deletingFromTheEnd\n\n            const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n            const nextSpan = getNextSpan({editor, blockPath, spanPath})\n\n            const previousSpanHasSameAnnotation = previousSpan\n              ? previousSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n            const nextSpanHasSameAnnotation = nextSpan\n              ? nextSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n\n            if (\n              spanHasAnnotations &&\n              deletingAllText &&\n              !previousSpanHasSameAnnotation &&\n              !nextSpanHasSameAnnotation\n            ) {\n              const marksWithoutAnnotationMarks: string[] = (\n                {\n                  ...(Editor.marks(editor) || {}),\n                }.marks || []\n              ).filter((mark) => decorators.includes(mark))\n\n              Editor.withoutNormalizing(editor, () => {\n                apply(op)\n                Transforms.setNodes(\n                  editor,\n                  {marks: marksWithoutAnnotationMarks},\n                  {at: op.path},\n                )\n              })\n\n              editor.onChange()\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Copy over markDefs when merging blocks\n       */\n      if (\n        op.type === 'merge_node' &&\n        op.path.length === 1 &&\n        'markDefs' in op.properties &&\n        op.properties._type === types.block.name &&\n        Array.isArray(op.properties.markDefs) &&\n        op.properties.markDefs.length > 0 &&\n        op.path[0] - 1 >= 0\n      ) {\n        const [targetBlock, targetPath] = Editor.node(editor, [op.path[0] - 1])\n\n        if (editor.isTextBlock(targetBlock)) {\n          const oldDefs =\n            (Array.isArray(targetBlock.markDefs) && targetBlock.markDefs) || []\n          const newMarkDefs = uniq([...oldDefs, ...op.properties.markDefs])\n\n          debug(`Copying markDefs over to merged block`, op)\n          Transforms.setNodes(\n            editor,\n            {markDefs: newMarkDefs},\n            {at: targetPath, voids: false},\n          )\n          apply(op)\n          return\n        }\n      }\n\n      apply(op)\n    }\n\n    // Override built in addMark function\n    editor.addMark = (mark: string) => {\n      if (editor.selection) {\n        if (Range.isExpanded(editor.selection)) {\n          Editor.withoutNormalizing(editor, () => {\n            // Split if needed\n            Transforms.setNodes(\n              editor,\n              {},\n              {match: Text.isText, split: true, hanging: true},\n            )\n            // Use new selection\n            const splitTextNodes = Range.isRange(editor.selection)\n              ? [\n                  ...Editor.nodes(editor, {\n                    at: editor.selection,\n                    match: Text.isText,\n                  }),\n                ]\n              : []\n            const shouldRemoveMark =\n              splitTextNodes.length > 1 &&\n              splitTextNodes.every((node) => node[0].marks?.includes(mark))\n\n            if (shouldRemoveMark) {\n              editor.removeMark(mark)\n            } else {\n              splitTextNodes.forEach(([node, path]) => {\n                const marks = [\n                  ...(Array.isArray(node.marks) ? node.marks : []).filter(\n                    (eMark: string) => eMark !== mark,\n                  ),\n                  mark,\n                ]\n                Transforms.setNodes(\n                  editor,\n                  {marks},\n                  {at: path, match: Text.isText, split: true, hanging: true},\n                )\n              })\n            }\n          })\n        } else {\n          const [block, blockPath] = Editor.node(editor, editor.selection, {\n            depth: 1,\n          })\n          const lonelyEmptySpan =\n            editor.isTextBlock(block) &&\n            block.children.length === 1 &&\n            editor.isTextSpan(block.children[0]) &&\n            block.children[0].text === ''\n              ? block.children[0]\n              : undefined\n\n          if (lonelyEmptySpan) {\n            const existingMarks = lonelyEmptySpan.marks ?? []\n            const existingMarksWithoutDecorator = existingMarks.filter(\n              (existingMark) => existingMark !== mark,\n            )\n\n            Transforms.setNodes(\n              editor,\n              {\n                marks:\n                  existingMarks.length === existingMarksWithoutDecorator.length\n                    ? [...existingMarks, mark]\n                    : existingMarksWithoutDecorator,\n              },\n              {\n                at: blockPath,\n                match: (node) => editor.isTextSpan(node),\n              },\n            )\n          } else {\n            const existingMarks: string[] =\n              {\n                ...(Editor.marks(editor) || {}),\n              }.marks || []\n            const marks = {\n              ...(Editor.marks(editor) || {}),\n              marks: [...existingMarks, mark],\n            }\n            editor.marks = marks as Text\n            forceNewSelection()\n            return editor\n          }\n        }\n        editor.onChange()\n        forceNewSelection()\n      }\n      return editor\n    }\n\n    // Override built in removeMark function\n    editor.removeMark = (mark: string) => {\n      const {selection} = editor\n      if (selection) {\n        if (Range.isExpanded(selection)) {\n          Editor.withoutNormalizing(editor, () => {\n            // Split if needed\n            Transforms.setNodes(\n              editor,\n              {},\n              {match: Text.isText, split: true, hanging: true},\n            )\n            if (editor.selection) {\n              const splitTextNodes = [\n                ...Editor.nodes(editor, {\n                  at: editor.selection,\n                  match: Text.isText,\n                }),\n              ]\n              splitTextNodes.forEach(([node, path]) => {\n                const block = editor.children[path[0]]\n                if (Element.isElement(block) && block.children.includes(node)) {\n                  Transforms.setNodes(\n                    editor,\n                    {\n                      marks: (Array.isArray(node.marks)\n                        ? node.marks\n                        : []\n                      ).filter((eMark: string) => eMark !== mark),\n                      _type: 'span',\n                    },\n                    {at: path},\n                  )\n                }\n              })\n            }\n          })\n          Editor.normalize(editor)\n        } else {\n          const [block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n          const lonelyEmptySpan =\n            editor.isTextBlock(block) &&\n            block.children.length === 1 &&\n            editor.isTextSpan(block.children[0]) &&\n            block.children[0].text === ''\n              ? block.children[0]\n              : undefined\n\n          if (lonelyEmptySpan) {\n            const existingMarks = lonelyEmptySpan.marks ?? []\n            const existingMarksWithoutDecorator = existingMarks.filter(\n              (existingMark) => existingMark !== mark,\n            )\n\n            Transforms.setNodes(\n              editor,\n              {\n                marks: existingMarksWithoutDecorator,\n              },\n              {\n                at: blockPath,\n                match: (node) => editor.isTextSpan(node),\n              },\n            )\n          } else {\n            const existingMarks: string[] =\n              {\n                ...(Editor.marks(editor) || {}),\n              }.marks || []\n            const marks = {\n              ...(Editor.marks(editor) || {}),\n              marks: existingMarks.filter((eMark) => eMark !== mark),\n            } as Text\n            editor.marks = {marks: marks.marks, _type: 'span'} as Text\n            forceNewSelection()\n            return editor\n          }\n        }\n        editor.onChange()\n        forceNewSelection()\n      }\n      return editor\n    }\n\n    editor.pteIsMarkActive = (mark: string): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n\n      const selectedNodes = Array.from(\n        Editor.nodes(editor, {match: Text.isText, at: editor.selection}),\n      )\n\n      if (Range.isExpanded(editor.selection)) {\n        return selectedNodes.every((n) => {\n          const [node] = n\n\n          return node.marks?.includes(mark)\n        })\n      }\n\n      return (\n        {\n          ...(Editor.marks(editor) || {}),\n        }.marks || []\n      ).includes(mark)\n    }\n\n    // Custom editor function to toggle a mark\n    editor.pteToggleMark = (mark: string) => {\n      const isActive = editor.pteIsMarkActive(mark)\n      if (isActive) {\n        debug(`Remove mark '${mark}'`)\n        Editor.removeMark(editor, mark)\n      } else {\n        debug(`Add mark '${mark}'`)\n        Editor.addMark(editor, mark, true)\n      }\n    }\n    return editor\n  }\n}\n","import type {BaseRange} from 'slate'\nimport type {\n  EditorSelection,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {\n  toPortableTextRange,\n  type ObjectWithKeyAndType,\n} from '../../utils/ranges'\nimport {SLATE_TO_PORTABLE_TEXT_RANGE} from '../../utils/weakMaps'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextSelections')\nconst debugVerbose = debug.enabled && false\n\n// This plugin will make sure that we emit a PT selection whenever the editor has changed.\nexport function createWithPortableTextSelections(\n  editorActor: EditorActor,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  let prevSelection: BaseRange | null = null\n  return function withPortableTextSelections(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const emitPortableTextSelection = () => {\n      if (prevSelection !== editor.selection) {\n        let ptRange: EditorSelection = null\n        if (editor.selection) {\n          const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n          if (existing) {\n            ptRange = existing\n          } else {\n            const value = editor.children satisfies ObjectWithKeyAndType[]\n            ptRange = toPortableTextRange(value, editor.selection, types)\n            SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n          }\n        }\n        if (debugVerbose) {\n          debug(\n            `Emitting selection ${JSON.stringify(ptRange || null)} (${JSON.stringify(\n              editor.selection,\n            )})`,\n          )\n        }\n        if (ptRange) {\n          editorActor.send({type: 'selection', selection: ptRange})\n        } else {\n          editorActor.send({type: 'selection', selection: null})\n        }\n      }\n      prevSelection = editor.selection\n    }\n\n    const {onChange} = editor\n    editor.onChange = () => {\n      const hasChanges = editor.operations.length > 0\n      onChange()\n      if (hasChanges) {\n        emitPortableTextSelection()\n      }\n    }\n    return editor\n  }\n}\n","import {\n  isPortableTextListBlock,\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type PortableTextListBlock,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {Transforms, type Element} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withSchemaTypes')\n/**\n * This plugin makes sure that schema types are recognized properly by Slate as blocks, voids, inlines\n *\n */\nexport function createWithSchemaTypes({\n  editorActor,\n  schemaTypes,\n}: {\n  editorActor: EditorActor\n  schemaTypes: PortableTextMemberSchemaTypes\n}) {\n  return function withSchemaTypes(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.isTextBlock = (value: unknown): value is PortableTextTextBlock => {\n      return (\n        isPortableTextTextBlock(value) && value._type === schemaTypes.block.name\n      )\n    }\n    editor.isTextSpan = (value: unknown): value is PortableTextSpan => {\n      return isPortableTextSpan(value) && value._type === schemaTypes.span.name\n    }\n    editor.isListBlock = (value: unknown): value is PortableTextListBlock => {\n      return (\n        isPortableTextListBlock(value) && value._type === schemaTypes.block.name\n      )\n    }\n    editor.isVoid = (element: Element): boolean => {\n      return (\n        schemaTypes.block.name !== element._type &&\n        (schemaTypes.blockObjects\n          .map((obj) => obj.name)\n          .includes(element._type) ||\n          schemaTypes.inlineObjects\n            .map((obj) => obj.name)\n            .includes(element._type))\n      )\n    }\n    editor.isInline = (element: Element): boolean => {\n      const inlineSchemaTypes = schemaTypes.inlineObjects.map((obj) => obj.name)\n      return (\n        inlineSchemaTypes.includes(element._type) &&\n        '__inline' in element &&\n        element.__inline === true\n      )\n    }\n\n    // Extend Slate's default normalization\n    const {normalizeNode} = editor\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n\n      // If text block children node is missing _type, set it to the span type\n      if (node._type === undefined && path.length === 2) {\n        debug('Setting span type on text node without a type')\n        const span = node as PortableTextSpan\n        const key =\n          span._key || editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(\n          editor,\n          {...span, _type: schemaTypes.span.name, _key: key},\n          {at: path},\n        )\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      // catches cases when the children are missing keys but excludes it when the normalize is running the node as the editor object\n      if (node._key === undefined && (path.length === 1 || path.length === 2)) {\n        debug('Setting missing key on child node without a key')\n        const key = editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {_key: key}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      normalizeNode(entry)\n    }\n    return editor\n  }\n}\n","import {Editor, Range, Text, Transforms} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {toSlateValue} from '../../utils/values'\nimport type {EditorActor} from '../editor-machine'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('plugin:withUtils')\n\ninterface Options {\n  editorActor: EditorActor\n  schemaTypes: PortableTextMemberSchemaTypes\n  portableTextEditor: PortableTextEditor\n}\n/**\n * This plugin makes various util commands available in the editor\n *\n */\nexport function createWithUtils({\n  editorActor,\n  schemaTypes,\n  portableTextEditor,\n}: Options) {\n  return function withUtils(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    // Expands the the selection to wrap around the word the focus is at\n    editor.pteExpandToWord = () => {\n      const {selection} = editor\n      if (selection && !Range.isExpanded(selection)) {\n        const [textNode] = Editor.node(editor, selection.focus, {depth: 2})\n        if (!textNode || !Text.isText(textNode) || textNode.text.length === 0) {\n          debug(`pteExpandToWord: Can't expand to word here`)\n          return\n        }\n        const {focus} = selection\n        const focusOffset = focus.offset\n        const charsBefore = textNode.text.slice(0, focusOffset)\n        const charsAfter = textNode.text.slice(focusOffset, -1)\n        const isEmpty = (str: string) => str.match(/\\s/g)\n        const whiteSpaceBeforeIndex = charsBefore\n          .split('')\n          .reverse()\n          .findIndex((str) => isEmpty(str))\n        const newStartOffset =\n          whiteSpaceBeforeIndex > -1\n            ? charsBefore.length - whiteSpaceBeforeIndex\n            : 0\n        const whiteSpaceAfterIndex = charsAfter\n          .split('')\n          .findIndex((obj) => isEmpty(obj))\n        const newEndOffset =\n          charsBefore.length +\n          (whiteSpaceAfterIndex > -1\n            ? whiteSpaceAfterIndex\n            : charsAfter.length + 1)\n        if (\n          !(\n            newStartOffset === newEndOffset ||\n            Number.isNaN(newStartOffset) ||\n            Number.isNaN(newEndOffset)\n          )\n        ) {\n          debug('pteExpandToWord: Expanding to focused word')\n          Transforms.setSelection(editor, {\n            anchor: {...selection.anchor, offset: newStartOffset},\n            focus: {...selection.focus, offset: newEndOffset},\n          })\n          return\n        }\n        debug(`pteExpandToWord: Can't expand to word here`)\n      }\n    }\n\n    editor.pteCreateTextBlock = (options: {\n      decorators: Array<string>\n      listItem?: string\n      level?: number\n    }) => {\n      const block = toSlateValue(\n        [\n          {\n            _type: schemaTypes.block.name,\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            style: schemaTypes.styles[0].value || 'normal',\n            ...(options.listItem ? {listItem: options.listItem} : {}),\n            ...(options.level ? {level: options.level} : {}),\n            markDefs: [],\n            children: [\n              {\n                _type: 'span',\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                text: '',\n                marks: options.decorators.filter((decorator) =>\n                  schemaTypes.decorators.find(({value}) => value === decorator),\n                ),\n              },\n            ],\n          },\n        ],\n        portableTextEditor,\n      )[0]\n      return block\n    }\n    return editor\n  }\n}\n","import {isPortableTextSpan, isPortableTextTextBlock} from '@sanity/types'\nimport {isHotkey} from 'is-hotkey-esm'\nimport type {KeyboardEvent} from 'react'\nimport {Editor, Node, Path, Range, Transforms} from 'slate'\nimport type {ReactEditor} from 'slate-react'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {HotkeyOptions} from '../../types/options'\nimport type {SlateTextBlock, VoidElement} from '../../types/slate'\nimport {debugWithName} from '../../utils/debug'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('plugin:withHotKeys')\n\nconst DEFAULT_HOTKEYS: HotkeyOptions = {\n  marks: {\n    'mod+b': 'strong',\n    'mod+i': 'em',\n    'mod+u': 'underline',\n    \"mod+'\": 'code',\n  },\n  custom: {},\n}\n\n/**\n * This plugin takes care of all hotkeys in the editor\n *\n */\nexport function createWithHotkeys(\n  portableTextEditor: PortableTextEditor,\n  hotkeysFromOptions?: HotkeyOptions,\n): (editor: PortableTextSlateEditor & ReactEditor) => any {\n  const reservedHotkeys = ['enter', 'tab', 'shift', 'delete', 'end']\n  const activeHotkeys = hotkeysFromOptions || DEFAULT_HOTKEYS // TODO: Merge where possible? A union?\n  return function withHotKeys(editor: PortableTextSlateEditor & ReactEditor) {\n    editor.pteWithHotKeys = (event: KeyboardEvent<HTMLDivElement>): void => {\n      // Wire up custom marks hotkeys\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === 'marks') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              event.preventDefault()\n              const possibleMark = activeHotkeys[cat]\n              if (possibleMark) {\n                const mark = possibleMark[hotkey]\n                debug(`HotKey ${hotkey} to toggle ${mark}`)\n                editor.pteToggleMark(mark)\n              }\n            }\n          }\n        }\n        if (cat === 'custom') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat]\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey]\n                command(event, portableTextEditor)\n              }\n            }\n          }\n        }\n      })\n\n      const isEnter = isHotkey('enter', event.nativeEvent)\n      const isTab = isHotkey('tab', event.nativeEvent)\n      const isShiftEnter = isHotkey('shift+enter', event.nativeEvent)\n      const isShiftTab = isHotkey('shift+tab', event.nativeEvent)\n      const isArrowDown = isHotkey('down', event.nativeEvent)\n      const isArrowUp = isHotkey('up', event.nativeEvent)\n\n      // Check if the user is in a void block, in that case, add an empty text block below if there is no next block\n      if (isArrowDown && editor.selection) {\n        const focusBlock = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        ) as SlateTextBlock | VoidElement\n\n        if (focusBlock && Editor.isVoid(editor, focusBlock)) {\n          const nextPath = Path.next(editor.selection.focus.path.slice(0, 1))\n          const nextBlock = Node.has(editor, nextPath)\n          if (!nextBlock) {\n            Transforms.insertNodes(\n              editor,\n              editor.pteCreateTextBlock({decorators: []}),\n              {\n                at: nextPath,\n              },\n            )\n            Transforms.select(editor, {path: [...nextPath, 0], offset: 0})\n            editor.onChange()\n            return\n          }\n        }\n      }\n      if (isArrowUp && editor.selection) {\n        const isFirstBlock = editor.selection.focus.path[0] === 0\n        const focusBlock = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        ) as SlateTextBlock | VoidElement\n\n        if (isFirstBlock && focusBlock && Editor.isVoid(editor, focusBlock)) {\n          Transforms.insertNodes(\n            editor,\n            editor.pteCreateTextBlock({decorators: []}),\n            {\n              at: [0],\n            },\n          )\n          Transforms.select(editor, {path: [0, 0], offset: 0})\n          editor.onChange()\n          return\n        }\n      }\n\n      // Tab for lists\n      // Only steal tab when we are on a plain text span or we are at the start of the line (fallback if the whole block is annotated or contains a single inline object)\n      // Otherwise tab is reserved for accessability for buttons etc.\n      if ((isTab || isShiftTab) && editor.selection) {\n        const [focusChild] = Editor.node(editor, editor.selection.focus, {\n          depth: 2,\n        })\n        const [focusBlock] = isPortableTextSpan(focusChild)\n          ? Editor.node(editor, editor.selection.focus, {depth: 1})\n          : []\n        const hasAnnotationFocus =\n          focusChild &&\n          isPortableTextTextBlock(focusBlock) &&\n          isPortableTextSpan(focusChild) &&\n          (focusChild.marks || ([] as string[])).filter((m) =>\n            (focusBlock.markDefs || []).map((def) => def._key).includes(m),\n          ).length > 0\n        const [start] = Range.edges(editor.selection)\n        const atStartOfNode = Editor.isStart(editor, start, start.path)\n\n        if (\n          focusChild &&\n          isPortableTextSpan(focusChild) &&\n          (!hasAnnotationFocus || atStartOfNode) &&\n          editor.pteIncrementBlockLevels(isShiftTab)\n        ) {\n          event.preventDefault()\n        }\n      }\n\n      // Deal with enter key combos\n      if (isEnter && !isShiftEnter && editor.selection) {\n        const focusBlockPath = editor.selection.focus.path.slice(0, 1)\n        const focusBlock = Node.descendant(editor, focusBlockPath) as\n          | SlateTextBlock\n          | VoidElement\n\n        // List item enter key\n        if (editor.isListBlock(focusBlock)) {\n          if (editor.pteEndList()) {\n            event.preventDefault()\n          }\n          return\n        }\n      }\n    }\n    return editor\n  }\n}\n","import {insert, set, setIfMissing, unset} from '@portabletext/patches'\nimport {\n  isPortableTextTextBlock,\n  type PortableTextBlock,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {flatten, isPlainObject, uniq} from 'lodash'\nimport type {\n  InvalidValueResolution,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\n\nexport interface Validation {\n  valid: boolean\n  resolution: InvalidValueResolution | null\n  value: PortableTextBlock[] | undefined\n}\n\nexport function validateValue(\n  value: PortableTextBlock[] | undefined,\n  types: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string,\n): Validation {\n  let resolution: InvalidValueResolution | null = null\n  let valid = true\n  const validChildTypes = [\n    types.span.name,\n    ...types.inlineObjects.map((t) => t.name),\n  ]\n  const validBlockTypes = [\n    types.block.name,\n    ...types.blockObjects.map((t) => t.name),\n  ]\n\n  // Undefined is allowed\n  if (value === undefined) {\n    return {valid: true, resolution: null, value}\n  }\n  // Only lengthy arrays are allowed in the editor.\n  if (!Array.isArray(value) || value.length === 0) {\n    return {\n      valid: false,\n      resolution: {\n        patches: [unset([])],\n        description:\n          'Editor value must be an array of Portable Text blocks, or undefined.',\n        action: 'Unset the value',\n        item: value,\n\n        i18n: {\n          description:\n            'inputs.portable-text.invalid-value.not-an-array.description',\n          action: 'inputs.portable-text.invalid-value.not-an-array.action',\n        },\n      },\n      value,\n    }\n  }\n  if (\n    value.some((blk: PortableTextBlock, index: number): boolean => {\n      // Is the block an object?\n      if (!isPlainObject(blk)) {\n        resolution = {\n          patches: [unset([index])],\n          description: `Block must be an object, got ${String(blk)}`,\n          action: `Unset invalid item`,\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.not-an-object.description',\n            action: 'inputs.portable-text.invalid-value.not-an-object.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has a _key prop\n      if (!blk._key || typeof blk._key !== 'string') {\n        resolution = {\n          patches: [set({...blk, _key: keyGenerator()}, [index])],\n          description: `Block at index ${index} is missing required _key.`,\n          action: 'Set the block with a random _key value',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.missing-key.description',\n            action: 'inputs.portable-text.invalid-value.missing-key.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has valid _type\n      if (!blk._type || !validBlockTypes.includes(blk._type)) {\n        // Special case where block type is set to default 'block', but the block type is named something else according to the schema.\n        if (blk._type === 'block') {\n          const currentBlockTypeName = types.block.name\n          resolution = {\n            patches: [\n              set({...blk, _type: currentBlockTypeName}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n            action: `Use type '${currentBlockTypeName}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.incorrect-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.incorrect-block-type.action',\n              values: {key: blk._key, expectedTypeName: currentBlockTypeName},\n            },\n          }\n          return true\n        }\n\n        // If the block has no `_type`, but aside from that is a valid Portable Text block\n        if (\n          !blk._type &&\n          isPortableTextTextBlock({...blk, _type: types.block.name})\n        ) {\n          resolution = {\n            patches: [\n              set({...blk, _type: types.block.name}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' is missing a type name. According to the schema, the block type name is '${types.block.name}'`,\n            action: `Use type '${types.block.name}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-block-type.action',\n              values: {key: blk._key, expectedTypeName: types.block.name},\n            },\n          }\n          return true\n        }\n\n        if (!blk._type) {\n          resolution = {\n            patches: [unset([{_key: blk._key}])],\n            description: `Block with _key '${blk._key}' is missing an _type property`,\n            action: 'Remove the block',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-type.description',\n              action: 'inputs.portable-text.invalid-value.missing-type.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        resolution = {\n          patches: [unset([{_key: blk._key}])],\n          description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n          action: 'Remove the block',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.disallowed-type.description',\n            action: 'inputs.portable-text.invalid-value.disallowed-type.action',\n            values: {key: blk._key, typeName: blk._type},\n          },\n        }\n        return true\n      }\n\n      // Test regular text blocks\n      if (blk._type === types.block.name) {\n        const textBlock = blk as PortableTextTextBlock\n        // Test that it has a valid children property (array)\n        if (textBlock.children && !Array.isArray(textBlock.children)) {\n          resolution = {\n            patches: [set({children: []}, [{_key: textBlock._key}])],\n            description: `Text block with _key '${textBlock._key}' has a invalid required property 'children'.`,\n            action: 'Reset the children property',\n            item: textBlock,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.action',\n              values: {key: textBlock._key},\n            },\n          }\n          return true\n        }\n        // Test that children is set and lengthy\n        if (\n          textBlock.children === undefined ||\n          (Array.isArray(textBlock.children) && textBlock.children.length === 0)\n        ) {\n          const newSpan = {\n            _type: types.span.name,\n            _key: keyGenerator(),\n            text: '',\n            marks: [],\n          }\n          resolution = {\n            autoResolve: true,\n            patches: [\n              setIfMissing([], [{_key: blk._key}, 'children']),\n              insert([newSpan], 'after', [{_key: blk._key}, 'children', 0]),\n            ],\n            description: `Children for text block with _key '${blk._key}' is empty.`,\n            action: 'Insert an empty text',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.empty-children.description',\n              action:\n                'inputs.portable-text.invalid-value.empty-children.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        const allUsedMarks = uniq(\n          flatten(\n            textBlock.children\n              .filter((cld) => cld._type === types.span.name)\n              .map((cld) => cld.marks || []),\n          ) as string[],\n        )\n\n        // Test that all markDefs are in use (remove orphaned markDefs)\n        if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {\n          const unusedMarkDefs: string[] = uniq(\n            blk.markDefs\n              .map((def) => def._key)\n              .filter((key) => !allUsedMarks.includes(key)),\n          )\n          if (unusedMarkDefs.length > 0) {\n            resolution = {\n              autoResolve: true,\n              patches: unusedMarkDefs.map((markDefKey) =>\n                unset([{_key: blk._key}, 'markDefs', {_key: markDefKey}]),\n              ),\n              description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(\n                ', ',\n              )}.`,\n              action: 'Remove unused mark definition item',\n              item: blk,\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.action',\n                values: {\n                  key: blk._key,\n                  unusedMarkDefs: unusedMarkDefs.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test that every annotation mark used has a definition\n        const annotationMarks = allUsedMarks.filter(\n          (mark) => !types.decorators.map((dec) => dec.value).includes(mark),\n        )\n        const orphanedMarks = annotationMarks.filter(\n          (mark) =>\n            textBlock.markDefs === undefined ||\n            !textBlock.markDefs.find((def) => def._key === mark),\n        )\n        if (orphanedMarks.length > 0) {\n          const spanChildren = textBlock.children.filter(\n            (cld) =>\n              cld._type === types.span.name &&\n              Array.isArray(cld.marks) &&\n              cld.marks.some((mark) => orphanedMarks.includes(mark)),\n          ) as PortableTextSpan[]\n          if (spanChildren) {\n            const orphaned = orphanedMarks.join(', ')\n            resolution = {\n              autoResolve: true,\n              patches: spanChildren.map((child) => {\n                return set(\n                  (child.marks || []).filter(\n                    (cMrk) => !orphanedMarks.includes(cMrk),\n                  ),\n                  [{_key: blk._key}, 'children', {_key: child._key}, 'marks'],\n                )\n              }),\n              description: `Block with _key '${blk._key}' contains marks (${orphaned}) not supported by the current content model.`,\n              action: 'Remove invalid marks',\n              item: blk,\n\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-marks.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-marks.action',\n                values: {\n                  key: blk._key,\n                  orphanedMarks: orphanedMarks.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test every child\n        if (\n          textBlock.children.some((child, cIndex: number) => {\n            if (!isPlainObject(child)) {\n              resolution = {\n                patches: [unset([{_key: blk._key}, 'children', cIndex])],\n                description: `Child at index '${cIndex}' in block with key '${blk._key}' is not an object.`,\n                action: 'Remove the item',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.non-object-child.description',\n                  action:\n                    'inputs.portable-text.invalid-value.non-object-child.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            if (!child._key || typeof child._key !== 'string') {\n              const newChild = {...child, _key: keyGenerator()}\n              resolution = {\n                autoResolve: true,\n                patches: [\n                  set(newChild, [{_key: blk._key}, 'children', cIndex]),\n                ],\n                description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n                action: 'Set a new random _key on the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-key.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-key.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            // Verify that children have valid types\n            if (!child._type) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing '_type' property.`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-type.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n\n            if (!validChildTypes.includes(child._type)) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.action',\n                  values: {\n                    key: blk._key,\n                    childKey: child._key,\n                    childType: child._type,\n                  },\n                },\n              }\n              return true\n            }\n\n            // Verify that spans have .text property that is a string\n            if (\n              child._type === types.span.name &&\n              typeof child.text !== 'string'\n            ) {\n              resolution = {\n                patches: [\n                  set({...child, text: ''}, [\n                    {_key: blk._key},\n                    'children',\n                    {_key: child._key},\n                  ]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has missing or invalid text property!`,\n                action: `Write an empty text property to the object`,\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.invalid-span-text.description',\n                  action:\n                    'inputs.portable-text.invalid-value.invalid-span-text.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n            return false\n          })\n        ) {\n          valid = false\n        }\n      }\n      return false\n    })\n  ) {\n    valid = false\n  }\n  return {valid, resolution, value}\n}\n","import {htmlToBlocks, normalizeBlock} from '@sanity/block-tools'\nimport type {PortableTextBlock, PortableTextChild} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {Editor, Range, Transforms, type Descendant, type Node} from 'slate'\nimport {ReactEditor} from 'slate-react'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {validateValue} from '../../utils/validateValue'\nimport {\n  fromSlateValue,\n  isEqualToEmptyEditor,\n  toSlateValue,\n} from '../../utils/values'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withInsertData')\n\n/**\n * This plugin handles copy/paste in the editor\n *\n */\nexport function createWithInsertData(\n  editorActor: EditorActor,\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  return function withInsertData(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const blockTypeName = schemaTypes.block.name\n    const spanTypeName = schemaTypes.span.name\n    const whitespaceOnPasteMode =\n      schemaTypes.block.options.unstable_whitespaceOnPasteMode\n\n    const toPlainText = (blocks: PortableTextBlock[]) => {\n      return blocks\n        .map((block) => {\n          if (editor.isTextBlock(block)) {\n            return block.children\n              .map((child: PortableTextChild) => {\n                if (child._type === spanTypeName) {\n                  return child.text\n                }\n                return `[${\n                  schemaTypes.inlineObjects.find((t) => t.name === child._type)\n                    ?.title || 'Object'\n                }]`\n              })\n              .join('')\n          }\n          return `[${\n            schemaTypes.blockObjects.find((t) => t.name === block._type)\n              ?.title || 'Object'\n          }]`\n        })\n        .join('\\n\\n')\n    }\n\n    editor.setFragmentData = (data: DataTransfer, originEvent) => {\n      const {selection} = editor\n\n      if (!selection) {\n        return\n      }\n\n      const [start, end] = Range.edges(selection)\n      const startVoid = Editor.void(editor, {at: start.path})\n      const endVoid = Editor.void(editor, {at: end.path})\n\n      if (Range.isCollapsed(selection) && !startVoid) {\n        return\n      }\n\n      // Create a fake selection so that we can add a Base64-encoded copy of the\n      // fragment to the HTML, to decode on future pastes.\n      const domRange = ReactEditor.toDOMRange(editor, selection)\n      let contents = domRange.cloneContents()\n      // COMPAT: If the end node is a void node, we need to move the end of the\n      // range from the void node's spacer span, to the end of the void node's\n      // content, since the spacer is before void's content in the DOM.\n      if (endVoid) {\n        const [voidNode] = endVoid\n        const r = domRange.cloneRange()\n        const domNode = ReactEditor.toDOMNode(editor, voidNode)\n        r.setEndAfter(domNode)\n        contents = r.cloneContents()\n      }\n      // Remove any zero-width space spans from the cloned DOM so that they don't\n      // show up elsewhere when pasted.\n      Array.from(contents.querySelectorAll('[data-slate-zero-width]')).forEach(\n        (zw) => {\n          const isNewline = zw.getAttribute('data-slate-zero-width') === 'n'\n          zw.textContent = isNewline ? '\\n' : ''\n        },\n      )\n      // Clean up the clipboard HTML for editor spesific attributes\n      Array.from(contents.querySelectorAll('*')).forEach((elm) => {\n        elm.removeAttribute('contentEditable')\n        elm.removeAttribute('data-slate-inline')\n        elm.removeAttribute('data-slate-leaf')\n        elm.removeAttribute('data-slate-node')\n        elm.removeAttribute('data-slate-spacer')\n        elm.removeAttribute('data-slate-string')\n        elm.removeAttribute('data-slate-zero-width')\n        elm.removeAttribute('draggable')\n        for (const key in elm.attributes) {\n          if (elm.hasAttribute(key)) {\n            elm.removeAttribute(key)\n          }\n        }\n      })\n      const div = contents.ownerDocument.createElement('div')\n      div.appendChild(contents)\n      div.setAttribute('hidden', 'true')\n      contents.ownerDocument.body.appendChild(div)\n      const asHTML = div.innerHTML\n      contents.ownerDocument.body.removeChild(div)\n      const fragment = editor.getFragment()\n      const portableText = fromSlateValue(fragment, blockTypeName)\n\n      const asJSON = JSON.stringify(portableText)\n      const asPlainText = toPlainText(portableText)\n      data.clearData()\n      data.setData('text/plain', asPlainText)\n      data.setData('text/html', asHTML)\n      data.setData('application/json', asJSON)\n      data.setData('application/x-portable-text', asJSON)\n      debug('text', asPlainText)\n      data.setData(\n        'application/x-portable-text-event-origin',\n        originEvent || 'external',\n      )\n      debug('Set fragment data', asJSON, asHTML)\n    }\n\n    editor.insertPortableTextData = (data: DataTransfer): boolean => {\n      if (!editor.selection) {\n        return false\n      }\n      const pText = data.getData('application/x-portable-text')\n      const origin = data.getData('application/x-portable-text-event-origin')\n      debug(`Inserting portable text from ${origin} event`, pText)\n      if (pText) {\n        const parsed = JSON.parse(pText) as PortableTextBlock[]\n        if (Array.isArray(parsed) && parsed.length > 0) {\n          const slateValue = _regenerateKeys(\n            editor,\n            toSlateValue(parsed, {schemaTypes}),\n            editorActor.getSnapshot().context.keyGenerator,\n            spanTypeName,\n            schemaTypes,\n          )\n          // Validate the result\n          const validation = validateValue(\n            parsed,\n            schemaTypes,\n            editorActor.getSnapshot().context.keyGenerator,\n          )\n          // Bail out if it's not valid\n          if (!validation.valid && !validation.resolution?.autoResolve) {\n            const errorDescription = `${validation.resolution?.description}`\n            editorActor.send({\n              type: 'error',\n              name: 'pasteError',\n              description: errorDescription,\n              data: validation,\n            })\n            debug('Invalid insert result', validation)\n            return false\n          }\n          _insertFragment(editor, slateValue, schemaTypes)\n          return true\n        }\n      }\n      return false\n    }\n\n    editor.insertTextOrHTMLData = (data: DataTransfer): boolean => {\n      if (!editor.selection) {\n        debug('No selection, not inserting')\n        return false\n      }\n      const html = data.getData('text/html')\n      const text = data.getData('text/plain')\n\n      if (html || text) {\n        debug('Inserting data', data)\n        let portableText: PortableTextBlock[]\n        let fragment: Node[]\n        let insertedType: string | undefined\n\n        if (html) {\n          portableText = htmlToBlocks(html, schemaTypes.portableText, {\n            unstable_whitespaceOnPasteMode: whitespaceOnPasteMode,\n          }).map((block) =>\n            normalizeBlock(block, {blockTypeName}),\n          ) as PortableTextBlock[]\n          fragment = toSlateValue(portableText, {schemaTypes})\n          insertedType = 'HTML'\n\n          if (portableText.length === 0) {\n            return false\n          }\n        } else {\n          // plain text\n          const blocks = escapeHtml(text)\n            .split(/\\n{2,}/)\n            .map((line) =>\n              line\n                ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')}</p>`\n                : '<p></p>',\n            )\n            .join('')\n          const textToHtml = `<html><body>${blocks}</body></html>`\n          portableText = htmlToBlocks(textToHtml, schemaTypes.portableText).map(\n            (block) => normalizeBlock(block, {blockTypeName}),\n          ) as PortableTextBlock[]\n          fragment = toSlateValue(portableText, {\n            schemaTypes,\n          })\n          insertedType = 'text'\n        }\n\n        // Validate the result\n        const validation = validateValue(\n          portableText,\n          schemaTypes,\n          editorActor.getSnapshot().context.keyGenerator,\n        )\n\n        // Bail out if it's not valid\n        if (!validation.valid) {\n          const errorDescription = `Could not validate the resulting portable text to insert.\\n${validation.resolution?.description}\\nTry to insert as plain text (shift-paste) instead.`\n          editorActor.send({\n            type: 'error',\n            name: 'pasteError',\n            description: errorDescription,\n            data: validation,\n          })\n          debug('Invalid insert result', validation)\n          return false\n        }\n        debug(\n          `Inserting ${insertedType} fragment at ${JSON.stringify(editor.selection)}`,\n        )\n        _insertFragment(editor, fragment, schemaTypes)\n        return true\n      }\n      return false\n    }\n\n    editor.insertData = (data: DataTransfer) => {\n      if (!editor.insertPortableTextData(data)) {\n        editor.insertTextOrHTMLData(data)\n      }\n    }\n\n    editor.insertFragmentData = (data: DataTransfer): boolean => {\n      const fragment = data.getData('application/x-portable-text')\n      if (fragment) {\n        const parsed = JSON.parse(fragment)\n        editor.insertFragment(parsed)\n        return true\n      }\n      return false\n    }\n\n    return editor\n  }\n}\n\nconst entityMap: Record<string, string> = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '/': '&#x2F;',\n  '`': '&#x60;',\n  '=': '&#x3D;',\n}\nfunction escapeHtml(str: string) {\n  return String(str).replace(/[&<>\"'`=/]/g, (s: string) => entityMap[s])\n}\n\n/**\n * Shared helper function to regenerate the keys on a fragment.\n *\n * @internal\n */\nfunction _regenerateKeys(\n  editor: Pick<PortableTextSlateEditor, 'isTextBlock' | 'isTextSpan'>,\n  fragment: Descendant[],\n  keyGenerator: () => string,\n  spanTypeName: string,\n  editorTypes: Pick<PortableTextMemberSchemaTypes, 'annotations'>,\n): Descendant[] {\n  return fragment.map((node) => {\n    const newNode: Descendant = {...node}\n    // Ensure the copy has new keys\n    if (editor.isTextBlock(newNode)) {\n      const annotations = editorTypes.annotations.map((t) => t.name)\n\n      // Ensure that if there are no annotations, we remove the markDefs\n      if (annotations.length === 0) {\n        const {markDefs, ...NewNodeNoDefs} = newNode\n\n        return {...NewNodeNoDefs, _key: keyGenerator()}\n      }\n\n      // Ensure that all annotations are allowed\n      const hasForbiddenAnnotations = (newNode.markDefs || []).some((def) => {\n        return !annotations.includes(def._type)\n      })\n\n      // if they have forbidden annotations, we remove them and keep the rest\n      if (hasForbiddenAnnotations) {\n        const allowedAnnotations = (newNode.markDefs || []).filter((def) => {\n          return annotations.includes(def._type)\n        })\n\n        return {...newNode, markDefs: allowedAnnotations, _key: keyGenerator()}\n      }\n\n      newNode.markDefs = (newNode.markDefs || []).map((def) => {\n        const oldKey = def._key\n        const newKey = keyGenerator()\n        newNode.children = newNode.children.map((child) =>\n          child._type === spanTypeName && editor.isTextSpan(child)\n            ? {\n                ...child,\n                marks:\n                  child.marks && child.marks.includes(oldKey)\n                    ? [...child.marks]\n                        .filter((mark) => mark !== oldKey)\n                        .concat(newKey)\n                    : child.marks,\n              }\n            : child,\n        )\n        return {...def, _key: newKey}\n      })\n    }\n    const nodeWithNewKeys = {...newNode, _key: keyGenerator()}\n    if (editor.isTextBlock(nodeWithNewKeys)) {\n      nodeWithNewKeys.children = nodeWithNewKeys.children.map((child) => ({\n        ...child,\n        _key: keyGenerator(),\n      }))\n    }\n    return nodeWithNewKeys as Descendant\n  })\n}\n\n/**\n * Shared helper function to insert the final fragment into the editor\n *\n * @internal\n */\nfunction _insertFragment(\n  editor: PortableTextSlateEditor,\n  fragment: Descendant[],\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  editor.withoutNormalizing(() => {\n    if (!editor.selection) {\n      return\n    }\n    // Ensure that markDefs for any annotations inside this fragment are copied over to the focused text block.\n    const [focusBlock, focusPath] = Editor.node(editor, editor.selection, {\n      depth: 1,\n    })\n    if (editor.isTextBlock(focusBlock) && editor.isTextBlock(fragment[0])) {\n      const {markDefs} = focusBlock\n      debug(\n        'Mixing markDefs of focusBlock and fragments[0] block',\n        markDefs,\n        fragment[0].markDefs,\n      )\n      if (!isEqual(markDefs, fragment[0].markDefs)) {\n        Transforms.setNodes(\n          editor,\n          {\n            markDefs: uniq([\n              ...(fragment[0].markDefs || []),\n              ...(markDefs || []),\n            ]),\n          },\n          {at: focusPath, mode: 'lowest', voids: false},\n        )\n      }\n    }\n\n    const isPasteToEmptyEditor = isEqualToEmptyEditor(\n      editor.children,\n      schemaTypes,\n    )\n\n    if (isPasteToEmptyEditor) {\n      // Special case for pasting directly into an empty editor (a placeholder block).\n      // When pasting content starting with multiple empty blocks,\n      // `editor.insertFragment` can potentially duplicate the keys of\n      // the placeholder block because of operations that happen\n      // inside `editor.insertFragment` (involves an `insert_node` operation).\n      // However by splitting the placeholder block first in this situation we are good.\n      Transforms.splitNodes(editor, {at: [0, 0]})\n      editor.insertFragment(fragment)\n      Transforms.removeNodes(editor, {at: [0]})\n    } else {\n      // All other inserts\n      editor.insertFragment(fragment)\n    }\n  })\n\n  editor.onChange()\n}\n\n/**\n * functions we don't want to export but want to test\n * @internal\n */\nexport const exportedForTesting = {\n  _regenerateKeys,\n}\n","import {noop} from 'lodash'\nimport type {BaseOperation, Editor, Node, NodeEntry} from 'slate'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {createEditorOptions} from '../../types/options'\nimport {createOperationToPatches} from '../../utils/operationToPatches'\nimport {createWithEventListeners} from './create-with-event-listeners'\nimport {createWithEditableAPI} from './createWithEditableAPI'\nimport {createWithMaxBlocks} from './createWithMaxBlocks'\nimport {createWithObjectKeys} from './createWithObjectKeys'\nimport {createWithPatches} from './createWithPatches'\nimport {createWithPlaceholderBlock} from './createWithPlaceholderBlock'\nimport {createWithPortableTextBlockStyle} from './createWithPortableTextBlockStyle'\nimport {createWithPortableTextLists} from './createWithPortableTextLists'\nimport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nimport {createWithPortableTextSelections} from './createWithPortableTextSelections'\nimport {createWithSchemaTypes} from './createWithSchemaTypes'\nimport {createWithUndoRedo} from './createWithUndoRedo'\nimport {createWithUtils} from './createWithUtils'\n\nexport {createWithEditableAPI} from './createWithEditableAPI'\nexport {createWithHotkeys} from './createWithHotKeys'\nexport {createWithInsertData} from './createWithInsertData'\nexport {createWithMaxBlocks} from './createWithMaxBlocks'\nexport {createWithObjectKeys} from './createWithObjectKeys'\nexport {createWithPatches} from './createWithPatches'\nexport {createWithPortableTextBlockStyle} from './createWithPortableTextBlockStyle'\nexport {createWithPortableTextLists} from './createWithPortableTextLists'\nexport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nexport {createWithPortableTextSelections} from './createWithPortableTextSelections'\nexport {createWithSchemaTypes} from './createWithSchemaTypes'\nexport {createWithUndoRedo} from './createWithUndoRedo'\nexport {createWithUtils} from './createWithUtils'\n\nexport interface OriginalEditorFunctions {\n  apply: (operation: BaseOperation) => void\n  onChange: () => void\n  normalizeNode: (entry: NodeEntry<Node>) => void\n}\n\nconst originalFnMap = new WeakMap<\n  PortableTextSlateEditor,\n  OriginalEditorFunctions\n>()\n\nexport const withPlugins = <T extends Editor>(\n  editor: T,\n  options: createEditorOptions,\n): {editor: PortableTextSlateEditor; subscribe: () => () => void} => {\n  const e = editor as T & PortableTextSlateEditor\n  const {editorActor, portableTextEditor, readOnly, maxBlocks} = options\n  const {schemaTypes} = portableTextEditor\n  e.subscriptions = []\n  if (e.destroy) {\n    e.destroy()\n  } else {\n    // Save a copy of the original editor functions here before they were changed by plugins.\n    // We will put them back when .destroy is called (see below).\n    originalFnMap.set(e, {\n      apply: e.apply,\n      onChange: e.onChange,\n      normalizeNode: e.normalizeNode,\n    })\n  }\n  const operationToPatches = createOperationToPatches(schemaTypes)\n  const withObjectKeys = createWithObjectKeys(editorActor, schemaTypes)\n  const withSchemaTypes = createWithSchemaTypes({\n    editorActor,\n    schemaTypes,\n  })\n  const withEditableAPI = createWithEditableAPI(\n    editorActor,\n    portableTextEditor,\n    schemaTypes,\n  )\n  const withPatches = createWithPatches({\n    editorActor,\n    patchFunctions: operationToPatches,\n    readOnly,\n    schemaTypes,\n  })\n  const withMaxBlocks = createWithMaxBlocks(maxBlocks || -1)\n  const withPortableTextLists = createWithPortableTextLists(schemaTypes)\n  const withUndoRedo = createWithUndoRedo({\n    editorActor,\n    readOnly,\n    blockSchemaType: schemaTypes.block,\n  })\n  const withPortableTextMarkModel = createWithPortableTextMarkModel(\n    editorActor,\n    schemaTypes,\n  )\n  const withPortableTextBlockStyle = createWithPortableTextBlockStyle(\n    editorActor,\n    schemaTypes,\n  )\n\n  const withPlaceholderBlock = createWithPlaceholderBlock()\n\n  const withUtils = createWithUtils({\n    editorActor,\n    schemaTypes,\n    portableTextEditor,\n  })\n  const withPortableTextSelections = createWithPortableTextSelections(\n    editorActor,\n    schemaTypes,\n  )\n  const withEventListeners = createWithEventListeners(editorActor)\n\n  e.destroy = () => {\n    const originalFunctions = originalFnMap.get(e)\n    if (!originalFunctions) {\n      throw new Error('Could not find pristine versions of editor functions')\n    }\n    e.apply = originalFunctions.apply\n    e.history = {undos: [], redos: []}\n    e.normalizeNode = originalFunctions.normalizeNode\n    e.onChange = originalFunctions.onChange\n  }\n  if (readOnly) {\n    return {\n      editor: withSchemaTypes(\n        withObjectKeys(\n          withPortableTextMarkModel(\n            withPortableTextBlockStyle(\n              withUtils(\n                withPlaceholderBlock(\n                  withPortableTextLists(\n                    withPortableTextSelections(withEditableAPI(e)),\n                  ),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n      subscribe: () => noop,\n    }\n  }\n\n  // Ordering is important here, selection dealing last, data manipulation in the middle and core model stuff first.\n  return {\n    editor: withEventListeners(\n      withSchemaTypes(\n        withObjectKeys(\n          withPortableTextMarkModel(\n            withPortableTextBlockStyle(\n              withPortableTextLists(\n                withPlaceholderBlock(\n                  withUtils(\n                    withMaxBlocks(\n                      withUndoRedo(\n                        withPatches(\n                          withPortableTextSelections(withEditableAPI(e)),\n                        ),\n                      ),\n                    ),\n                  ),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    ),\n    subscribe: () => {\n      const unsubscribes: (() => void)[] = []\n      editor.subscriptions.forEach((subscribeFn) => {\n        unsubscribes.push(subscribeFn())\n      })\n      return () => {\n        unsubscribes.forEach((unsubscribeFn) => {\n          unsubscribeFn()\n        })\n      }\n    },\n  }\n}\n","import {useEffect, useMemo, useState, type PropsWithChildren} from 'react'\nimport {createEditor} from 'slate'\nimport {Slate, withReact} from 'slate-react'\nimport {debugWithName} from '../../utils/debug'\nimport {KEY_TO_SLATE_ELEMENT, KEY_TO_VALUE_ELEMENT} from '../../utils/weakMaps'\nimport type {EditorActor} from '../editor-machine'\nimport {withPlugins} from '../plugins'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('component:PortableTextEditor:SlateContainer')\n\n/**\n * @internal\n */\nexport interface SlateContainerProps extends PropsWithChildren {\n  editorActor: EditorActor\n  maxBlocks: number | undefined\n  portableTextEditor: PortableTextEditor\n  readOnly: boolean\n}\n\n/**\n * Sets up and encapsulates the Slate instance\n * @internal\n */\nexport function SlateContainer(props: SlateContainerProps) {\n  const {editorActor, portableTextEditor, readOnly, maxBlocks} = props\n\n  // Create the slate instance, using `useState` ensures setup is only run once, initially\n  const [[slateEditor, subscribe]] = useState(() => {\n    debug('Creating new Slate editor instance')\n    const {editor, subscribe: _sub} = withPlugins(withReact(createEditor()), {\n      editorActor,\n      maxBlocks,\n      portableTextEditor,\n      readOnly,\n    })\n    KEY_TO_VALUE_ELEMENT.set(editor, {})\n    KEY_TO_SLATE_ELEMENT.set(editor, {})\n    return [editor, _sub] as const\n  })\n\n  useEffect(() => {\n    const unsubscribe = subscribe()\n    return () => {\n      unsubscribe()\n    }\n  }, [subscribe])\n\n  // Update the slate instance when plugin dependent props change.\n  useEffect(() => {\n    debug('Re-initializing plugin chain')\n    withPlugins(slateEditor, {\n      editorActor,\n      maxBlocks,\n      portableTextEditor,\n      readOnly,\n    })\n  }, [editorActor, portableTextEditor, maxBlocks, readOnly, slateEditor])\n\n  const initialValue = useMemo(() => {\n    return [slateEditor.pteCreateTextBlock({decorators: []})]\n  }, [slateEditor])\n\n  useEffect(() => {\n    return () => {\n      debug('Destroying Slate editor')\n      slateEditor.destroy()\n    }\n  }, [slateEditor])\n\n  return (\n    <Slate editor={slateEditor} initialValue={initialValue}>\n      {props.children}\n    </Slate>\n  )\n}\n\nSlateContainer.displayName = 'SlateContainer'\n","import {createContext, useContext} from 'react'\n\n/**\n * A React context for sharing the editor's readOnly status.\n */\nexport const PortableTextEditorReadOnlyContext = createContext<boolean>(false)\n\n/**\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorReadOnlyStatus = (): boolean => {\n  const readOnly = useContext(PortableTextEditorReadOnlyContext)\n\n  if (readOnly === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorReadOnly\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n  return readOnly\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport {debounce, isEqual} from 'lodash'\nimport {useCallback, useMemo, useRef} from 'react'\nimport {Editor, Text, Transforms, type Descendant, type Node} from 'slate'\nimport {useSlate} from 'slate-react'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {validateValue} from '../../utils/validateValue'\nimport {toSlateValue, VOID_CHILD_KEY} from '../../utils/values'\nimport {\n  isChangingLocally,\n  isChangingRemotely,\n  withRemoteChanges,\n} from '../../utils/withChanges'\nimport {withoutPatching} from '../../utils/withoutPatching'\nimport type {EditorActor} from '../editor-machine'\nimport {withoutSaving} from '../plugins/createWithUndoRedo'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('hook:useSyncValue')\n\n/**\n * @internal\n */\nexport interface UseSyncValueProps {\n  editorActor: EditorActor\n  portableTextEditor: PortableTextEditor\n  readOnly: boolean\n}\n\nconst CURRENT_VALUE = new WeakMap<\n  PortableTextEditor,\n  PortableTextBlock[] | undefined\n>()\n\n/**\n * Sync value with the editor state\n *\n * Normally nothing here should apply, and the editor and the real world are perfectly aligned.\n *\n * Inconsistencies could happen though, so we need to check the editor state when the value changes.\n *\n * For performance reasons, it makes sense to also do the content validation here, as we already\n * iterate over the value and can validate only the new content that is actually changed.\n *\n * @internal\n */\nexport function useSyncValue(\n  props: UseSyncValueProps,\n): (\n  value: PortableTextBlock[] | undefined,\n  userCallbackFn?: () => void,\n) => void {\n  const {editorActor, portableTextEditor, readOnly} = props\n  const schemaTypes = editorActor.getSnapshot().context.schema\n  const previousValue = useRef<PortableTextBlock[] | undefined>()\n  const slateEditor = useSlate()\n  const updateValueFunctionRef =\n    useRef<(value: PortableTextBlock[] | undefined) => void>()\n\n  const updateFromCurrentValue = useCallback(() => {\n    const currentValue = CURRENT_VALUE.get(portableTextEditor)\n    if (previousValue.current === currentValue) {\n      debug('Value is the same object as previous, not need to sync')\n      return\n    }\n    if (updateValueFunctionRef.current && currentValue) {\n      debug('Updating the value debounced')\n      updateValueFunctionRef.current(currentValue)\n    }\n  }, [portableTextEditor])\n  const updateValueDebounced = useMemo(\n    () =>\n      debounce(updateFromCurrentValue, 1000, {trailing: true, leading: false}),\n    [updateFromCurrentValue],\n  )\n\n  return useMemo(() => {\n    const updateFunction = (value: PortableTextBlock[] | undefined) => {\n      CURRENT_VALUE.set(portableTextEditor, value)\n      const isProcessingLocalChanges = isChangingLocally(slateEditor)\n      const isProcessingRemoteChanges = isChangingRemotely(slateEditor)\n      if (!readOnly) {\n        if (isProcessingLocalChanges) {\n          debug('Has local changes, not syncing value right now')\n          updateValueDebounced()\n          return\n        }\n        if (isProcessingRemoteChanges) {\n          debug('Has remote changes, not syncing value right now')\n          updateValueDebounced()\n          return\n        }\n      }\n\n      let isChanged = false\n      let isValid = true\n\n      const hadSelection = !!slateEditor.selection\n\n      // If empty value, remove everything in the editor and insert a placeholder block\n      if (!value || value.length === 0) {\n        debug('Value is empty')\n        Editor.withoutNormalizing(slateEditor, () => {\n          withoutSaving(slateEditor, () => {\n            withoutPatching(slateEditor, () => {\n              if (hadSelection) {\n                Transforms.deselect(slateEditor)\n              }\n              const childrenLength = slateEditor.children.length\n              slateEditor.children.forEach((_, index) => {\n                Transforms.removeNodes(slateEditor, {\n                  at: [childrenLength - 1 - index],\n                })\n              })\n              Transforms.insertNodes(\n                slateEditor,\n                slateEditor.pteCreateTextBlock({decorators: []}),\n                {at: [0]},\n              )\n              // Add a new selection in the top of the document\n              if (hadSelection) {\n                Transforms.select(slateEditor, [0, 0])\n              }\n            })\n          })\n        })\n        isChanged = true\n      }\n      // Remove, replace or add nodes according to what is changed.\n      if (value && value.length > 0) {\n        const slateValueFromProps = toSlateValue(value, {\n          schemaTypes,\n        })\n        Editor.withoutNormalizing(slateEditor, () => {\n          withRemoteChanges(slateEditor, () => {\n            withoutSaving(slateEditor, () => {\n              withoutPatching(slateEditor, () => {\n                const childrenLength = slateEditor.children.length\n                // Remove blocks that have become superfluous\n                if (slateValueFromProps.length < childrenLength) {\n                  for (\n                    let i = childrenLength - 1;\n                    i > slateValueFromProps.length - 1;\n                    i--\n                  ) {\n                    Transforms.removeNodes(slateEditor, {\n                      at: [i],\n                    })\n                  }\n                  isChanged = true\n                }\n                // Go through all of the blocks and see if they need to be updated\n                slateValueFromProps.forEach(\n                  (currentBlock, currentBlockIndex) => {\n                    const oldBlock = slateEditor.children[currentBlockIndex]\n                    const hasChanges =\n                      oldBlock && !isEqual(currentBlock, oldBlock)\n                    if (hasChanges && isValid) {\n                      const validationValue = [value[currentBlockIndex]]\n                      const validation = validateValue(\n                        validationValue,\n                        schemaTypes,\n                        editorActor.getSnapshot().context.keyGenerator,\n                      )\n                      // Resolve validations that can be resolved automatically, without involving the user (but only if the value was changed)\n                      if (\n                        !validation.valid &&\n                        validation.resolution?.autoResolve &&\n                        validation.resolution?.patches.length > 0\n                      ) {\n                        // Only apply auto resolution if the value has been populated before and is different from the last one.\n                        if (\n                          !readOnly &&\n                          previousValue.current &&\n                          previousValue.current !== value\n                        ) {\n                          // Give a console warning about the fact that it did an auto resolution\n                          console.warn(\n                            `${validation.resolution.action} for block with _key '${validationValue[0]._key}'. ${validation.resolution?.description}`,\n                          )\n                          validation.resolution.patches.forEach((patch) => {\n                            editorActor.send({type: 'patch', patch})\n                          })\n                        }\n                      }\n                      if (\n                        validation.valid ||\n                        validation.resolution?.autoResolve\n                      ) {\n                        if (oldBlock._key === currentBlock._key) {\n                          if (debug.enabled)\n                            debug('Updating block', oldBlock, currentBlock)\n                          _updateBlock(\n                            slateEditor,\n                            currentBlock,\n                            oldBlock,\n                            currentBlockIndex,\n                          )\n                        } else {\n                          if (debug.enabled)\n                            debug('Replacing block', oldBlock, currentBlock)\n                          _replaceBlock(\n                            slateEditor,\n                            currentBlock,\n                            currentBlockIndex,\n                          )\n                        }\n                        isChanged = true\n                      } else {\n                        editorActor.send({\n                          type: 'invalid value',\n                          resolution: validation.resolution,\n                          value,\n                        })\n                        isValid = false\n                      }\n                    }\n                    if (!oldBlock && isValid) {\n                      const validationValue = [value[currentBlockIndex]]\n                      const validation = validateValue(\n                        validationValue,\n                        schemaTypes,\n                        editorActor.getSnapshot().context.keyGenerator,\n                      )\n                      if (debug.enabled)\n                        debug(\n                          'Validating and inserting new block in the end of the value',\n                          currentBlock,\n                        )\n                      if (\n                        validation.valid ||\n                        validation.resolution?.autoResolve\n                      ) {\n                        Transforms.insertNodes(slateEditor, currentBlock, {\n                          at: [currentBlockIndex],\n                        })\n                      } else {\n                        debug('Invalid', validation)\n                        editorActor.send({\n                          type: 'invalid value',\n                          resolution: validation.resolution,\n                          value,\n                        })\n                        isValid = false\n                      }\n                    }\n                  },\n                )\n              })\n            })\n          })\n        })\n      }\n\n      if (!isValid) {\n        debug('Invalid value, returning')\n        return\n      }\n      if (isChanged) {\n        debug('Server value changed, syncing editor')\n        try {\n          slateEditor.onChange()\n        } catch (err) {\n          console.error(err)\n          editorActor.send({\n            type: 'invalid value',\n            resolution: null,\n            value,\n          })\n          return\n        }\n        if (hadSelection && !slateEditor.selection) {\n          Transforms.select(slateEditor, {\n            anchor: {path: [0, 0], offset: 0},\n            focus: {path: [0, 0], offset: 0},\n          })\n          slateEditor.onChange()\n        }\n        editorActor.send({type: 'value changed', value})\n      } else {\n        debug('Server value and editor value is equal, no need to sync.')\n      }\n      previousValue.current = value\n    }\n    updateValueFunctionRef.current = updateFunction\n    return updateFunction\n  }, [\n    editorActor,\n    portableTextEditor,\n    readOnly,\n    schemaTypes,\n    slateEditor,\n    updateValueDebounced,\n  ])\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _replaceBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // While replacing the block and the current selection focus is on the replaced block,\n  // temporarily deselect the editor then optimistically try to restore the selection afterwards.\n  const currentSelection = slateEditor.selection\n  const selectionFocusOnBlock =\n    currentSelection && currentSelection.focus.path[0] === currentBlockIndex\n  if (selectionFocusOnBlock) {\n    Transforms.deselect(slateEditor)\n  }\n  Transforms.removeNodes(slateEditor, {at: [currentBlockIndex]})\n  Transforms.insertNodes(slateEditor, currentBlock, {at: [currentBlockIndex]})\n  slateEditor.onChange()\n  if (selectionFocusOnBlock) {\n    Transforms.select(slateEditor, currentSelection)\n  }\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _updateBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  oldBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // Update the root props on the block\n  Transforms.setNodes(slateEditor, currentBlock as Partial<Node>, {\n    at: [currentBlockIndex],\n  })\n  // Text block's need to have their children updated as well (setNode does not target a node's children)\n  if (\n    slateEditor.isTextBlock(currentBlock) &&\n    slateEditor.isTextBlock(oldBlock)\n  ) {\n    const oldBlockChildrenLength = oldBlock.children.length\n    if (currentBlock.children.length < oldBlockChildrenLength) {\n      // Remove any children that have become superfluous\n      Array.from(\n        Array(oldBlockChildrenLength - currentBlock.children.length),\n      ).forEach((_, index) => {\n        const childIndex = oldBlockChildrenLength - 1 - index\n        if (childIndex > 0) {\n          debug('Removing child')\n          Transforms.removeNodes(slateEditor, {\n            at: [currentBlockIndex, childIndex],\n          })\n        }\n      })\n    }\n    currentBlock.children.forEach(\n      (currentBlockChild, currentBlockChildIndex) => {\n        const oldBlockChild = oldBlock.children[currentBlockChildIndex]\n        const isChildChanged = !isEqual(currentBlockChild, oldBlockChild)\n        const isTextChanged = !isEqual(\n          currentBlockChild.text,\n          oldBlockChild?.text,\n        )\n        const path = [currentBlockIndex, currentBlockChildIndex]\n        if (isChildChanged) {\n          // Update if this is the same child\n          if (currentBlockChild._key === oldBlockChild?._key) {\n            debug('Updating changed child', currentBlockChild, oldBlockChild)\n            Transforms.setNodes(\n              slateEditor,\n              currentBlockChild as Partial<Node>,\n              {\n                at: path,\n              },\n            )\n            const isSpanNode =\n              Text.isText(currentBlockChild) &&\n              currentBlockChild._type === 'span' &&\n              Text.isText(oldBlockChild) &&\n              oldBlockChild._type === 'span'\n            if (isSpanNode && isTextChanged) {\n              Transforms.delete(slateEditor, {\n                at: {\n                  focus: {path, offset: 0},\n                  anchor: {path, offset: oldBlockChild.text.length},\n                },\n              })\n              Transforms.insertText(slateEditor, currentBlockChild.text, {\n                at: path,\n              })\n              slateEditor.onChange()\n            } else if (!isSpanNode) {\n              // If it's a inline block, also update the void text node key\n              debug('Updating changed inline object child', currentBlockChild)\n              Transforms.setNodes(\n                slateEditor,\n                {_key: VOID_CHILD_KEY},\n                {\n                  at: [...path, 0],\n                  voids: true,\n                },\n              )\n            }\n            // Replace the child if _key's are different\n          } else if (oldBlockChild) {\n            debug('Replacing child', currentBlockChild)\n            Transforms.removeNodes(slateEditor, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n            // Insert it if it didn't exist before\n          } else if (!oldBlockChild) {\n            debug('Inserting new child', currentBlockChild)\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n          }\n        }\n      },\n    )\n  }\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {throttle} from 'lodash'\nimport {useCallback, useEffect, useRef} from 'react'\nimport {Editor} from 'slate'\nimport {useSlate} from 'slate-react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {EditorChange} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport {IS_PROCESSING_LOCAL_CHANGES} from '../../utils/weakMaps'\nimport type {EditorActor} from '../editor-machine'\nimport {usePortableTextEditor} from '../hooks/usePortableTextEditor'\nimport {usePortableTextEditorReadOnlyStatus} from '../hooks/usePortableTextReadOnly'\nimport {useSyncValue} from '../hooks/useSyncValue'\n\nconst debug = debugWithName('component:PortableTextEditor:Synchronizer')\nconst debugVerbose = debug.enabled && false\n\n// The editor will commit changes in a throttled fashion in order\n// not to overload the network and degrade performance while typing.\nconst FLUSH_PATCHES_THROTTLED_MS = process.env.NODE_ENV === 'test' ? 500 : 1000\n\n/**\n * @internal\n */\nexport interface SynchronizerProps {\n  editorActor: EditorActor\n  getValue: () => Array<PortableTextBlock> | undefined\n  onChange: (change: EditorChange) => void\n  value: Array<PortableTextBlock> | undefined\n}\n\n/**\n * Synchronizes the server value with the editor, and provides various contexts for the editor state.\n * @internal\n */\nexport function Synchronizer(props: SynchronizerProps) {\n  const portableTextEditor = usePortableTextEditor()\n  const readOnly = usePortableTextEditorReadOnlyStatus()\n  const {editorActor, getValue, onChange, value} = props\n  const pendingPatches = useRef<Patch[]>([])\n\n  const syncValue = useSyncValue({\n    editorActor,\n    portableTextEditor,\n    readOnly,\n  })\n\n  const slateEditor = useSlate()\n\n  useEffect(() => {\n    IS_PROCESSING_LOCAL_CHANGES.set(slateEditor, false)\n  }, [slateEditor])\n\n  const onFlushPendingPatches = useCallback(() => {\n    if (pendingPatches.current.length > 0) {\n      debug('Flushing pending patches')\n      if (debugVerbose) {\n        debug(`Patches:\\n${JSON.stringify(pendingPatches.current, null, 2)}`)\n      }\n      const snapshot = getValue()\n      editorActor.send({\n        type: 'mutation',\n        patches: pendingPatches.current,\n        snapshot,\n      })\n      pendingPatches.current = []\n    }\n    IS_PROCESSING_LOCAL_CHANGES.set(slateEditor, false)\n  }, [editorActor, slateEditor, getValue])\n\n  // Flush pending patches immediately on unmount\n  useEffect(() => {\n    return () => {\n      onFlushPendingPatches()\n    }\n  }, [onFlushPendingPatches])\n\n  // We want to ensure that _when_ `props.onChange` is called, it uses the current value.\n  // But we don't want to have the `useEffect` run setup + teardown + setup every time the prop might change, as that's unnecessary.\n  // So we use our own polyfill that lets us use an upcoming React hook that solves this exact problem.\n  // https://19.react.dev/learn/separating-events-from-effects#declaring-an-effect-event\n  const handleChange = useEffectEvent((change: EditorChange) =>\n    onChange(change),\n  )\n\n  // Subscribe to, and handle changes from the editor\n  useEffect(() => {\n    const onFlushPendingPatchesThrottled = throttle(\n      () => {\n        // If the editor is normalizing (each operation) it means that it's not in the middle of a bigger transform,\n        // and we can flush these changes immediately.\n        if (Editor.isNormalizing(slateEditor)) {\n          onFlushPendingPatches()\n          return\n        }\n        // If it's in the middle of something, try again.\n        onFlushPendingPatchesThrottled()\n      },\n      FLUSH_PATCHES_THROTTLED_MS,\n      {\n        leading: false,\n        trailing: true,\n      },\n    )\n\n    debug('Subscribing to editor changes')\n    const sub = editorActor.on('*', (event) => {\n      switch (event.type) {\n        case 'patch':\n          IS_PROCESSING_LOCAL_CHANGES.set(slateEditor, true)\n          pendingPatches.current.push(event.patch)\n          onFlushPendingPatchesThrottled()\n          handleChange(event)\n          break\n        case 'loading': {\n          handleChange({type: 'loading', isLoading: true})\n          break\n        }\n        case 'done loading': {\n          handleChange({type: 'loading', isLoading: false})\n          break\n        }\n        case 'offline': {\n          handleChange({type: 'connection', value: 'offline'})\n          break\n        }\n        case 'online': {\n          handleChange({type: 'connection', value: 'online'})\n          break\n        }\n        case 'value changed': {\n          handleChange({type: 'value', value: event.value})\n          break\n        }\n        case 'invalid value': {\n          handleChange({\n            type: 'invalidValue',\n            resolution: event.resolution,\n            value: event.value,\n          })\n          break\n        }\n        case 'error': {\n          handleChange({\n            ...event,\n            level: 'warning',\n          })\n          break\n        }\n        case 'patches': {\n          break\n        }\n        default:\n          handleChange(event)\n      }\n    })\n    return () => {\n      debug('Unsubscribing to changes')\n      sub.unsubscribe()\n    }\n  }, [editorActor, handleChange, onFlushPendingPatches, slateEditor])\n\n  // Sync the value when going online\n  const handleOnline = useCallback(() => {\n    debug('Editor is online, syncing from props.value')\n    syncValue(value)\n  }, [syncValue, value])\n\n  // Notify about window online and offline status changes\n  useEffect(() => {\n    const subscription = editorActor.on('online', handleOnline)\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [handleOnline, editorActor])\n\n  // This hook must be set up after setting up the subscription above, or it will not pick up validation errors from the useSyncValue hook.\n  // This will cause the editor to not be able to signal a validation error and offer invalid value resolution of the initial value.\n  const isInitialValueFromProps = useRef(true)\n  useEffect(() => {\n    debug('Value from props changed, syncing new value')\n    syncValue(value)\n    // Signal that we have our first value, and are ready to roll.\n    if (isInitialValueFromProps.current) {\n      editorActor.send({type: 'ready'})\n      isInitialValueFromProps.current = false\n    }\n  }, [editorActor, syncValue, value])\n\n  return null\n}\n\nSynchronizer.displayName = 'Synchronizer'\n","import {createContext} from 'react'\nimport type {EditorActor} from './editor-machine'\n\nexport const EditorActorContext = createContext<EditorActor>({} as EditorActor)\n","import {isEqual} from 'lodash'\nimport {Editor, Node, Path, Range, Transforms} from 'slate'\nimport type {SlateTextBlock, VoidElement} from '../../types/slate'\nimport type {BehaviourActionImplementation} from './behavior.actions'\nimport type {BehaviorAction, PickFromUnion} from './behavior.types'\n\nexport const insertBreakActionImplementation: BehaviourActionImplementation<\n  PickFromUnion<BehaviorAction, 'type', 'insert break' | 'insert soft break'>\n> = ({context, action}) => {\n  const keyGenerator = context.keyGenerator\n  const schema = context.schema\n  const editor = action.editor\n\n  if (!editor.selection) {\n    return\n  }\n\n  const [focusSpan] = Array.from(\n    Editor.nodes(editor, {\n      mode: 'lowest',\n      at: editor.selection.focus,\n      match: (n) => editor.isTextSpan(n),\n      voids: false,\n    }),\n  )[0] ?? [undefined]\n  const focusDecorators =\n    focusSpan.marks?.filter((mark) =>\n      schema.decorators.some((decorator) => decorator.value === mark),\n    ) ?? []\n  const focusAnnotations =\n    focusSpan.marks?.filter(\n      (mark) =>\n        !schema.decorators.some((decorator) => decorator.value === mark),\n    ) ?? []\n\n  const focusBlockPath = editor.selection.focus.path.slice(0, 1)\n  const focusBlock = Node.descendant(editor, focusBlockPath) as\n    | SlateTextBlock\n    | VoidElement\n\n  if (editor.isTextBlock(focusBlock)) {\n    const [start, end] = Range.edges(editor.selection)\n    const atTheStartOfBlock = isEqual(end, {\n      path: [...focusBlockPath, 0],\n      offset: 0,\n    })\n\n    if (atTheStartOfBlock && Range.isCollapsed(editor.selection)) {\n      Editor.insertNode(\n        editor,\n        editor.pteCreateTextBlock({\n          decorators: focusAnnotations.length === 0 ? focusDecorators : [],\n          listItem: focusBlock.listItem,\n          level: focusBlock.level,\n        }),\n      )\n\n      const [nextBlockPath] = Path.next(focusBlockPath)\n\n      Transforms.select(editor, {\n        anchor: {path: [nextBlockPath, 0], offset: 0},\n        focus: {path: [nextBlockPath, 0], offset: 0},\n      })\n\n      return\n    }\n\n    const lastFocusBlockChild =\n      focusBlock.children[focusBlock.children.length - 1]\n    const atTheEndOfBlock = isEqual(start, {\n      path: [...focusBlockPath, focusBlock.children.length - 1],\n      offset: editor.isTextSpan(lastFocusBlockChild)\n        ? lastFocusBlockChild.text.length\n        : 0,\n    })\n\n    if (atTheEndOfBlock && Range.isCollapsed(editor.selection)) {\n      Editor.insertNode(\n        editor,\n        editor.pteCreateTextBlock({\n          decorators: [],\n          listItem: focusBlock.listItem,\n          level: focusBlock.level,\n        }),\n      )\n\n      const [nextBlockPath] = Path.next(focusBlockPath)\n\n      Transforms.setSelection(editor, {\n        anchor: {path: [nextBlockPath, 0], offset: 0},\n        focus: {path: [nextBlockPath, 0], offset: 0},\n      })\n\n      return\n    }\n\n    const isInTheMiddleOfNode = !atTheStartOfBlock && !atTheEndOfBlock\n\n    if (isInTheMiddleOfNode) {\n      Editor.withoutNormalizing(editor, () => {\n        if (!editor.selection) {\n          return\n        }\n\n        Transforms.splitNodes(editor, {\n          at: editor.selection,\n        })\n\n        const [nextNode, nextNodePath] = Editor.node(\n          editor,\n          Path.next(focusBlockPath),\n          {depth: 1},\n        )\n\n        Transforms.setSelection(editor, {\n          anchor: {path: [...nextNodePath, 0], offset: 0},\n          focus: {path: [...nextNodePath, 0], offset: 0},\n        })\n\n        /**\n         * Assign new keys to markDefs that are now split across two blocks\n         */\n        if (\n          editor.isTextBlock(nextNode) &&\n          nextNode.markDefs &&\n          nextNode.markDefs.length > 0\n        ) {\n          const newMarkDefKeys = new Map<string, string>()\n\n          const prevNodeSpans = Array.from(\n            Node.children(editor, focusBlockPath),\n          )\n            .map((entry) => entry[0])\n            .filter((node) => editor.isTextSpan(node))\n          const children = Node.children(editor, nextNodePath)\n\n          for (const [child, childPath] of children) {\n            if (!editor.isTextSpan(child)) {\n              continue\n            }\n\n            const marks = child.marks ?? []\n\n            // Go through the marks of the span and figure out if any of\n            // them refer to annotations that are also present in the\n            // previous block\n            for (const mark of marks) {\n              if (\n                schema.decorators.some((decorator) => decorator.value === mark)\n              ) {\n                continue\n              }\n\n              if (\n                prevNodeSpans.some((prevNodeSpan) =>\n                  prevNodeSpan.marks?.includes(mark),\n                ) &&\n                !newMarkDefKeys.has(mark)\n              ) {\n                // This annotation is both present in the previous block\n                // and this block, so let's assign a new key to it\n                newMarkDefKeys.set(mark, keyGenerator())\n              }\n            }\n\n            const newMarks = marks.map(\n              (mark) => newMarkDefKeys.get(mark) ?? mark,\n            )\n\n            // No need to update the marks if they are the same\n            if (!isEqual(marks, newMarks)) {\n              Transforms.setNodes(\n                editor,\n                {marks: newMarks},\n                {\n                  at: childPath,\n                },\n              )\n            }\n          }\n\n          // Time to update all the markDefs that need a new key because\n          // they've been split across blocks\n          const newMarkDefs = nextNode.markDefs.map((markDef) => ({\n            ...markDef,\n            _key: newMarkDefKeys.get(markDef._key) ?? markDef._key,\n          }))\n\n          // No need to update the markDefs if they are the same\n          if (!isEqual(nextNode.markDefs, newMarkDefs)) {\n            Transforms.setNodes(\n              editor,\n              {markDefs: newMarkDefs},\n              {\n                at: nextNodePath,\n                match: (node) => editor.isTextBlock(node),\n              },\n            )\n          }\n        }\n      })\n      editor.onChange()\n      return\n    }\n  }\n}\n","import {\n  deleteBackward,\n  deleteForward,\n  Editor,\n  insertText,\n  Transforms,\n} from 'slate'\nimport type {PortableTextMemberSchemaTypes} from '../../types/editor'\nimport {toSlateRange} from '../../utils/ranges'\nimport {insertBreakActionImplementation} from './behavior.action.insert-break'\nimport type {\n  BehaviorAction,\n  BehaviorEvent,\n  PickFromUnion,\n} from './behavior.types'\n\nexport type BehaviorActionContext = {\n  keyGenerator: () => string\n  schema: PortableTextMemberSchemaTypes\n}\n\nexport type BehaviourActionImplementation<\n  TBehaviorAction extends BehaviorAction,\n> = ({\n  context,\n  action,\n}: {\n  context: BehaviorActionContext\n  action: TBehaviorAction\n}) => void\n\ntype BehaviourActionImplementations = {\n  [TBehaviorActionType in BehaviorAction['type']]: BehaviourActionImplementation<\n    PickFromUnion<BehaviorAction, 'type', TBehaviorActionType>\n  >\n}\n\nconst behaviorActionImplementations: BehaviourActionImplementations = {\n  'set block': ({action}) => {\n    for (const path of action.paths) {\n      const at = toSlateRange(\n        {anchor: {path, offset: 0}, focus: {path, offset: 0}},\n        action.editor,\n      )!\n\n      Transforms.setNodes(\n        action.editor,\n        {\n          ...(action.style ? {style: action.style} : {}),\n          ...(action.listItem ? {listItem: action.listItem} : {}),\n          ...(action.level ? {level: action.level} : {}),\n        },\n        {at},\n      )\n    }\n  },\n  'unset block': ({action}) => {\n    for (const path of action.paths) {\n      const at = toSlateRange(\n        {anchor: {path, offset: 0}, focus: {path, offset: 0}},\n        action.editor,\n      )!\n\n      Transforms.unsetNodes(action.editor, action.props, {at})\n    }\n  },\n  'delete backward': ({action}) => {\n    deleteBackward(action.editor, action.unit)\n  },\n  'delete forward': ({action}) => {\n    deleteForward(action.editor, action.unit)\n  },\n  'delete': ({action}) => {\n    const location = toSlateRange(action.selection, action.editor)\n\n    if (!location) {\n      console.error(\n        `Could not find Slate location from selection ${action.selection}`,\n      )\n      return\n    }\n\n    if (location.anchor.path.length === 1 && location.focus.path.length === 1) {\n      Transforms.removeNodes(action.editor, {\n        at: location,\n      })\n    } else {\n      Transforms.delete(action.editor, {\n        at: location,\n      })\n    }\n  },\n  'insert break': insertBreakActionImplementation,\n  // This mimics Slate's internal which also just does a regular insert break\n  // when on soft break\n  'insert soft break': insertBreakActionImplementation,\n  'insert text': ({action}) => {\n    insertText(action.editor, action.text)\n  },\n  'insert text block': ({context, action}) => {\n    Editor.insertNode(action.editor, {\n      _key: context.keyGenerator(),\n      _type: context.schema.block.name,\n      style: context.schema.styles[0].value ?? 'normal',\n      markDefs: [],\n      children: [\n        {\n          _key: context.keyGenerator(),\n          _type: 'span',\n          text: '',\n        },\n      ],\n    })\n  },\n  'effect': ({action}) => {\n    action.effect()\n  },\n  'select': ({action}) => {\n    Transforms.select(\n      action.editor,\n      toSlateRange(action.selection, action.editor)!,\n    )\n  },\n}\n\nexport function performAction({\n  context,\n  action,\n}: {\n  context: BehaviorActionContext\n  action: BehaviorAction\n}) {\n  switch (action.type) {\n    case 'delete': {\n      behaviorActionImplementations.delete({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert text block': {\n      behaviorActionImplementations['insert text block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'set block': {\n      behaviorActionImplementations['set block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'unset block': {\n      behaviorActionImplementations['unset block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'effect': {\n      behaviorActionImplementations.effect({\n        context,\n        action,\n      })\n      break\n    }\n    case 'select': {\n      behaviorActionImplementations.select({\n        context,\n        action,\n      })\n      break\n    }\n    default: {\n      performDefaultAction({context, action})\n    }\n  }\n}\n\nexport function performDefaultAction({\n  context,\n  action,\n}: {\n  context: BehaviorActionContext\n  action: PickFromUnion<BehaviorAction, 'type', BehaviorEvent['type']>\n}) {\n  switch (action.type) {\n    case 'delete backward': {\n      behaviorActionImplementations['delete backward']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete forward': {\n      behaviorActionImplementations['delete forward']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert break': {\n      behaviorActionImplementations['insert break']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert soft break': {\n      behaviorActionImplementations['insert soft break']({\n        context,\n        action,\n      })\n      break\n    }\n    default: {\n      behaviorActionImplementations['insert text']({\n        context,\n        action,\n      })\n    }\n  }\n}\n","import {isPortableTextTextBlock} from '@sanity/types'\nimport {defineBehavior} from './behavior.types'\nimport {\n  getFocusBlockObject,\n  getFocusTextBlock,\n  getNextBlock,\n  getPreviousBlock,\n  isEmptyTextBlock,\n  selectionIsCollapsed,\n} from './behavior.utils'\n\nconst breakingVoidBlock = defineBehavior({\n  on: 'insert break',\n  guard: ({context}) => {\n    const focusBlockObject = getFocusBlockObject(context)\n\n    return !!focusBlockObject\n  },\n  actions: [() => [{type: 'insert text block', decorators: []}]],\n})\n\nconst deletingEmptyTextBlockAfterBlockObject = defineBehavior({\n  on: 'delete backward',\n  guard: ({context}) => {\n    const focusTextBlock = getFocusTextBlock(context)\n    const selectionCollapsed = selectionIsCollapsed(context)\n    const previousBlock = getPreviousBlock(context)\n\n    if (!focusTextBlock || !selectionCollapsed || !previousBlock) {\n      return false\n    }\n\n    if (\n      isEmptyTextBlock(focusTextBlock.node) &&\n      !isPortableTextTextBlock(previousBlock.node)\n    ) {\n      return {focusTextBlock, previousBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, previousBlock}) => [\n      {\n        type: 'delete',\n        selection: {\n          anchor: {path: focusTextBlock.path, offset: 0},\n          focus: {path: focusTextBlock.path, offset: 0},\n        },\n      },\n      {\n        type: 'select',\n        selection: {\n          anchor: {path: previousBlock.path, offset: 0},\n          focus: {path: previousBlock.path, offset: 0},\n        },\n      },\n    ],\n  ],\n})\n\nconst deletingEmptyTextBlockBeforeBlockObject = defineBehavior({\n  on: 'delete forward',\n  guard: ({context}) => {\n    const focusTextBlock = getFocusTextBlock(context)\n    const selectionCollapsed = selectionIsCollapsed(context)\n    const nextBlock = getNextBlock(context)\n\n    if (!focusTextBlock || !selectionCollapsed || !nextBlock) {\n      return false\n    }\n\n    if (\n      isEmptyTextBlock(focusTextBlock.node) &&\n      !isPortableTextTextBlock(nextBlock.node)\n    ) {\n      return {focusTextBlock, nextBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, nextBlock}) => [\n      {\n        type: 'delete',\n        selection: {\n          anchor: {path: focusTextBlock.path, offset: 0},\n          focus: {path: focusTextBlock.path, offset: 0},\n        },\n      },\n      {\n        type: 'select',\n        selection: {\n          anchor: {path: nextBlock.path, offset: 0},\n          focus: {path: nextBlock.path, offset: 0},\n        },\n      },\n    ],\n  ],\n})\n\nexport const coreBlockObjectBehaviors = [\n  breakingVoidBlock,\n  deletingEmptyTextBlockAfterBlockObject,\n  deletingEmptyTextBlockBeforeBlockObject,\n]\n","import {defineBehavior} from './behavior.types'\nimport {\n  getFocusSpan,\n  getFocusTextBlock,\n  selectionIsCollapsed,\n} from './behavior.utils'\n\nconst clearListOnBackspace = defineBehavior({\n  on: 'delete backward',\n  guard: ({context}) => {\n    const selectionCollapsed = selectionIsCollapsed(context)\n    const focusTextBlock = getFocusTextBlock(context)\n    const focusSpan = getFocusSpan(context)\n\n    if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n      return false\n    }\n\n    const atTheBeginningOfBLock =\n      focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n      context.selection.focus.offset === 0\n\n    if (atTheBeginningOfBLock && focusTextBlock.node.level === 1) {\n      return {focusTextBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock}) => [\n      {\n        type: 'unset block',\n        props: ['listItem', 'level'],\n        paths: [focusTextBlock.path],\n      },\n    ],\n  ],\n})\n\nconst unindentListOnBackspace = defineBehavior({\n  on: 'delete backward',\n  guard: ({context}) => {\n    const selectionCollapsed = selectionIsCollapsed(context)\n    const focusTextBlock = getFocusTextBlock(context)\n    const focusSpan = getFocusSpan(context)\n\n    if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n      return false\n    }\n\n    const atTheBeginningOfBLock =\n      focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n      context.selection.focus.offset === 0\n\n    if (\n      atTheBeginningOfBLock &&\n      focusTextBlock.node.level !== undefined &&\n      focusTextBlock.node.level > 1\n    ) {\n      return {focusTextBlock, level: focusTextBlock.node.level - 1}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, level}) => [\n      {\n        type: 'set block',\n        level,\n        paths: [focusTextBlock.path],\n      },\n    ],\n  ],\n})\n\nexport const coreListBehaviors = [clearListOnBackspace, unindentListOnBackspace]\n","import {coreBlockObjectBehaviors} from './behavior.core.block-objects'\nimport {coreListBehaviors} from './behavior.core.lists'\nimport {defineBehavior} from './behavior.types'\n\nconst softReturn = defineBehavior({\n  on: 'insert soft break',\n  actions: [() => [{type: 'insert text', text: '\\n'}]],\n})\n\nexport const coreBehaviors = [\n  softReturn,\n  ...coreBlockObjectBehaviors,\n  ...coreListBehaviors,\n]\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport type {FocusEvent} from 'react'\nimport {Editor} from 'slate'\nimport {\n  assertEvent,\n  assign,\n  emit,\n  enqueueActions,\n  fromCallback,\n  setup,\n  type ActorRefFrom,\n} from 'xstate'\nimport type {\n  EditorSelection,\n  InvalidValueResolution,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport {toPortableTextRange} from '../utils/ranges'\nimport {fromSlateValue} from '../utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../utils/weakMaps'\nimport {performAction, performDefaultAction} from './behavior/behavior.actions'\nimport {coreBehaviors} from './behavior/behavior.core'\nimport type {\n  Behavior,\n  BehaviorAction,\n  BehaviorActionIntend,\n  BehaviorContext,\n  BehaviorEvent,\n} from './behavior/behavior.types'\n\n/**\n * @internal\n */\nexport type EditorActor = ActorRefFrom<typeof editorMachine>\n\nconst networkLogic = fromCallback(({sendBack}) => {\n  const onlineHandler = () => {\n    sendBack({type: 'online'})\n  }\n  const offlineHandler = () => {\n    sendBack({type: 'offline'})\n  }\n\n  window.addEventListener('online', onlineHandler)\n  window.addEventListener('offline', offlineHandler)\n\n  return () => {\n    window.removeEventListener('online', onlineHandler)\n    window.removeEventListener('offline', offlineHandler)\n  }\n})\n\n/**\n * @internal\n */\nexport type PatchEvent = {type: 'patch'; patch: Patch}\n\n/**\n * @internal\n */\nexport type PatchesEvent = {\n  type: 'patches'\n  patches: Array<Patch>\n  snapshot: Array<PortableTextBlock> | undefined\n}\n\n/**\n * @internal\n */\nexport type MutationEvent = {\n  type: 'mutation'\n  patches: Array<Patch>\n  snapshot: Array<PortableTextBlock> | undefined\n}\n\ntype EditorEvent =\n  | {type: 'normalizing'}\n  | {type: 'done normalizing'}\n  | {\n      type: 'behavior event'\n      behaviorEvent: BehaviorEvent\n      editor: PortableTextSlateEditor\n    }\n  | {\n      type: 'behavior action intends'\n      editor: PortableTextSlateEditor\n      actionIntends: Array<BehaviorActionIntend>\n    }\n  | {\n      type: 'update schema'\n      schema: PortableTextMemberSchemaTypes\n    }\n  | {\n      type: 'update behaviors'\n      behaviors: Array<Behavior>\n    }\n  | EditorEmittedEvent\n\ntype EditorEmittedEvent =\n  | {type: 'ready'}\n  | PatchEvent\n  | PatchesEvent\n  | MutationEvent\n  | {\n      type: 'unset'\n      previousValue: Array<PortableTextBlock>\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'error'\n      name: string\n      description: string\n      data: unknown\n    }\n  | {type: 'selection'; selection: EditorSelection}\n  | {type: 'blur'; event: FocusEvent<HTMLDivElement, Element>}\n  | {type: 'focus'; event: FocusEvent<HTMLDivElement, Element>}\n  | {type: 'online'}\n  | {type: 'offline'}\n  | {type: 'loading'}\n  | {type: 'done loading'}\n\n/**\n * @internal\n */\nexport const editorMachine = setup({\n  types: {\n    context: {} as {\n      behaviors: Array<Behavior>\n      keyGenerator: () => string\n      pendingEvents: Array<PatchEvent | MutationEvent>\n      schema: PortableTextMemberSchemaTypes\n    },\n    events: {} as EditorEvent,\n    emitted: {} as EditorEmittedEvent,\n    input: {} as {\n      behaviors?: Array<Behavior>\n      keyGenerator: () => string\n      schema: PortableTextMemberSchemaTypes\n    },\n  },\n  actions: {\n    'assign behaviors': assign({\n      behaviors: ({event}) => {\n        assertEvent(event, 'update behaviors')\n        return [...coreBehaviors, ...event.behaviors]\n      },\n    }),\n    'assign schema': assign({\n      schema: ({event}) => {\n        assertEvent(event, 'update schema')\n        return event.schema\n      },\n    }),\n    'emit patch event': emit(({event}) => {\n      assertEvent(event, 'patch')\n      return event\n    }),\n    'emit mutation event': emit(({event}) => {\n      assertEvent(event, 'mutation')\n      return event\n    }),\n    'defer event': assign({\n      pendingEvents: ({context, event}) => {\n        assertEvent(event, ['patch', 'mutation'])\n        return [...context.pendingEvents, event]\n      },\n    }),\n    'emit pending events': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingEvents) {\n        enqueue(emit(event))\n      }\n    }),\n    'clear pending events': assign({\n      pendingEvents: [],\n    }),\n    'handle behavior event': enqueueActions(({context, event, enqueue}) => {\n      assertEvent(event, ['behavior event'])\n\n      const defaultAction = {\n        ...event.behaviorEvent,\n        editor: event.editor,\n      } satisfies BehaviorAction\n\n      const eventBehaviors = context.behaviors.filter(\n        (behavior) => behavior.on === event.behaviorEvent.type,\n      )\n\n      if (eventBehaviors.length === 0) {\n        performDefaultAction({context, action: defaultAction})\n        return\n      }\n\n      const value = fromSlateValue(\n        event.editor.children,\n        context.schema.block.name,\n        KEY_TO_VALUE_ELEMENT.get(event.editor),\n      )\n      const selection = toPortableTextRange(\n        value,\n        event.editor.selection,\n        context.schema,\n      )\n\n      if (!selection) {\n        console.warn(\n          `Unable to handle event ${event.type} due to missing selection`,\n        )\n        performDefaultAction({context, action: defaultAction})\n        return\n      }\n\n      const behaviorContext = {\n        schema: context.schema,\n        value,\n        selection,\n      } satisfies BehaviorContext\n\n      let behaviorOverwritten = false\n\n      for (const eventBehavior of eventBehaviors) {\n        const shouldRun =\n          eventBehavior.guard?.({\n            context: behaviorContext,\n            event: event.behaviorEvent,\n          }) ?? true\n\n        if (!shouldRun) {\n          continue\n        }\n\n        const actionIntendSets = eventBehavior.actions.map((actionSet) =>\n          actionSet(\n            {context: behaviorContext, event: event.behaviorEvent},\n            shouldRun,\n          ),\n        )\n\n        for (const actionIntends of actionIntendSets) {\n          behaviorOverwritten =\n            actionIntends.length > 0 &&\n            actionIntends.some((actionIntend) => actionIntend.type !== 'effect')\n\n          enqueue.raise({\n            type: 'behavior action intends',\n            editor: event.editor,\n            actionIntends,\n          })\n        }\n\n        if (behaviorOverwritten) {\n          break\n        }\n      }\n\n      if (!behaviorOverwritten) {\n        performDefaultAction({context, action: defaultAction})\n      }\n    }),\n  },\n  actors: {\n    networkLogic,\n  },\n}).createMachine({\n  id: 'editor',\n  context: ({input}) => ({\n    behaviors: input.behaviors\n      ? [...coreBehaviors, ...input.behaviors]\n      : coreBehaviors,\n    keyGenerator: input.keyGenerator,\n    pendingEvents: [],\n    schema: input.schema,\n  }),\n  invoke: {\n    id: 'networkLogic',\n    src: 'networkLogic',\n  },\n  on: {\n    'ready': {actions: emit(({event}) => event)},\n    'unset': {actions: emit(({event}) => event)},\n    'value changed': {actions: emit(({event}) => event)},\n    'invalid value': {actions: emit(({event}) => event)},\n    'error': {actions: emit(({event}) => event)},\n    'selection': {actions: emit(({event}) => event)},\n    'blur': {actions: emit(({event}) => event)},\n    'focus': {actions: emit(({event}) => event)},\n    'online': {actions: emit({type: 'online'})},\n    'offline': {actions: emit({type: 'offline'})},\n    'loading': {actions: emit({type: 'loading'})},\n    'patches': {actions: emit(({event}) => event)},\n    'done loading': {actions: emit({type: 'done loading'})},\n    'update behaviors': {actions: 'assign behaviors'},\n    'update schema': {actions: 'assign schema'},\n    'behavior event': {actions: 'handle behavior event'},\n    'behavior action intends': {\n      actions: [\n        ({context, event}) => {\n          Editor.withoutNormalizing(event.editor, () => {\n            for (const actionIntend of event.actionIntends) {\n              const action = {\n                ...actionIntend,\n                editor: event.editor,\n              }\n\n              performAction({context, action})\n            }\n          })\n          event.editor.onChange()\n        },\n      ],\n    },\n  },\n  initial: 'pristine',\n  states: {\n    pristine: {\n      initial: 'idle',\n      states: {\n        idle: {\n          on: {\n            normalizing: {\n              target: 'normalizing',\n            },\n            patch: {\n              actions: 'defer event',\n              target: '#editor.dirty',\n            },\n            mutation: {\n              actions: 'defer event',\n              target: '#editor.dirty',\n            },\n          },\n        },\n        normalizing: {\n          on: {\n            'done normalizing': {\n              target: 'idle',\n            },\n            'patch': {\n              actions: 'defer event',\n            },\n            'mutation': {\n              actions: 'defer event',\n            },\n          },\n        },\n      },\n    },\n    dirty: {\n      entry: ['emit pending events', 'clear pending events'],\n      on: {\n        patch: {\n          actions: 'emit patch event',\n        },\n        mutation: {\n          actions: 'emit mutation event',\n        },\n      },\n    },\n  },\n})\n","import {\n  createContext,\n  startTransition,\n  useContext,\n  useEffect,\n  useState,\n} from 'react'\nimport type {EditorSelection} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * A React context for sharing the editor selection.\n */\nconst PortableTextEditorSelectionContext =\n  createContext<EditorSelection | null>(null)\n\n/**\n * @public\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorSelection = (): EditorSelection => {\n  const selection = useContext(PortableTextEditorSelectionContext)\n\n  if (selection === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorSelection\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n  return selection\n}\nconst debug = debugWithName('component:PortableTextEditor:SelectionProvider')\nconst debugVerbose = debug.enabled && false\n\n/**\n * @internal\n */\nexport function PortableTextEditorSelectionProvider(\n  props: React.PropsWithChildren<{\n    editorActor: EditorActor\n  }>,\n) {\n  const [selection, setSelection] = useState<EditorSelection>(null)\n\n  // Subscribe to, and handle changes from the editor\n  useEffect(() => {\n    debug('Subscribing to selection changes')\n    const subscription = props.editorActor.on('selection', (event) => {\n      // Set the selection state in a transition, we don't need the state immediately.\n      startTransition(() => {\n        if (debugVerbose) debug('Setting selection')\n        setSelection(event.selection)\n      })\n    })\n\n    return () => {\n      debug('Unsubscribing to selection changes')\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor])\n\n  return (\n    <PortableTextEditorSelectionContext.Provider value={selection}>\n      {props.children}\n    </PortableTextEditorSelectionContext.Provider>\n  )\n}\n","import {randomKey} from '@sanity/util/content'\n\n/**\n * @public\n */\nexport const defaultKeyGenerator = (): string => randomKey(12)\n","import type {\n  ArrayDefinition,\n  ArraySchemaType,\n  BlockSchemaType,\n  ObjectSchemaType,\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  SpanSchemaType,\n} from '@sanity/types'\nimport {\n  Component,\n  useEffect,\n  type MutableRefObject,\n  type PropsWithChildren,\n} from 'react'\nimport {Subject} from 'rxjs'\nimport {createActor} from 'xstate'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorChange,\n  EditorChanges,\n  EditorSelection,\n  PatchObservable,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {debugWithName} from '../utils/debug'\nimport {getPortableTextMemberSchemaTypes} from '../utils/getPortableTextMemberSchemaTypes'\nimport {compileType} from '../utils/schema'\nimport {SlateContainer} from './components/SlateContainer'\nimport {Synchronizer} from './components/Synchronizer'\nimport {EditorActorContext} from './editor-actor-context'\nimport {editorMachine, type EditorActor} from './editor-machine'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {PortableTextEditorSelectionProvider} from './hooks/usePortableTextEditorSelection'\nimport {PortableTextEditorReadOnlyContext} from './hooks/usePortableTextReadOnly'\nimport {defaultKeyGenerator} from './key-generator'\nimport type {Editor} from './use-editor'\n\nconst debug = debugWithName('component:PortableTextEditor')\n\n/**\n * Props for the PortableTextEditor component\n *\n * @public\n */\nexport type PortableTextEditorProps<\n  TEditor extends Editor | undefined = undefined,\n> = PropsWithChildren<\n  (TEditor extends Editor\n    ? {\n        /**\n         * @alpha\n         */\n        editor: TEditor\n      }\n    : {\n        editor?: undefined\n\n        /**\n         * Function that gets called when the editor changes the value\n         */\n        onChange: (change: EditorChange) => void\n\n        /**\n         * Schema type for the portable text field\n         */\n        schemaType: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n\n        /**\n         * Maximum number of blocks to allow within the editor\n         */\n        maxBlocks?: number | string\n\n        /**\n         * Function used to generate keys for array items (`_key`)\n         */\n        keyGenerator?: () => string\n\n        /**\n         * Observable of local and remote patches for the edited value.\n         */\n        patches$?: PatchObservable\n\n        /**\n         * Backward compatibility (renamed to patches$).\n         */\n        incomingPatches$?: PatchObservable\n      }) & {\n    /**\n     * Whether or not the editor should be in read-only mode\n     */\n    readOnly?: boolean\n\n    /**\n     * The current value of the portable text field\n     */\n    value?: PortableTextBlock[]\n\n    /**\n     * A ref to the editor instance\n     */\n    editorRef?: MutableRefObject<PortableTextEditor | null>\n  }\n>\n\n/**\n * The main Portable Text Editor component.\n * @public\n */\nexport class PortableTextEditor extends Component<\n  PortableTextEditorProps<Editor | undefined>\n> {\n  public static displayName = 'PortableTextEditor'\n  /**\n   * An observable of all the editor changes.\n   */\n  public change$: EditorChanges = new Subject()\n  /**\n   * A lookup table for all the relevant schema types for this portable text type.\n   */\n  public schemaTypes: PortableTextMemberSchemaTypes\n  /**\n   * The editor API (currently implemented with Slate).\n   */\n  private editable?: EditableAPI\n  private editorActor: EditorActor\n\n  constructor(props: PortableTextEditorProps) {\n    super(props)\n\n    if (props.editor) {\n      this.editorActor = props.editor\n      this.editorActor.start()\n      this.schemaTypes = this.editorActor.getSnapshot().context.schema\n    } else {\n      if (!props.schemaType) {\n        throw new Error('PortableTextEditor: missing \"schemaType\" property')\n      }\n\n      if (props.incomingPatches$) {\n        console.warn(\n          `The prop 'incomingPatches$' is deprecated and renamed to 'patches$'`,\n        )\n      }\n\n      this.schemaTypes = getPortableTextMemberSchemaTypes(\n        props.schemaType.hasOwnProperty('jsonType')\n          ? props.schemaType\n          : compileType(props.schemaType),\n      )\n\n      this.editorActor =\n        props.editor ??\n        createActor(editorMachine, {\n          input: {\n            keyGenerator: props.keyGenerator || defaultKeyGenerator,\n            schema: this.schemaTypes,\n          },\n        })\n      this.editorActor.start()\n    }\n  }\n\n  componentDidUpdate(prevProps: PortableTextEditorProps) {\n    // Set up the schema type lookup table again if the source schema type changes\n    if (\n      !this.props.editor &&\n      !prevProps.editor &&\n      this.props.schemaType !== prevProps.schemaType\n    ) {\n      this.schemaTypes = getPortableTextMemberSchemaTypes(\n        this.props.schemaType.hasOwnProperty('jsonType')\n          ? this.props.schemaType\n          : compileType(this.props.schemaType),\n      )\n\n      this.editorActor.send({\n        type: 'update schema',\n        schema: this.schemaTypes,\n      })\n    }\n\n    if (this.props.editorRef !== prevProps.editorRef && this.props.editorRef) {\n      this.props.editorRef.current = this\n    }\n  }\n\n  public setEditable = (editable: EditableAPI) => {\n    this.editable = {...this.editable, ...editable}\n  }\n\n  private getValue = () => {\n    if (this.editable) {\n      return this.editable.getValue()\n    }\n\n    return undefined\n  }\n\n  render() {\n    const maxBlocks = !this.props.editor\n      ? typeof this.props.maxBlocks === 'undefined'\n        ? undefined\n        : Number.parseInt(this.props.maxBlocks.toString(), 10) || undefined\n      : undefined\n\n    const readOnly = Boolean(this.props.readOnly)\n    const legacyPatches = !this.props.editor\n      ? (this.props.incomingPatches$ ?? this.props.patches$)\n      : undefined\n\n    return (\n      <>\n        {legacyPatches ? (\n          <RoutePatchesObservableToEditorActor\n            editorActor={this.editorActor}\n            patches$={legacyPatches}\n          />\n        ) : null}\n        <EditorActorContext.Provider value={this.editorActor}>\n          <SlateContainer\n            editorActor={this.editorActor}\n            maxBlocks={maxBlocks}\n            portableTextEditor={this}\n            readOnly={readOnly}\n          >\n            <PortableTextEditorContext.Provider value={this}>\n              <PortableTextEditorReadOnlyContext.Provider value={readOnly}>\n                <PortableTextEditorSelectionProvider\n                  editorActor={this.editorActor}\n                >\n                  <Synchronizer\n                    editorActor={this.editorActor}\n                    getValue={this.getValue}\n                    onChange={(change) => {\n                      if (!this.props.editor) {\n                        this.props.onChange(change)\n                      }\n                      /**\n                       * For backwards compatibility, we relay all changes to the\n                       * `change$` Subject as well.\n                       */\n                      this.change$.next(change)\n                    }}\n                    value={this.props.value}\n                  />\n                  {this.props.children}\n                </PortableTextEditorSelectionProvider>\n              </PortableTextEditorReadOnlyContext.Provider>\n            </PortableTextEditorContext.Provider>\n          </SlateContainer>\n        </EditorActorContext.Provider>\n      </>\n    )\n  }\n\n  // Static API methods\n  static activeAnnotations = (\n    editor: PortableTextEditor,\n  ): PortableTextObject[] => {\n    return editor && editor.editable ? editor.editable.activeAnnotations() : []\n  }\n  static isAnnotationActive = (\n    editor: PortableTextEditor,\n    annotationType: PortableTextObject['_type'],\n  ): boolean => {\n    return editor && editor.editable\n      ? editor.editable.isAnnotationActive(annotationType)\n      : false\n  }\n  static addAnnotation = (\n    editor: PortableTextEditor,\n    type: ObjectSchemaType,\n    value?: {[prop: string]: unknown},\n  ):\n    | {\n        /**\n         * @deprecated An annotation may be applied to multiple blocks, resulting\n         * in multiple `markDef`'s being created. Use `markDefPaths` instead.\n         */\n        markDefPath: Path\n        markDefPaths: Array<Path>\n        /**\n         * @deprecated Does not return anything meaningful since an annotation\n         * can span multiple blocks and spans. If references the span closest\n         * to the focus point of the selection.\n         */\n        spanPath: Path\n      }\n    | undefined => editor.editable?.addAnnotation(type, value)\n  static blur = (editor: PortableTextEditor): void => {\n    debug('Host blurred')\n    editor.editable?.blur()\n  }\n  static delete = (\n    editor: PortableTextEditor,\n    selection: EditorSelection,\n    options?: EditableAPIDeleteOptions,\n  ) => editor.editable?.delete(selection, options)\n  static findDOMNode = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.findDOMNode(element)\n  }\n  static findByPath = (editor: PortableTextEditor, path: Path) => {\n    return editor.editable?.findByPath(path) || []\n  }\n  static focus = (editor: PortableTextEditor): void => {\n    debug('Host requesting focus')\n    editor.editable?.focus()\n  }\n  static focusBlock = (editor: PortableTextEditor) => {\n    return editor.editable?.focusBlock()\n  }\n  static focusChild = (\n    editor: PortableTextEditor,\n  ): PortableTextChild | undefined => {\n    return editor.editable?.focusChild()\n  }\n  static getSelection = (editor: PortableTextEditor) => {\n    return editor.editable ? editor.editable.getSelection() : null\n  }\n  static getValue = (editor: PortableTextEditor) => {\n    return editor.editable?.getValue()\n  }\n  static hasBlockStyle = (editor: PortableTextEditor, blockStyle: string) => {\n    return editor.editable?.hasBlockStyle(blockStyle)\n  }\n  static hasListStyle = (editor: PortableTextEditor, listStyle: string) => {\n    return editor.editable?.hasListStyle(listStyle)\n  }\n  static isCollapsedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isCollapsedSelection()\n  static isExpandedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isExpandedSelection()\n  static isMarkActive = (editor: PortableTextEditor, mark: string) =>\n    editor.editable?.isMarkActive(mark)\n  static insertChild = (\n    editor: PortableTextEditor,\n    type: SpanSchemaType | ObjectSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    debug(`Host inserting child`)\n    return editor.editable?.insertChild(type, value)\n  }\n  static insertBlock = (\n    editor: PortableTextEditor,\n    type: BlockSchemaType | ObjectSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    return editor.editable?.insertBlock(type, value)\n  }\n  static insertBreak = (editor: PortableTextEditor): void => {\n    return editor.editable?.insertBreak()\n  }\n  static isVoid = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.isVoid(element)\n  }\n  static isObjectPath = (_editor: PortableTextEditor, path: Path): boolean => {\n    if (!path || !Array.isArray(path)) return false\n    const isChildObjectEditPath = path.length > 3 && path[1] === 'children'\n    const isBlockObjectEditPath = path.length > 1 && path[1] !== 'children'\n    return isBlockObjectEditPath || isChildObjectEditPath\n  }\n  static marks = (editor: PortableTextEditor) => {\n    return editor.editable?.marks()\n  }\n  static select = (\n    editor: PortableTextEditor,\n    selection: EditorSelection | null,\n  ) => {\n    debug(`Host setting selection`, selection)\n    editor.editable?.select(selection)\n  }\n  static removeAnnotation = (\n    editor: PortableTextEditor,\n    type: ObjectSchemaType,\n  ) => editor.editable?.removeAnnotation(type)\n  static toggleBlockStyle = (\n    editor: PortableTextEditor,\n    blockStyle: string,\n  ) => {\n    debug(`Host is toggling block style`)\n    return editor.editable?.toggleBlockStyle(blockStyle)\n  }\n  static toggleList = (editor: PortableTextEditor, listStyle: string): void => {\n    return editor.editable?.toggleList(listStyle)\n  }\n  static toggleMark = (editor: PortableTextEditor, mark: string): void => {\n    debug(`Host toggling mark`, mark)\n    editor.editable?.toggleMark(mark)\n  }\n  static getFragment = (\n    editor: PortableTextEditor,\n  ): PortableTextBlock[] | undefined => {\n    debug(`Host getting fragment`)\n    return editor.editable?.getFragment()\n  }\n  static undo = (editor: PortableTextEditor): void => {\n    debug('Host undoing')\n    editor.editable?.undo()\n  }\n  static redo = (editor: PortableTextEditor): void => {\n    debug('Host redoing')\n    editor.editable?.redo()\n  }\n  static isSelectionsOverlapping = (\n    editor: PortableTextEditor,\n    selectionA: EditorSelection,\n    selectionB: EditorSelection,\n  ) => {\n    return editor.editable?.isSelectionsOverlapping(selectionA, selectionB)\n  }\n}\n\nfunction RoutePatchesObservableToEditorActor(props: {\n  editorActor: EditorActor\n  patches$: PatchObservable\n}) {\n  useEffect(() => {\n    const subscription = props.patches$.subscribe((payload) => {\n      props.editorActor.send({\n        type: 'patches',\n        ...payload,\n      })\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor, props.patches$])\n\n  return null\n}\n","import type {\n  Path,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {\n  startTransition,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type ReactElement,\n} from 'react'\nimport {Text} from 'slate'\nimport {useSelected, type RenderLeafProps} from 'slate-react'\nimport type {\n  BlockAnnotationRenderProps,\n  BlockChildRenderProps,\n  BlockDecoratorRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderAnnotationFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n} from '../../types/editor'\nimport {debugWithName} from '../../utils/debug'\nimport type {EditorActor} from '../editor-machine'\nimport {usePortableTextEditor} from '../hooks/usePortableTextEditor'\nimport {DefaultAnnotation} from '../nodes/DefaultAnnotation'\nimport {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('components:Leaf')\n\nconst EMPTY_MARKS: string[] = []\n\n/**\n * @internal\n */\nexport interface LeafProps extends RenderLeafProps {\n  editorActor: EditorActor\n  children: ReactElement\n  schemaTypes: PortableTextMemberSchemaTypes\n  renderAnnotation?: RenderAnnotationFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  readOnly: boolean\n}\n\n/**\n * Renders Portable Text span nodes in Slate\n * @internal\n */\nexport const Leaf = (props: LeafProps) => {\n  const {\n    editorActor,\n    attributes,\n    children,\n    leaf,\n    schemaTypes,\n    renderChild,\n    renderDecorator,\n    renderAnnotation,\n  } = props\n  const spanRef = useRef<HTMLElement>(null)\n  const portableTextEditor = usePortableTextEditor()\n  const blockSelected = useSelected()\n  const [focused, setFocused] = useState(false)\n  const [selected, setSelected] = useState(false)\n  const block = children.props.parent as PortableTextTextBlock | undefined\n  const path: Path = useMemo(\n    () => (block ? [{_key: block?._key}, 'children', {_key: leaf._key}] : []),\n    [block, leaf._key],\n  )\n  const decoratorValues = useMemo(\n    () => schemaTypes.decorators.map((dec) => dec.value),\n    [schemaTypes.decorators],\n  )\n  const marks: string[] = useMemo(\n    () =>\n      uniq(\n        (leaf.marks || EMPTY_MARKS).filter((mark) =>\n          decoratorValues.includes(mark),\n        ),\n      ),\n    [decoratorValues, leaf.marks],\n  )\n  const annotationMarks = Array.isArray(leaf.marks) ? leaf.marks : EMPTY_MARKS\n  const annotations = useMemo(\n    () =>\n      annotationMarks\n        .map(\n          (mark) =>\n            !decoratorValues.includes(mark) &&\n            block?.markDefs?.find((def) => def._key === mark),\n        )\n        .filter(Boolean) as PortableTextObject[],\n    [annotationMarks, block, decoratorValues],\n  )\n\n  const shouldTrackSelectionAndFocus = annotations.length > 0 && blockSelected\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      setFocused(false)\n      return\n    }\n    const sel = PortableTextEditor.getSelection(portableTextEditor)\n    if (\n      sel &&\n      isEqual(sel.focus.path, path) &&\n      PortableTextEditor.isCollapsedSelection(portableTextEditor)\n    ) {\n      startTransition(() => {\n        setFocused(true)\n      })\n    }\n  }, [shouldTrackSelectionAndFocus, path, portableTextEditor])\n\n  // Function to check if this leaf is currently inside the user's text selection\n  const setSelectedFromRange = useCallback(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return\n    }\n    debug('Setting selection and focus from range')\n    const winSelection = window.getSelection()\n    if (!winSelection) {\n      setSelected(false)\n      return\n    }\n    if (winSelection && winSelection.rangeCount > 0) {\n      const range = winSelection.getRangeAt(0)\n      if (spanRef.current && range.intersectsNode(spanRef.current)) {\n        setSelected(true)\n      } else {\n        setSelected(false)\n      }\n    } else {\n      setSelected(false)\n    }\n  }, [shouldTrackSelectionAndFocus])\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return undefined\n    }\n\n    const onBlur = editorActor.on('blur', () => {\n      setFocused(false)\n      setSelected(false)\n    })\n\n    const onFocus = editorActor.on('focus', () => {\n      const sel = PortableTextEditor.getSelection(portableTextEditor)\n      if (\n        sel &&\n        isEqual(sel.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      }\n      setSelectedFromRange()\n    })\n\n    const onSelection = editorActor.on('selection', (event) => {\n      if (\n        event.selection &&\n        isEqual(event.selection.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      } else {\n        setFocused(false)\n      }\n      setSelectedFromRange()\n    })\n\n    return () => {\n      onBlur.unsubscribe()\n      onFocus.unsubscribe()\n      onSelection.unsubscribe()\n    }\n  }, [\n    editorActor,\n    path,\n    portableTextEditor,\n    setSelectedFromRange,\n    shouldTrackSelectionAndFocus,\n  ])\n\n  useEffect(() => setSelectedFromRange(), [setSelectedFromRange])\n\n  const content = useMemo(() => {\n    let returnedChildren = children\n    // Render text nodes\n    if (Text.isText(leaf) && leaf._type === schemaTypes.span.name) {\n      marks.forEach((mark) => {\n        const schemaType = schemaTypes.decorators.find(\n          (dec) => dec.value === mark,\n        )\n        if (schemaType && renderDecorator) {\n          const _props: Omit<BlockDecoratorRenderProps, 'type'> =\n            Object.defineProperty(\n              {\n                children: returnedChildren,\n                editorElementRef: spanRef,\n                focused,\n                path,\n                selected,\n                schemaType,\n                value: mark,\n              },\n              'type',\n              {\n                enumerable: false,\n                get() {\n                  console.warn(\n                    \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                  )\n                  return schemaType\n                },\n              },\n            )\n          returnedChildren = renderDecorator(\n            _props as BlockDecoratorRenderProps,\n          )\n        }\n      })\n\n      if (block && annotations.length > 0) {\n        annotations.forEach((annotation) => {\n          const schemaType = schemaTypes.annotations.find(\n            (t) => t.name === annotation._type,\n          )\n          if (schemaType) {\n            if (renderAnnotation) {\n              const _props: Omit<BlockAnnotationRenderProps, 'type'> =\n                Object.defineProperty(\n                  {\n                    block,\n                    children: returnedChildren,\n                    editorElementRef: spanRef,\n                    focused,\n                    path,\n                    selected,\n                    schemaType,\n                    value: annotation,\n                  },\n                  'type',\n                  {\n                    enumerable: false,\n                    get() {\n                      console.warn(\n                        \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                      )\n                      return schemaType\n                    },\n                  },\n                )\n\n              returnedChildren = (\n                <span ref={spanRef}>\n                  {renderAnnotation(_props as BlockAnnotationRenderProps)}\n                </span>\n              )\n            } else {\n              returnedChildren = (\n                <DefaultAnnotation annotation={annotation}>\n                  <span ref={spanRef}>{returnedChildren}</span>\n                </DefaultAnnotation>\n              )\n            }\n          }\n        })\n      }\n      if (block && renderChild) {\n        const child = block.children.find((_child) => _child._key === leaf._key) // Ensure object equality\n        if (child) {\n          const defaultRendered = <>{returnedChildren}</>\n          const _props: Omit<BlockChildRenderProps, 'type'> =\n            Object.defineProperty(\n              {\n                annotations,\n                children: defaultRendered,\n                editorElementRef: spanRef,\n                focused,\n                path,\n                schemaType: schemaTypes.span,\n                selected,\n                value: child,\n              },\n              'type',\n              {\n                enumerable: false,\n                get() {\n                  console.warn(\n                    \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                  )\n                  return schemaTypes.span\n                },\n              },\n            )\n          returnedChildren = renderChild(_props as BlockChildRenderProps)\n        }\n      }\n    }\n    return returnedChildren\n  }, [\n    annotations,\n    block,\n    children,\n    focused,\n    leaf,\n    marks,\n    path,\n    renderAnnotation,\n    renderChild,\n    renderDecorator,\n    schemaTypes.annotations,\n    schemaTypes.decorators,\n    schemaTypes.span,\n    selected,\n  ])\n  return useMemo(\n    () => (\n      <span key={leaf._key} {...attributes} ref={spanRef}>\n        {content}\n      </span>\n    ),\n    [leaf, attributes, content],\n  )\n}\n\nLeaf.displayName = 'Leaf'\n","import type {PortableTextBlock} from '@sanity/types'\nimport {isEqual, noop} from 'lodash'\nimport {\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n  type ClipboardEvent,\n  type CSSProperties,\n  type FocusEventHandler,\n  type KeyboardEvent,\n  type MutableRefObject,\n  type TextareaHTMLAttributes,\n} from 'react'\nimport {\n  Editor,\n  Node,\n  Path,\n  Range as SlateRange,\n  Transforms,\n  type BaseRange,\n  type NodeEntry,\n  type Operation,\n  type Text,\n} from 'slate'\nimport {\n  ReactEditor,\n  Editable as SlateEditable,\n  useSlate,\n  type RenderElementProps,\n  type RenderLeafProps,\n} from 'slate-react'\nimport type {\n  EditorSelection,\n  OnCopyFn,\n  OnPasteFn,\n  RangeDecoration,\n  RenderAnnotationFunction,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderListItemFunction,\n  RenderPlaceholderFunction,\n  RenderStyleFunction,\n  ScrollSelectionIntoViewFunction,\n} from '../types/editor'\nimport type {HotkeyOptions} from '../types/options'\nimport type {SlateTextBlock, VoidElement} from '../types/slate'\nimport {debugWithName} from '../utils/debug'\nimport {\n  moveRangeByOperation,\n  toPortableTextRange,\n  toSlateRange,\n} from '../utils/ranges'\nimport {normalizeSelection} from '../utils/selection'\nimport {\n  fromSlateValue,\n  isEqualToEmptyEditor,\n  toSlateValue,\n} from '../utils/values'\nimport {Element} from './components/Element'\nimport {Leaf} from './components/Leaf'\nimport {EditorActorContext} from './editor-actor-context'\nimport {usePortableTextEditor} from './hooks/usePortableTextEditor'\nimport {usePortableTextEditorReadOnlyStatus} from './hooks/usePortableTextReadOnly'\nimport {createWithHotkeys, createWithInsertData} from './plugins'\nimport {PortableTextEditor} from './PortableTextEditor'\n\nconst debug = debugWithName('component:Editable')\n\nconst PLACEHOLDER_STYLE: CSSProperties = {\n  position: 'absolute',\n  userSelect: 'none',\n  pointerEvents: 'none',\n  left: 0,\n  right: 0,\n}\n\ninterface BaseRangeWithDecoration extends BaseRange {\n  rangeDecoration: RangeDecoration\n}\n\n/**\n * @public\n */\nexport type PortableTextEditableProps = Omit<\n  TextareaHTMLAttributes<HTMLDivElement>,\n  'onPaste' | 'onCopy' | 'onBeforeInput'\n> & {\n  hotkeys?: HotkeyOptions\n  onBeforeInput?: (event: InputEvent) => void\n  onPaste?: OnPasteFn\n  onCopy?: OnCopyFn\n  ref: MutableRefObject<HTMLDivElement | null>\n  rangeDecorations?: RangeDecoration[]\n  renderAnnotation?: RenderAnnotationFunction\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  renderListItem?: RenderListItemFunction\n  renderPlaceholder?: RenderPlaceholderFunction\n  renderStyle?: RenderStyleFunction\n  scrollSelectionIntoView?: ScrollSelectionIntoViewFunction\n  selection?: EditorSelection\n  spellCheck?: boolean\n}\n\n/**\n * @public\n */\nexport const PortableTextEditable = forwardRef<\n  Omit<HTMLDivElement, 'as' | 'onPaste' | 'onBeforeInput'>,\n  PortableTextEditableProps\n>(function PortableTextEditable(props, forwardedRef) {\n  const {\n    hotkeys,\n    onBlur,\n    onFocus,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    onClick,\n    rangeDecorations,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderListItem,\n    renderPlaceholder,\n    renderStyle,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props\n\n  const portableTextEditor = usePortableTextEditor()\n  const readOnly = usePortableTextEditorReadOnlyStatus()\n  const ref = useRef<HTMLDivElement | null>(null)\n  const [editableElement, setEditableElement] = useState<HTMLDivElement | null>(\n    null,\n  )\n  const [hasInvalidValue, setHasInvalidValue] = useState(false)\n  const [rangeDecorationState, setRangeDecorationsState] = useState<\n    BaseRangeWithDecoration[]\n  >([])\n\n  // Forward ref to parent component\n  useImperativeHandle<HTMLDivElement | null, HTMLDivElement | null>(\n    forwardedRef,\n    () => ref.current,\n  )\n\n  const rangeDecorationsRef = useRef(rangeDecorations)\n\n  const editorActor = useContext(EditorActorContext)\n  const {schemaTypes} = portableTextEditor\n  const slateEditor = useSlate()\n\n  const blockTypeName = schemaTypes.block.name\n\n  // React/UI-specific plugins\n  const withInsertData = useMemo(\n    () => createWithInsertData(editorActor, schemaTypes),\n    [editorActor, schemaTypes],\n  )\n  const withHotKeys = useMemo(\n    () => createWithHotkeys(portableTextEditor, hotkeys),\n    [hotkeys, portableTextEditor],\n  )\n\n  // Output a minimal React editor inside Editable when in readOnly mode.\n  // NOTE: make sure all the plugins used here can be safely run over again at any point.\n  // There will be a problem if they redefine editor methods and then calling the original method within themselves.\n  useMemo(() => {\n    if (readOnly) {\n      debug('Editable is in read only mode')\n      return withInsertData(slateEditor)\n    }\n    debug('Editable is in edit mode')\n    return withInsertData(withHotKeys(slateEditor))\n  }, [readOnly, slateEditor, withHotKeys, withInsertData])\n\n  const renderElement = useCallback(\n    (eProps: RenderElementProps) => (\n      <Element\n        {...eProps}\n        readOnly={readOnly}\n        renderBlock={renderBlock}\n        renderChild={renderChild}\n        renderListItem={renderListItem}\n        renderStyle={renderStyle}\n        schemaTypes={schemaTypes}\n        spellCheck={spellCheck}\n      />\n    ),\n    [\n      schemaTypes,\n      spellCheck,\n      readOnly,\n      renderBlock,\n      renderChild,\n      renderListItem,\n      renderStyle,\n    ],\n  )\n\n  const renderLeaf = useCallback(\n    (\n      lProps: RenderLeafProps & {\n        leaf: Text & {placeholder?: boolean; rangeDecoration?: RangeDecoration}\n      },\n    ) => {\n      if (lProps.leaf._type === 'span') {\n        let rendered = (\n          <Leaf\n            {...lProps}\n            editorActor={editorActor}\n            schemaTypes={schemaTypes}\n            renderAnnotation={renderAnnotation}\n            renderChild={renderChild}\n            renderDecorator={renderDecorator}\n            readOnly={readOnly}\n          />\n        )\n        if (\n          renderPlaceholder &&\n          lProps.leaf.placeholder &&\n          lProps.text.text === ''\n        ) {\n          return (\n            <>\n              <span style={PLACEHOLDER_STYLE} contentEditable={false}>\n                {renderPlaceholder()}\n              </span>\n              {rendered}\n            </>\n          )\n        }\n        const decoration = lProps.leaf.rangeDecoration\n        if (decoration) {\n          rendered = decoration.component({children: rendered})\n        }\n        return rendered\n      }\n      return lProps.children\n    },\n    [\n      editorActor,\n      readOnly,\n      renderAnnotation,\n      renderChild,\n      renderDecorator,\n      renderPlaceholder,\n      schemaTypes,\n    ],\n  )\n\n  const restoreSelectionFromProps = useCallback(() => {\n    if (propsSelection) {\n      debug(`Selection from props ${JSON.stringify(propsSelection)}`)\n      const normalizedSelection = normalizeSelection(\n        propsSelection,\n        fromSlateValue(slateEditor.children, blockTypeName),\n      )\n      if (normalizedSelection !== null) {\n        debug(\n          `Normalized selection from props ${JSON.stringify(normalizedSelection)}`,\n        )\n        const slateRange = toSlateRange(normalizedSelection, slateEditor)\n        if (slateRange) {\n          Transforms.select(slateEditor, slateRange)\n          // Output selection here in those cases where the editor selection was the same, and there are no set_selection operations made.\n          // The selection is usually automatically emitted to change$ by the withPortableTextSelections plugin whenever there is a set_selection operation applied.\n          if (!slateEditor.operations.some((o) => o.type === 'set_selection')) {\n            editorActor.send({\n              type: 'selection',\n              selection: normalizedSelection,\n            })\n          }\n          slateEditor.onChange()\n        }\n      }\n    }\n  }, [blockTypeName, editorActor, propsSelection, slateEditor])\n\n  const syncRangeDecorations = useCallback(\n    (operation?: Operation) => {\n      if (rangeDecorations && rangeDecorations.length > 0) {\n        const newSlateRanges: BaseRangeWithDecoration[] = []\n        rangeDecorations.forEach((rangeDecorationItem) => {\n          const slateRange = toSlateRange(\n            rangeDecorationItem.selection,\n            slateEditor,\n          )\n          if (!SlateRange.isRange(slateRange)) {\n            if (rangeDecorationItem.onMoved) {\n              rangeDecorationItem.onMoved({\n                newSelection: null,\n                rangeDecoration: rangeDecorationItem,\n                origin: 'local',\n              })\n            }\n            return\n          }\n          let newRange: BaseRange | null | undefined\n          if (operation) {\n            newRange = moveRangeByOperation(slateRange, operation)\n            if (\n              (newRange && newRange !== slateRange) ||\n              (newRange === null && slateRange)\n            ) {\n              const value = PortableTextEditor.getValue(portableTextEditor)\n              const newRangeSelection = toPortableTextRange(\n                value,\n                newRange,\n                schemaTypes,\n              )\n              if (rangeDecorationItem.onMoved) {\n                rangeDecorationItem.onMoved({\n                  newSelection: newRangeSelection,\n                  rangeDecoration: rangeDecorationItem,\n                  origin: 'local',\n                })\n              }\n            }\n          }\n          // If the newRange is null, it means that the range is not valid anymore and should be removed\n          // If it's undefined, it means that the slateRange is still valid and should be kept\n          if (newRange !== null) {\n            newSlateRanges.push({\n              ...(newRange || slateRange),\n              rangeDecoration: rangeDecorationItem,\n            })\n          }\n        })\n        if (newSlateRanges.length > 0) {\n          setRangeDecorationsState(newSlateRanges)\n          return\n        }\n      }\n      setRangeDecorationsState((rangeDecorationState) => {\n        // If there's state then we want to reset\n        if (rangeDecorationState.length > 0) {\n          return []\n        }\n        // Otherwise we no-op, React will skip a state update if what we return has reference equality to the previous state\n        return rangeDecorationState\n      })\n    },\n    [portableTextEditor, rangeDecorations, schemaTypes, slateEditor],\n  )\n\n  // Restore selection from props when the editor has been initialized properly with it's value\n  useEffect(() => {\n    const onReady = editorActor.on('ready', () => {\n      restoreSelectionFromProps()\n    })\n    const onInvalidValue = editorActor.on('invalid value', () => {\n      setHasInvalidValue(true)\n    })\n    const onValueChanged = editorActor.on('value changed', () => {\n      setHasInvalidValue(false)\n    })\n\n    return () => {\n      onReady.unsubscribe()\n      onInvalidValue.unsubscribe()\n      onValueChanged.unsubscribe()\n    }\n  }, [editorActor, restoreSelectionFromProps])\n\n  // Restore selection from props when it changes\n  useEffect(() => {\n    if (propsSelection && !hasInvalidValue) {\n      restoreSelectionFromProps()\n    }\n  }, [hasInvalidValue, propsSelection, restoreSelectionFromProps])\n\n  // Store reference to original apply function (see below for usage in useEffect)\n  const originalApply = useMemo(() => slateEditor.apply, [slateEditor])\n\n  const [syncedRangeDecorations, setSyncedRangeDecorations] = useState(false)\n  useEffect(() => {\n    if (!syncedRangeDecorations) {\n      // We only want this to run once, on mount\n      setSyncedRangeDecorations(true)\n      syncRangeDecorations()\n    }\n  }, [syncRangeDecorations, syncedRangeDecorations])\n\n  useEffect(() => {\n    if (!isEqual(rangeDecorations, rangeDecorationsRef.current)) {\n      syncRangeDecorations()\n    }\n    rangeDecorationsRef.current = rangeDecorations\n  }, [rangeDecorations, syncRangeDecorations])\n\n  // Sync range decorations after an operation is applied\n  useEffect(() => {\n    slateEditor.apply = (op: Operation) => {\n      originalApply(op)\n      if (op.type !== 'set_selection') {\n        syncRangeDecorations(op)\n      }\n    }\n    return () => {\n      slateEditor.apply = originalApply\n    }\n  }, [originalApply, slateEditor, syncRangeDecorations])\n\n  // Handle from props onCopy function\n  const handleCopy = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): void | ReactEditor => {\n      if (onCopy) {\n        const result = onCopy(event)\n        // CopyFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      }\n    },\n    [onCopy],\n  )\n\n  // Handle incoming pasting events in the editor\n  const handlePaste = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): Promise<void> | void => {\n      event.preventDefault()\n      if (!slateEditor.selection) {\n        return\n      }\n      if (!onPaste) {\n        debug('Pasting normally')\n        slateEditor.insertData(event.clipboardData)\n        return\n      }\n\n      const value = PortableTextEditor.getValue(portableTextEditor)\n      const ptRange = toPortableTextRange(\n        value,\n        slateEditor.selection,\n        schemaTypes,\n      )\n      const path = ptRange?.focus.path || []\n      const onPasteResult = onPaste({event, value, path, schemaTypes})\n\n      if (onPasteResult === undefined) {\n        debug('No result from custom paste handler, pasting normally')\n        slateEditor.insertData(event.clipboardData)\n      } else {\n        // Resolve it as promise (can be either async promise or sync return value)\n        editorActor.send({type: 'loading'})\n        Promise.resolve(onPasteResult)\n          .then((result) => {\n            debug('Custom paste function from client resolved', result)\n            if (!result || !result.insert) {\n              debug('No result from custom paste handler, pasting normally')\n              slateEditor.insertData(event.clipboardData)\n            } else if (result.insert) {\n              slateEditor.insertFragment(\n                toSlateValue(result.insert as PortableTextBlock[], {\n                  schemaTypes,\n                }),\n              )\n            } else {\n              console.warn(\n                'Your onPaste function returned something unexpected:',\n                result,\n              )\n            }\n          })\n          .catch((error) => {\n            console.error(error)\n            return error\n          })\n          .finally(() => {\n            editorActor.send({type: 'done loading'})\n          })\n      }\n    },\n    [editorActor, onPaste, portableTextEditor, schemaTypes, slateEditor],\n  )\n\n  const handleOnFocus: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onFocus) {\n        onFocus(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        const selection = PortableTextEditor.getSelection(portableTextEditor)\n        // Create an editor selection if it does'nt exist\n        if (selection === null) {\n          Transforms.select(slateEditor, Editor.start(slateEditor, []))\n          slateEditor.onChange()\n        }\n        editorActor.send({type: 'focus', event})\n        const newSelection = PortableTextEditor.getSelection(portableTextEditor)\n        // If the selection is the same, emit it explicitly here as there is no actual onChange event triggered.\n        if (selection === newSelection) {\n          editorActor.send({\n            type: 'selection',\n            selection,\n          })\n        }\n      }\n    },\n    [editorActor, onFocus, portableTextEditor, slateEditor],\n  )\n\n  const handleClick = useCallback(\n    (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      if (onClick) {\n        onClick(event)\n      }\n      // Inserts a new block if it's clicking on the editor, focused on the last block and it's a void element\n      if (slateEditor.selection && event.target === event.currentTarget) {\n        const [lastBlock, path] = Node.last(slateEditor, [])\n        const focusPath = slateEditor.selection.focus.path.slice(0, 1)\n        const lastPath = path.slice(0, 1)\n        if (Path.equals(focusPath, lastPath)) {\n          const node = Node.descendant(slateEditor, path.slice(0, 1)) as\n            | SlateTextBlock\n            | VoidElement\n          if (lastBlock && Editor.isVoid(slateEditor, node)) {\n            Transforms.insertNodes(\n              slateEditor,\n              slateEditor.pteCreateTextBlock({decorators: []}),\n            )\n            slateEditor.onChange()\n          }\n        }\n      }\n    },\n    [onClick, slateEditor],\n  )\n\n  const handleOnBlur: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onBlur) {\n        onBlur(event)\n      }\n      if (!event.isPropagationStopped()) {\n        editorActor.send({type: 'blur', event})\n      }\n    },\n    [editorActor, onBlur],\n  )\n\n  const handleOnBeforeInput = useCallback(\n    (event: InputEvent) => {\n      if (onBeforeInput) {\n        onBeforeInput(event)\n      }\n    },\n    [onBeforeInput],\n  )\n\n  // This function will handle unexpected DOM changes inside the Editable rendering,\n  // and make sure that we can maintain a stable slateEditor.selection when that happens.\n  //\n  // For example, if this Editable is rendered inside something that might re-render\n  // this component (hidden contexts) while the user is still actively changing the\n  // contentEditable, this could interfere with the intermediate DOM selection,\n  // which again could be picked up by ReactEditor's event listeners.\n  // If that range is invalid at that point, the slate.editorSelection could be\n  // set either wrong, or invalid, to which slateEditor will throw exceptions\n  // that are impossible to recover properly from or result in a wrong selection.\n  //\n  // Also the other way around, when the ReactEditor will try to create a DOM Range\n  // from the current slateEditor.selection, it may throw unrecoverable errors\n  // if the current editor.selection is invalid according to the DOM.\n  // If this is the case, default to selecting the top of the document, if the\n  // user already had a selection.\n  const validateSelection = useCallback(() => {\n    if (!slateEditor.selection) {\n      return\n    }\n    const root = ReactEditor.findDocumentOrShadowRoot(slateEditor)\n    const {activeElement} = root\n    // Return if the editor isn't the active element\n    if (ref.current !== activeElement) {\n      return\n    }\n    const window = ReactEditor.getWindow(slateEditor)\n    const domSelection = window.getSelection()\n    if (!domSelection || domSelection.rangeCount === 0) {\n      return\n    }\n    const existingDOMRange = domSelection.getRangeAt(0)\n    try {\n      const newDOMRange = ReactEditor.toDOMRange(\n        slateEditor,\n        slateEditor.selection,\n      )\n      if (\n        newDOMRange.startOffset !== existingDOMRange.startOffset ||\n        newDOMRange.endOffset !== existingDOMRange.endOffset\n      ) {\n        debug('DOM range out of sync, validating selection')\n        // Remove all ranges temporary\n        domSelection?.removeAllRanges()\n        // Set the correct range\n        domSelection.addRange(newDOMRange)\n      }\n    } catch {\n      debug(`Could not resolve selection, selecting top document`)\n      // Deselect the editor\n      Transforms.deselect(slateEditor)\n      // Select top document if there is a top block to select\n      if (slateEditor.children.length > 0) {\n        Transforms.select(slateEditor, [0, 0])\n      }\n      slateEditor.onChange()\n    }\n  }, [ref, slateEditor])\n\n  // Observe mutations (child list and subtree) to this component's DOM,\n  // and make sure the editor selection is valid when that happens.\n  useEffect(() => {\n    if (editableElement) {\n      const mutationObserver = new MutationObserver(validateSelection)\n      mutationObserver.observe(editableElement, {\n        attributeOldValue: false,\n        attributes: false,\n        characterData: false,\n        childList: true,\n        subtree: true,\n      })\n      return () => {\n        mutationObserver.disconnect()\n      }\n    }\n    return undefined\n  }, [validateSelection, editableElement])\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyDown) {\n        props.onKeyDown(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        slateEditor.pteWithHotKeys(event)\n      }\n    },\n    [props, slateEditor],\n  )\n\n  const scrollSelectionIntoViewToSlate = useMemo(() => {\n    // Use slate-react default scroll into view\n    if (scrollSelectionIntoView === undefined) {\n      return undefined\n    }\n    // Disable scroll into view totally\n    if (scrollSelectionIntoView === null) {\n      return noop\n    }\n    // Translate PortableTextEditor prop fn to Slate plugin fn\n    return (_editor: ReactEditor, domRange: Range) => {\n      scrollSelectionIntoView(portableTextEditor, domRange)\n    }\n  }, [portableTextEditor, scrollSelectionIntoView])\n\n  const decorate: (entry: NodeEntry) => BaseRange[] = useCallback(\n    ([, path]) => {\n      if (isEqualToEmptyEditor(slateEditor.children, schemaTypes)) {\n        return [\n          {\n            anchor: {\n              path: [0, 0],\n              offset: 0,\n            },\n            focus: {\n              path: [0, 0],\n              offset: 0,\n            },\n            placeholder: true,\n          },\n        ]\n      }\n      // Editor node has a path length of 0 (should never be decorated)\n      if (path.length === 0) {\n        return []\n      }\n      const result = rangeDecorationState.filter((item) => {\n        // Special case in order to only return one decoration for collapsed ranges\n        if (SlateRange.isCollapsed(item)) {\n          // Collapsed ranges should only be decorated if they are on a block child level (length 2)\n          if (path.length !== 2) {\n            return false\n          }\n          return (\n            Path.equals(item.focus.path, path) &&\n            Path.equals(item.anchor.path, path)\n          )\n        }\n        // Include decorations that either include or intersects with this path\n        return (\n          SlateRange.intersection(item, {\n            anchor: {path, offset: 0},\n            focus: {path, offset: 0},\n          }) || SlateRange.includes(item, path)\n        )\n      })\n      if (result.length > 0) {\n        return result\n      }\n      return []\n    },\n    [slateEditor, schemaTypes, rangeDecorationState],\n  )\n\n  // Set the forwarded ref to be the Slate editable DOM element\n  // Also set the editable element in a state so that the MutationObserver\n  // is setup when this element is ready.\n  useEffect(() => {\n    ref.current = ReactEditor.toDOMNode(\n      slateEditor,\n      slateEditor,\n    ) as HTMLDivElement | null\n    setEditableElement(ref.current)\n  }, [slateEditor, ref])\n\n  if (!portableTextEditor) {\n    return null\n  }\n  return hasInvalidValue ? null : (\n    <SlateEditable\n      {...restProps}\n      autoFocus={false}\n      className={restProps.className || 'pt-editable'}\n      decorate={decorate}\n      onBlur={handleOnBlur}\n      onCopy={handleCopy}\n      onClick={handleClick}\n      onDOMBeforeInput={handleOnBeforeInput}\n      onFocus={handleOnFocus}\n      onKeyDown={handleKeyDown}\n      onPaste={handlePaste}\n      readOnly={readOnly}\n      // We have implemented our own placeholder logic with decorations.\n      // This 'renderPlaceholder' should not be used.\n      renderPlaceholder={undefined}\n      renderElement={renderElement}\n      renderLeaf={renderLeaf}\n      scrollSelectionIntoView={scrollSelectionIntoViewToSlate}\n    />\n  )\n})\n\nPortableTextEditable.displayName = 'ForwardRef(PortableTextEditable)'\n","import { useLayoutEffect, useEffect } from 'react';\n\nvar index = typeof document !== 'undefined' ? useLayoutEffect : useEffect;\n\nexport default index;\n","/**\n * @license React\n * use-sync-external-store-shim.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var e=require(\"react\");function h(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var k=\"function\"===typeof Object.is?Object.is:h,l=e.useState,m=e.useEffect,n=e.useLayoutEffect,p=e.useDebugValue;function q(a,b){var d=b(),f=l({inst:{value:d,getSnapshot:b}}),c=f[0].inst,g=f[1];n(function(){c.value=d;c.getSnapshot=b;r(c)&&g({inst:c})},[a,d,b]);m(function(){r(c)&&g({inst:c});return a(function(){r(c)&&g({inst:c})})},[a]);p(d);return d}\nfunction r(a){var b=a.getSnapshot;a=a.value;try{var d=b();return!k(a,d)}catch(f){return!0}}function t(a,b){return b()}var u=\"undefined\"===typeof window||\"undefined\"===typeof window.document||\"undefined\"===typeof window.document.createElement?t:q;exports.useSyncExternalStore=void 0!==e.useSyncExternalStore?e.useSyncExternalStore:u;\n","/**\n * @license React\n * use-sync-external-store-shim.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n\n          'use strict';\n\n/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\nif (\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===\n    'function'\n) {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n}\n          var React = require('react');\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x, y) {\n  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n  ;\n}\n\nvar objectIs = typeof Object.is === 'function' ? Object.is : is;\n\n// dispatch for CommonJS interop named imports.\n\nvar useState = React.useState,\n    useEffect = React.useEffect,\n    useLayoutEffect = React.useLayoutEffect,\n    useDebugValue = React.useDebugValue;\nvar didWarnOld18Alpha = false;\nvar didWarnUncachedGetSnapshot = false; // Disclaimer: This shim breaks many of the rules of React, and only works\n// because of a very particular set of implementation details and assumptions\n// -- change any one of them and it will break. The most important assumption\n// is that updates are always synchronous, because concurrent rendering is\n// only available in versions of React that also have a built-in\n// useSyncExternalStore API. And we only use this shim when the built-in API\n// does not exist.\n//\n// Do not assume that the clever hacks used by this hook also work in general.\n// The point of this shim is to replace the need for hacks by other libraries.\n\nfunction useSyncExternalStore(subscribe, getSnapshot, // Note: The shim does not use getServerSnapshot, because pre-18 versions of\n// React do not expose a way to check if we're hydrating. So users of the shim\n// will need to track that themselves and return the correct value\n// from `getSnapshot`.\ngetServerSnapshot) {\n  {\n    if (!didWarnOld18Alpha) {\n      if (React.startTransition !== undefined) {\n        didWarnOld18Alpha = true;\n\n        error('You are using an outdated, pre-release alpha of React 18 that ' + 'does not support useSyncExternalStore. The ' + 'use-sync-external-store shim will not work correctly. Upgrade ' + 'to a newer pre-release.');\n      }\n    }\n  } // Read the current snapshot from the store on every render. Again, this\n  // breaks the rules of React, and only works here because of specific\n  // implementation details, most importantly that updates are\n  // always synchronous.\n\n\n  var value = getSnapshot();\n\n  {\n    if (!didWarnUncachedGetSnapshot) {\n      var cachedValue = getSnapshot();\n\n      if (!objectIs(value, cachedValue)) {\n        error('The result of getSnapshot should be cached to avoid an infinite loop');\n\n        didWarnUncachedGetSnapshot = true;\n      }\n    }\n  } // Because updates are synchronous, we don't queue them. Instead we force a\n  // re-render whenever the subscribed state changes by updating an some\n  // arbitrary useState hook. Then, during render, we call getSnapshot to read\n  // the current value.\n  //\n  // Because we don't actually use the state returned by the useState hook, we\n  // can save a bit of memory by storing other stuff in that slot.\n  //\n  // To implement the early bailout, we need to track some things on a mutable\n  // object. Usually, we would put that in a useRef hook, but we can stash it in\n  // our useState hook instead.\n  //\n  // To force a re-render, we call forceUpdate({inst}). That works because the\n  // new object always fails an equality check.\n\n\n  var _useState = useState({\n    inst: {\n      value: value,\n      getSnapshot: getSnapshot\n    }\n  }),\n      inst = _useState[0].inst,\n      forceUpdate = _useState[1]; // Track the latest getSnapshot function with a ref. This needs to be updated\n  // in the layout phase so we can access it during the tearing check that\n  // happens on subscribe.\n\n\n  useLayoutEffect(function () {\n    inst.value = value;\n    inst.getSnapshot = getSnapshot; // Whenever getSnapshot or subscribe changes, we need to check in the\n    // commit phase if there was an interleaved mutation. In concurrent mode\n    // this can happen all the time, but even in synchronous mode, an earlier\n    // effect may have mutated the store.\n\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceUpdate({\n        inst: inst\n      });\n    }\n  }, [subscribe, value, getSnapshot]);\n  useEffect(function () {\n    // Check for changes right before subscribing. Subsequent changes will be\n    // detected in the subscription handler.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceUpdate({\n        inst: inst\n      });\n    }\n\n    var handleStoreChange = function () {\n      // TODO: Because there is no cross-renderer API for batching updates, it's\n      // up to the consumer of this library to wrap their subscription event\n      // with unstable_batchedUpdates. Should we try to detect when this isn't\n      // the case and print a warning in development?\n      // The store changed. Check if the snapshot changed since the last time we\n      // read from the store.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceUpdate({\n          inst: inst\n        });\n      }\n    }; // Subscribe to the store and return a clean-up function.\n\n\n    return subscribe(handleStoreChange);\n  }, [subscribe]);\n  useDebugValue(value);\n  return value;\n}\n\nfunction checkIfSnapshotChanged(inst) {\n  var latestGetSnapshot = inst.getSnapshot;\n  var prevValue = inst.value;\n\n  try {\n    var nextValue = latestGetSnapshot();\n    return !objectIs(prevValue, nextValue);\n  } catch (error) {\n    return true;\n  }\n}\n\nfunction useSyncExternalStore$1(subscribe, getSnapshot, getServerSnapshot) {\n  // Note: The shim does not use getServerSnapshot, because pre-18 versions of\n  // React do not expose a way to check if we're hydrating. So users of the shim\n  // will need to track that themselves and return the correct value\n  // from `getSnapshot`.\n  return getSnapshot();\n}\n\nvar canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');\n\nvar isServerEnvironment = !canUseDOM;\n\nvar shim = isServerEnvironment ? useSyncExternalStore$1 : useSyncExternalStore;\nvar useSyncExternalStore$2 = React.useSyncExternalStore !== undefined ? React.useSyncExternalStore : shim;\n\nexports.useSyncExternalStore = useSyncExternalStore$2;\n          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\nif (\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===\n    'function'\n) {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n}\n        \n  })();\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('../cjs/use-sync-external-store-shim.production.min.js');\n} else {\n  module.exports = require('../cjs/use-sync-external-store-shim.development.js');\n}\n","/**\n * @license React\n * use-sync-external-store-shim/with-selector.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var h=require(\"react\"),n=require(\"use-sync-external-store/shim\");function p(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var q=\"function\"===typeof Object.is?Object.is:p,r=n.useSyncExternalStore,t=h.useRef,u=h.useEffect,v=h.useMemo,w=h.useDebugValue;\nexports.useSyncExternalStoreWithSelector=function(a,b,e,l,g){var c=t(null);if(null===c.current){var f={hasValue:!1,value:null};c.current=f}else f=c.current;c=v(function(){function a(a){if(!c){c=!0;d=a;a=l(a);if(void 0!==g&&f.hasValue){var b=f.value;if(g(b,a))return k=b}return k=a}b=k;if(q(d,a))return b;var e=l(a);if(void 0!==g&&g(b,e))return b;d=a;return k=e}var c=!1,d,k,m=void 0===e?null:e;return[function(){return a(b())},null===m?void 0:function(){return a(m())}]},[b,e,l,g]);var d=r(a,c[0],c[1]);\nu(function(){f.hasValue=!0;f.value=d},[d]);w(d);return d};\n","/**\n * @license React\n * use-sync-external-store-shim/with-selector.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n\n          'use strict';\n\n/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\nif (\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===\n    'function'\n) {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n}\n          var React = require('react');\nvar shim = require('use-sync-external-store/shim');\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x, y) {\n  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n  ;\n}\n\nvar objectIs = typeof Object.is === 'function' ? Object.is : is;\n\nvar useSyncExternalStore = shim.useSyncExternalStore;\n\n// for CommonJS interop.\n\nvar useRef = React.useRef,\n    useEffect = React.useEffect,\n    useMemo = React.useMemo,\n    useDebugValue = React.useDebugValue; // Same as useSyncExternalStore, but supports selector and isEqual arguments.\n\nfunction useSyncExternalStoreWithSelector(subscribe, getSnapshot, getServerSnapshot, selector, isEqual) {\n  // Use this to track the rendered snapshot.\n  var instRef = useRef(null);\n  var inst;\n\n  if (instRef.current === null) {\n    inst = {\n      hasValue: false,\n      value: null\n    };\n    instRef.current = inst;\n  } else {\n    inst = instRef.current;\n  }\n\n  var _useMemo = useMemo(function () {\n    // Track the memoized state using closure variables that are local to this\n    // memoized instance of a getSnapshot function. Intentionally not using a\n    // useRef hook, because that state would be shared across all concurrent\n    // copies of the hook/component.\n    var hasMemo = false;\n    var memoizedSnapshot;\n    var memoizedSelection;\n\n    var memoizedSelector = function (nextSnapshot) {\n      if (!hasMemo) {\n        // The first time the hook is called, there is no memoized result.\n        hasMemo = true;\n        memoizedSnapshot = nextSnapshot;\n\n        var _nextSelection = selector(nextSnapshot);\n\n        if (isEqual !== undefined) {\n          // Even if the selector has changed, the currently rendered selection\n          // may be equal to the new selection. We should attempt to reuse the\n          // current value if possible, to preserve downstream memoizations.\n          if (inst.hasValue) {\n            var currentSelection = inst.value;\n\n            if (isEqual(currentSelection, _nextSelection)) {\n              memoizedSelection = currentSelection;\n              return currentSelection;\n            }\n          }\n        }\n\n        memoizedSelection = _nextSelection;\n        return _nextSelection;\n      } // We may be able to reuse the previous invocation's result.\n\n\n      // We may be able to reuse the previous invocation's result.\n      var prevSnapshot = memoizedSnapshot;\n      var prevSelection = memoizedSelection;\n\n      if (objectIs(prevSnapshot, nextSnapshot)) {\n        // The snapshot is the same as last time. Reuse the previous selection.\n        return prevSelection;\n      } // The snapshot has changed, so we need to compute a new selection.\n\n\n      // The snapshot has changed, so we need to compute a new selection.\n      var nextSelection = selector(nextSnapshot); // If a custom isEqual function is provided, use that to check if the data\n      // has changed. If it hasn't, return the previous selection. That signals\n      // to React that the selections are conceptually equal, and we can bail\n      // out of rendering.\n\n      // If a custom isEqual function is provided, use that to check if the data\n      // has changed. If it hasn't, return the previous selection. That signals\n      // to React that the selections are conceptually equal, and we can bail\n      // out of rendering.\n      if (isEqual !== undefined && isEqual(prevSelection, nextSelection)) {\n        return prevSelection;\n      }\n\n      memoizedSnapshot = nextSnapshot;\n      memoizedSelection = nextSelection;\n      return nextSelection;\n    }; // Assigning this to a constant so that Flow knows it can't change.\n\n\n    // Assigning this to a constant so that Flow knows it can't change.\n    var maybeGetServerSnapshot = getServerSnapshot === undefined ? null : getServerSnapshot;\n\n    var getSnapshotWithSelector = function () {\n      return memoizedSelector(getSnapshot());\n    };\n\n    var getServerSnapshotWithSelector = maybeGetServerSnapshot === null ? undefined : function () {\n      return memoizedSelector(maybeGetServerSnapshot());\n    };\n    return [getSnapshotWithSelector, getServerSnapshotWithSelector];\n  }, [getSnapshot, getServerSnapshot, selector, isEqual]),\n      getSelection = _useMemo[0],\n      getServerSelection = _useMemo[1];\n\n  var value = useSyncExternalStore(subscribe, getSelection, getServerSelection);\n  useEffect(function () {\n    inst.hasValue = true;\n    inst.value = value;\n  }, [value]);\n  useDebugValue(value);\n  return value;\n}\n\nexports.useSyncExternalStoreWithSelector = useSyncExternalStoreWithSelector;\n          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\nif (\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===\n    'function'\n) {\n  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n}\n        \n  })();\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('../cjs/use-sync-external-store-shim/with-selector.production.min.js');\n} else {\n  module.exports = require('../cjs/use-sync-external-store-shim/with-selector.development.js');\n}\n","import * as React from 'react';\nimport { useEffect, useState, useCallback } from 'react';\nimport useIsomorphicLayoutEffect from 'use-isomorphic-layout-effect';\nimport { toObserver, createActor } from 'xstate';\nimport { useSyncExternalStoreWithSelector } from 'use-sync-external-store/shim/with-selector';\nimport { useSyncExternalStore } from 'use-sync-external-store/shim';\n\nconst forEachActor = (actorRef, callback) => {\n  callback(actorRef);\n  const children = actorRef.getSnapshot().children;\n  if (children) {\n    Object.values(children).forEach(child => {\n      forEachActor(child, callback);\n    });\n  }\n};\nfunction stopRootWithRehydration(actorRef) {\n  // persist snapshot here in a custom way allows us to persist inline actors and to preserve actor references\n  // we do it to avoid setState in useEffect when the effect gets \"reconnected\"\n  // this currently only happens in Strict Effects but it simulates the Offscreen aka Activity API\n  // it also just allows us to end up with a somewhat more predictable behavior for the users\n  const persistedSnapshots = [];\n  forEachActor(actorRef, ref => {\n    persistedSnapshots.push([ref, ref.getSnapshot()]);\n    // muting observers allow us to avoid `useSelector` from being notified about the stopped snapshot\n    // React reconnects its subscribers (from the useSyncExternalStore) on its own\n    // and userland subscibers should basically always do the same anyway\n    // as each subscription should have its own cleanup logic and that should be called each such reconnect\n    ref.observers = new Set();\n  });\n  const systemSnapshot = actorRef.system.getSnapshot?.();\n  actorRef.stop();\n  actorRef.system._snapshot = systemSnapshot;\n  persistedSnapshots.forEach(([ref, snapshot]) => {\n    ref._processingStatus = 0;\n    ref._snapshot = snapshot;\n  });\n}\n\nfunction useIdleActorRef(logic, ...[options]) {\n  let [[currentConfig, actorRef], setCurrent] = useState(() => {\n    const actorRef = createActor(logic, options);\n    return [logic.config, actorRef];\n  });\n  if (logic.config !== currentConfig) {\n    const newActorRef = createActor(logic, {\n      ...options,\n      snapshot: actorRef.getPersistedSnapshot({\n        __unsafeAllowInlineActors: true\n      })\n    });\n    setCurrent([logic.config, newActorRef]);\n    actorRef = newActorRef;\n  }\n\n  // TODO: consider using `useAsapEffect` that would do this in `useInsertionEffect` is that's available\n  useIsomorphicLayoutEffect(() => {\n    actorRef.logic.implementations = logic.implementations;\n  });\n  return actorRef;\n}\nfunction useActorRef(machine, ...[options, observerOrListener]) {\n  const actorRef = useIdleActorRef(machine, options);\n  useEffect(() => {\n    if (!observerOrListener) {\n      return;\n    }\n    let sub = actorRef.subscribe(toObserver(observerOrListener));\n    return () => {\n      sub.unsubscribe();\n    };\n  }, [observerOrListener]);\n  useEffect(() => {\n    actorRef.start();\n    return () => {\n      stopRootWithRehydration(actorRef);\n    };\n  }, [actorRef]);\n  return actorRef;\n}\n\nfunction defaultCompare(a, b) {\n  return a === b;\n}\nfunction useSelector(actor, selector, compare = defaultCompare) {\n  const subscribe = useCallback(handleStoreChange => {\n    if (!actor) {\n      return () => {};\n    }\n    const {\n      unsubscribe\n    } = actor.subscribe(handleStoreChange);\n    return unsubscribe;\n  }, [actor]);\n  const boundGetSnapshot = useCallback(() => actor?.getSnapshot(), [actor]);\n  const selectedSnapshot = useSyncExternalStoreWithSelector(subscribe, boundGetSnapshot, boundGetSnapshot, selector, compare);\n  return selectedSnapshot;\n}\n\nfunction createActorContext(actorLogic, actorOptions) {\n  const ReactContext = /*#__PURE__*/React.createContext(null);\n  const OriginalProvider = ReactContext.Provider;\n  function Provider({\n    children,\n    logic: providedLogic = actorLogic,\n    machine,\n    options: providedOptions\n  }) {\n    if (machine) {\n      throw new Error(`The \"machine\" prop has been deprecated. Please use \"logic\" instead.`);\n    }\n    const actor = useActorRef(providedLogic, {\n      ...actorOptions,\n      ...providedOptions\n    });\n    return /*#__PURE__*/React.createElement(OriginalProvider, {\n      value: actor,\n      children\n    });\n  }\n\n  // TODO: add properties to actor ref to make more descriptive\n  Provider.displayName = `ActorProvider`;\n  function useContext() {\n    const actor = React.useContext(ReactContext);\n    if (!actor) {\n      throw new Error(`You used a hook from \"${Provider.displayName}\" but it's not inside a <${Provider.displayName}> component.`);\n    }\n    return actor;\n  }\n  function useSelector$1(selector, compare) {\n    const actor = useContext();\n    return useSelector(actor, selector, compare);\n  }\n  return {\n    Provider: Provider,\n    useActorRef: useContext,\n    useSelector: useSelector$1\n  };\n}\n\n// From https://github.com/reduxjs/react-redux/blob/720f0ba79236cdc3e1115f4ef9a7760a21784b48/src/utils/shallowEqual.ts\nfunction is(x, y) {\n  if (x === y) {\n    return x !== 0 || y !== 0 || 1 / x === 1 / y;\n  } else {\n    return x !== x && y !== y;\n  }\n}\nfunction shallowEqual(objA, objB) {\n  if (is(objA, objB)) return true;\n  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n    return false;\n  }\n  const keysA = Object.keys(objA);\n  const keysB = Object.keys(objB);\n  if (keysA.length !== keysB.length) return false;\n  for (let i = 0; i < keysA.length; i++) {\n    if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction useActor(logic, ...[options]) {\n  const actorRef = useIdleActorRef(logic, options);\n  const getSnapshot = useCallback(() => {\n    return actorRef.getSnapshot();\n  }, [actorRef]);\n  const subscribe = useCallback(handleStoreChange => {\n    const {\n      unsubscribe\n    } = actorRef.subscribe(handleStoreChange);\n    return unsubscribe;\n  }, [actorRef]);\n  const actorSnapshot = useSyncExternalStore(subscribe, getSnapshot, getSnapshot);\n  useEffect(() => {\n    actorRef.start();\n    return () => {\n      stopRootWithRehydration(actorRef);\n    };\n  }, [actorRef]);\n  return [actorSnapshot, actorRef.send, actorRef];\n}\n\n/** @alias useActor */\nfunction useMachine(machine, ...[options]) {\n  return useActor(machine, options);\n}\n\nexport { createActorContext, shallowEqual, useActor, useActorRef, useMachine, useSelector };\n","import type {\n  ArrayDefinition,\n  ArraySchemaType,\n  PortableTextBlock,\n} from '@sanity/types'\nimport {useActorRef} from '@xstate/react'\nimport {getPortableTextMemberSchemaTypes} from '../utils/getPortableTextMemberSchemaTypes'\nimport {compileType} from '../utils/schema'\nimport type {Behavior} from './behavior/behavior.types'\nimport {editorMachine} from './editor-machine'\nimport {defaultKeyGenerator} from './key-generator'\n\n/**\n * @alpha\n */\nexport type EditorConfig = {\n  behaviors?: Array<Behavior>\n  keyGenerator?: () => string\n  schema: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n}\n\n/**\n * @alpha\n */\nexport type Editor = ReturnType<typeof useEditor>\n\n/**\n * @alpha\n */\nexport function useEditor(config: EditorConfig) {\n  const schema = getPortableTextMemberSchemaTypes(\n    config.schema.hasOwnProperty('jsonType')\n      ? config.schema\n      : compileType(config.schema),\n  )\n  const editorActor = useActorRef(editorMachine, {\n    input: {\n      behaviors: config.behaviors,\n      keyGenerator: config.keyGenerator ?? defaultKeyGenerator,\n      schema,\n    },\n  })\n\n  return editorActor\n}\n"],"names":["defineBehavior","behavior","selectionIsCollapsed","context","selection","anchor","path","join","focus","offset","getFocusBlock","key","isKeySegment","_key","undefined","node","value","find","block","getFocusTextBlock","focusBlock","isPortableTextTextBlock","getFocusBlockObject","getFocusChild","children","span","getFocusSpan","focusChild","isPortableTextSpan","getSelectionStartBlock","backward","getSelectionEndBlock","getPreviousBlock","previousBlock","selectionStartBlock","foundSelectionStartBlock","getNextBlock","nextBlock","selectionEndBlock","foundSelectionEndBlock","isEmptyTextBlock","length","text","createMarkdownBehaviors","config","automaticStyleOnSpace","on","guard","event","selectionCollapsed","focusTextBlock","focusSpan","looksLikeMarkdownHeading","test","headingStyle","mapHeadingStyle","schema","looksLikeMarkdownQuote","blockquoteStyle","mapBlockquoteStyle","style","actions","type","_","paths","clearStyleOnBackspace","defaultStyle","mapDefaultStyle","automaticListOnSpace","looksLikeUnorderedList","unorderedListStyle","mapUnorderedListStyle","listItem","looksLikeOrderedList","orderedListStyle","mapOrderedListStyle","props","level","rootName","debug","debugWithName","name","namespace","enabled","createKeyedPath","point","types","blockPath","keyedBlockPath","_type","keyedChildPath","childPath","slice","child","Array","isArray","createArrayedPath","editor","from","Editor","nodes","at","match","n","Element","isElement","isVoid","childIndex","findIndex","isEqual","concat","toPortableTextRange","range","anchorPath","focusPath","Boolean","Range","isRange","isBackward","toSlateRange","moveRangeByOperation","operation","Point","transform","equals","normalizePoint","newPath","newOffset","blockKey","childKey","blk","push","cld","normalizeSelection","newAnchor","newFocus","EMPTY_MARKDEFS","VOID_CHILD_KEY","keepObjectEquality","object","keyMap","toSlateValue","schemaTypes","map","rest","voidChildren","marks","textBlock","hasInlines","hasMissingStyle","hasMissingMarkDefs","markDefs","hasMissingChildren","cType","cKey","cRest","__inline","styles","fromSlateValue","textBlockType","Error","_cType","v","k","t","_i","_c","blockValue","isEqualToEmptyEditor","Text","isText","IS_PROCESSING_REMOTE_CHANGES","WeakMap","IS_PROCESSING_LOCAL_CHANGES","IS_DRAGGING","IS_DRAGGING_BLOCK_ELEMENT","IS_DRAGGING_ELEMENT_TARGET","IS_DRAGGING_BLOCK_TARGET_POSITION","KEY_TO_SLATE_ELEMENT","KEY_TO_VALUE_ELEMENT","SLATE_TO_PORTABLE_TEXT_RANGE","DefaultObject","$","t0","JSON","stringify","t1","jsx","displayName","DefaultBlockObject","styled","div","selected","DefaultListItem","getLeftPositionForListLevel","listLevel","getContentForListLevelAndStyle","listStyle","getCounterIncrementForListLevel","getCounterResetForListLevel","getCounterContentForListLevel","DefaultListItemInner","Number","bullets","normalizedLevel","DraggableBlock","element","readOnly","blockRef","useSlateStatic","dragGhostRef","useRef","isDragOver","setIsDragOver","useState","t2","t3","t4","isInline","blockElement","setBlockElement","t5","t6","current","ReactEditor","toDOMNode","useEffect","t7","isMyDragOver","get","preventDefault","dataTransfer","dropEffect","set","elementRect","getBoundingClientRect","top","height","Y","pageY","loc","Math","abs","handleDragOver","t8","Symbol","for","handleDragLeave","t9","event_0","targetBlock","stopPropagation","delete","document","body","removeChild","dragPosition","targetPath","findPath","myPath","isBefore","Path","originalPath","originalPath_0","Transforms","moveNodes","to","onChange","handleDragEnd","t10","event_1","handleDrop","t11","event_2","target","HTMLElement","opacity","handleDrag","t12","event_3","setData","effectAllowed","dragGhost","cloneNode","customGhost","querySelector","setAttribute","position","left","boxSizing","appendChild","rect","x","clientX","y","clientY","width","setDragImage","handleDragStart","t13","isDraggingOverFirstBlock","t14","isDraggingOverLastBlock","dragPosition_0","isDraggingOverTop","isDraggingOverBottom","t15","t16","borderBottom","zIndex","dropIndicator","t17","Fragment","t18","t19","jsxs","EMPTY_ANNOTATIONS","inlineBlockStyle","display","attributes","renderBlock","renderChild","renderListItem","renderStyle","spellCheck","useSelected","inlineBlockObjectRef","focused","isCollapsed","useMemo","renderedBlock","className","depth","schemaType","inlineObjects","SlateElement","elmPath","debugRenders","annotations","ObjectNode","editorElementRef","isListItem","blockStyleType","item","isListBlock","listType","lists","renderProps","Object","defineProperty","enumerable","warn","propsOrDefaultRendered","blockObjects","renderedBlockFromProps","_props","PortableTextEditorContext","createContext","usePortableTextEditor","useContext","DefaultAnnotation","annotation","alert","handleClick","color","getPortableTextMemberSchemaTypes","portableTextType","blockType","of","findBlockType","childrenField","fields","field","ofType","spanType","memberType","inlineObjectTypes","filter","blockObjectTypes","resolveEnabledStyles","decorators","resolveEnabledDecorators","resolveEnabledListItems","portableText","styleField","btField","textStyles","options","list","listField","listItems","compileType","rawType","Schema","compile","createOperationToPatches","textBlockName","insertTextPatch","beforeValue","isTextBlock","textChild","isTextSpan","prevBlock","prevChild","prevText","patch","diffMatchPatch","removeTextPatch","beforeBlock","prevTextChild","setNodePatch","setNode","omitBy","newProperties","isUndefined","patches","keys","forEach","keyName","val","indexOf","insertNodePatch","targetKey","insert","setIfMissing","splitNodePatch","splitBlock","oldBlock","targetValue","unset","splitSpan","targetSpans","removeNodePatch","spanToRemove","console","mergeNodePatch","updatedBlock","newBlock","updatedSpan","removedSpan","moveNodePatch","targetChild","childToInsert","createWithEventListeners","editorActor","deleteBackward","unit","send","behaviorEvent","deleteForward","insertBreak","insertSoftBreak","insertText","createWithEditableAPI","portableTextEditor","setEditable","blur","toggleMark","mark","pteToggleMark","toggleList","pteToggleListItem","toggleBlockStyle","blockStyle","pteToggleBlockStyle","isMarkActive","pteIsMarkActive","err","undo","redo","select","slateSelection","deselect","Node","descendant","insertChild","some","getSnapshot","keyGenerator","focusChildPath","isSpanNode","focusNode","move","distance","insertNodes","insertBlock","lastBlock","isEditor","reverse","insertNode","removeNodes","hasBlockStyle","pteHasBlockStyle","hasListStyle","pteHasListStyle","includes","findByPath","slatePath","ptBlock","ptChild","findDOMNode","activeAnnotations","spans","def","isAnnotationActive","annotationType","selectionMarkDefs","reduce","accMarkDefs","every","markKey","addAnnotation","originalSelection","returnValue","pteExpandToWord","spanPath","markDefPath","markDefPaths","withoutNormalizing","selectedBlocks","annotationKey","markDef","setNodes","unshift","split","existingSameTypeAnnotations","mode","hanging","voids","pteCreateTextBlock","removeAnnotation","potentialAnnotations","selectedChild","selectedChildPath","annotationToRemove","previousSpansWithSameAnnotation","SlatePath","nextSpansWithSameAnnotation","isAfter","blocks","marksWithoutAnnotation","getSelection","ptRange","existing","getValue","isCollapsedSelection","isExpandedSelection","isExpanded","getFragment","isSelectionsOverlapping","selectionA","selectionB","rangeA","rangeB","withRemoteChanges","fn","prev","isChangingRemotely","isChangingLocally","IS_UDOING","IS_REDOING","withUndoing","isUndoing","setIsUndoing","withRedoing","isRedoing","setIsRedoing","createWithMaxBlocks","maxBlocks","apply","rows","createWithObjectKeys","normalizeNode","properties","entry","isHighSurrogate","char","charCode","charCodeAt","isLowSurrogate","debugVerbose","createApplyPatch","changed","insertPatch","unsetPatch","setPatch","error","findBlockAndChildFromPath","parsePatch","newValue","diffMatchPatchApplyPatches","allowExceedingIndices","diff","cleanupEfficiency","makeDiff","debugState","op","DIFF_INSERT","DIFF_DELETE","DIFF_EQUAL","targetBlockPath","targetChildPath","items","blocksToInsert","targetBlockIndex","normalizedIdx","childrenToInsert","targetChildIndex","childInsertPath","newText","nextRest","prevChildren","prevRest","c","cIndex","newVal","applyAll","previousSelection","_child","i","blockIndex","isKeyedSegment","segment","stateName","findBlockFromPath","index","isMatch","PATCHING","withoutPatching","isPatching","SAVING","REMOTE_PATCHES","UNDO_STEP_LIMIT","isSaving","state","getRemotePatches","createWithUndoRedo","blockSchemaType","previousSnapshot","remotePatches","subscriptions","sub","snapshot","reset","origin","history","undos","redos","splice","time","Date","unsubscribe","operations","step","lastOp","overwrite","shouldOverwrite","save","merge","shouldMerge","newStep","createSelectOperation","timestamp","shift","shouldClear","otherPatches","transformedOperations","flatten","transformOperation","reversedOperations","Operation","inverse","withoutSaving","normalize","pop","transformedOperation","insertBlockIndex","adjustBlockPath","unsetBlockIndex","operationTargetBlock","findOperationTargetBlock","diffPatch","adjustOffsetBy","changedOffset","utf8Start1","diffs","diffType","dType","currentFocus","currentAnchor","createWithPatches","patchFunctions","previousChildren","applyPatch","bufferedPatches","handleBufferedRemotePatches","handlePatches","p","editorWasEmpty","editorIsEmpty","previousValue","createWithPlaceholderBlock","nextPath","next","createWithPortableTextBlockStyle","nodeEntry","SlateText","MAX_LIST_LEVEL","createWithPortableTextLists","listItemStyle","pteUnsetListItem","pteSetListItem","newNode","pteEndList","pteIncrementBlockLevels","min","max","isPortableTextBlock","getPreviousSpan","previousSpan","getNextSpan","nextSpan","createWithPortableTextMarkModel","forceNewSelection","nextNode","mergeNodes","parent","decorator","orphanedAnnotations","markDefKeys","Set","newMarkDefs","has","add","previousSelectionIsCollapsed","newSelectionIsCollapsed","newFocusSpan","movedToNextSpan","movedToPreviousSpan","_block","previousSpanAnnotations","nextSpanAnnotations","annotationsEnding","annotationsStarting","collapsedSelection","marksWithoutAnnotations","spanHasAnnotations","spanIsEmpty","atTheBeginningOfSpan","atTheEndOfSpan","spanAnnotations","previousSpanHasAnnotations","previousSpanHasSameAnnotations","previousSpanHasSameAnnotation","previousSpanHasSameMarks","nextSpanSharesSomeAnnotations","deletingFromTheEnd","deletingAllText","nextSpanHasSameAnnotation","marksWithoutAnnotationMarks","oldDefs","uniq","addMark","splitTextNodes","removeMark","eMark","lonelyEmptySpan","existingMarks","existingMarksWithoutDecorator","existingMark","selectedNodes","createWithPortableTextSelections","prevSelection","emitPortableTextSelection","hasChanges","createWithSchemaTypes","isPortableTextListBlock","obj","createWithUtils","textNode","focusOffset","charsBefore","charsAfter","isEmpty","str","whiteSpaceBeforeIndex","newStartOffset","whiteSpaceAfterIndex","newEndOffset","isNaN","setSelection","DEFAULT_HOTKEYS","custom","createWithHotkeys","hotkeysFromOptions","reservedHotkeys","activeHotkeys","pteWithHotKeys","cat","hotkey","isHotkey","nativeEvent","possibleMark","possibleCommand","command","isEnter","isTab","isShiftEnter","isShiftTab","isArrowDown","isArrowUp","isFirstBlock","hasAnnotationFocus","m","start","edges","atStartOfNode","isStart","focusBlockPath","validateValue","resolution","valid","validChildTypes","validBlockTypes","description","action","i18n","isPlainObject","String","values","currentBlockTypeName","expectedTypeName","typeName","newSpan","autoResolve","allUsedMarks","unusedMarkDefs","markDefKey","toString","orphanedMarks","dec","spanChildren","orphaned","cMrk","newChild","childType","createWithInsertData","blockTypeName","spanTypeName","whitespaceOnPasteMode","unstable_whitespaceOnPasteMode","toPlainText","title","setFragmentData","data","originEvent","end","startVoid","void","endVoid","domRange","toDOMRange","contents","cloneContents","voidNode","r","cloneRange","domNode","setEndAfter","querySelectorAll","zw","isNewline","getAttribute","textContent","elm","removeAttribute","hasAttribute","ownerDocument","createElement","asHTML","innerHTML","fragment","asJSON","asPlainText","clearData","insertPortableTextData","pText","getData","parsed","parse","slateValue","_regenerateKeys","validation","errorDescription","insertTextOrHTMLData","html","insertedType","htmlToBlocks","normalizeBlock","textToHtml","escapeHtml","line","replace","_insertFragment","insertData","insertFragmentData","insertFragment","entityMap","s","editorTypes","NewNodeNoDefs","allowedAnnotations","oldKey","newKey","nodeWithNewKeys","splitNodes","originalFnMap","withPlugins","e","destroy","operationToPatches","withObjectKeys","withSchemaTypes","withEditableAPI","withPatches","withMaxBlocks","withPortableTextLists","withUndoRedo","withPortableTextMarkModel","withPortableTextBlockStyle","withPlaceholderBlock","withUtils","withPortableTextSelections","withEventListeners","originalFunctions","subscribe","noop","unsubscribes","subscribeFn","unsubscribeFn","SlateContainer","_sub","withReact","createEditor","slateEditor","initialValue","Slate","PortableTextEditorReadOnlyContext","usePortableTextEditorReadOnlyStatus","CURRENT_VALUE","useSyncValue","useSlate","updateValueFunctionRef","updateFromCurrentValue","useCallback","currentValue","updateValueDebounced","debounce","trailing","leading","updateFunction","isProcessingLocalChanges","isProcessingRemoteChanges","isChanged","isValid","hadSelection","childrenLength","slateValueFromProps","currentBlock","currentBlockIndex","validationValue","_updateBlock","_replaceBlock","currentSelection","selectionFocusOnBlock","oldBlockChildrenLength","currentBlockChild","currentBlockChildIndex","oldBlockChild","isChildChanged","isTextChanged","FLUSH_PATCHES_THROTTLED_MS","process","env","NODE_ENV","Synchronizer","pendingPatches","syncValue","onFlushPendingPatches","change","handleChange","useEffectEvent","onFlushPendingPatchesThrottled","throttle","isNormalizing","bb18","isLoading","handleOnline","subscription","isInitialValueFromProps","EditorActorContext","insertBreakActionImplementation","focusDecorators","focusAnnotations","atTheStartOfBlock","nextBlockPath","lastFocusBlockChild","atTheEndOfBlock","nextNodePath","newMarkDefKeys","Map","prevNodeSpans","prevNodeSpan","newMarks","behaviorActionImplementations","set block","unset block","unsetNodes","delete backward","delete forward","location","insert text","insert text block","effect","performAction","performDefaultAction","breakingVoidBlock","deletingEmptyTextBlockAfterBlockObject","deletingEmptyTextBlockBeforeBlockObject","coreBlockObjectBehaviors","clearListOnBackspace","unindentListOnBackspace","coreListBehaviors","softReturn","coreBehaviors","networkLogic","fromCallback","sendBack","onlineHandler","offlineHandler","addEventListener","window","removeEventListener","editorMachine","setup","events","emitted","input","assign","behaviors","assertEvent","emit","pendingEvents","enqueueActions","enqueue","defaultAction","eventBehaviors","behaviorContext","behaviorOverwritten","eventBehavior","shouldRun","actionIntendSets","actionSet","actionIntends","actionIntend","raise","actors","createMachine","id","invoke","src","initial","states","pristine","idle","normalizing","mutation","dirty","PortableTextEditorSelectionContext","usePortableTextEditorSelection","PortableTextEditorSelectionProvider","startTransition","defaultKeyGenerator","randomKey","PortableTextEditor","Component","change$","Subject","constructor","incomingPatches$","hasOwnProperty","createActor","componentDidUpdate","prevProps","editorRef","editable","render","parseInt","legacyPatches","patches$","isObjectPath","_editor","isChildObjectEditPath","RoutePatchesObservableToEditorActor","payload","EMPTY_MARKS","Leaf","leaf","renderDecorator","renderAnnotation","spanRef","blockSelected","setFocused","setSelected","decoratorValues","annotationMarks","shouldTrackSelectionAndFocus","sel","setSelectedFromRange","winSelection","rangeCount","getRangeAt","intersectsNode","onBlur","onFocus","onSelection","content","returnedChildren","PLACEHOLDER_STYLE","userSelect","pointerEvents","right","PortableTextEditable","forwardRef","forwardedRef","hotkeys","onBeforeInput","onPaste","onCopy","onClick","rangeDecorations","renderPlaceholder","propsSelection","scrollSelectionIntoView","restProps","ref","editableElement","setEditableElement","hasInvalidValue","setHasInvalidValue","rangeDecorationState","setRangeDecorationsState","rangeDecorationsRef","withInsertData","withHotKeys","renderElement","eProps","renderLeaf","lProps","rendered","placeholder","decoration","rangeDecoration","component","restoreSelectionFromProps","normalizedSelection","slateRange","o","syncRangeDecorations","newSlateRanges","rangeDecorationItem","SlateRange","onMoved","newSelection","newRange","newRangeSelection","onReady","onInvalidValue","onValueChanged","originalApply","syncedRangeDecorations","setSyncedRangeDecorations","handleCopy","handlePaste","clipboardData","onPasteResult","Promise","resolve","then","result","catch","finally","handleOnFocus","isDefaultPrevented","currentTarget","last","lastPath","handleOnBlur","isPropagationStopped","handleOnBeforeInput","validateSelection","root","findDocumentOrShadowRoot","activeElement","domSelection","getWindow","existingDOMRange","newDOMRange","startOffset","endOffset","removeAllRanges","addRange","mutationObserver","MutationObserver","observe","attributeOldValue","characterData","childList","subtree","disconnect","handleKeyDown","onKeyDown","scrollSelectionIntoViewToSlate","decorate","intersection","SlateEditable","useLayoutEffect","require$$0","h","a","b","is","l","useDebugValue","q","d","f","inst","g","u","useSyncExternalStoreShim_production_min","useSyncExternalStore","__REACT_DEVTOOLS_GLOBAL_HOOK__","registerInternalModuleStart","React","ReactSharedInternals","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","format","_len2","arguments","args","_key2","printWarning","ReactDebugCurrentFrame","stack","getStackAddendum","argsWithFormat","Function","prototype","call","objectIs","didWarnOld18Alpha","didWarnUncachedGetSnapshot","getServerSnapshot","cachedValue","_useState","forceUpdate","checkIfSnapshotChanged","handleStoreChange","latestGetSnapshot","prevValue","nextValue","useSyncExternalStore$1","canUseDOM","isServerEnvironment","shim","useSyncExternalStore$2","useSyncExternalStoreShim_development","registerInternalModuleStop","shimModule","exports","require$$1","w","withSelector_production_min","useSyncExternalStoreWithSelector","hasValue","selector","instRef","_useMemo","hasMemo","memoizedSnapshot","memoizedSelection","memoizedSelector","nextSnapshot","_nextSelection","prevSnapshot","nextSelection","maybeGetServerSnapshot","getSnapshotWithSelector","getServerSnapshotWithSelector","getServerSelection","withSelector_development","withSelectorModule","forEachActor","actorRef","callback","stopRootWithRehydration","persistedSnapshots","observers","systemSnapshot","system","stop","_snapshot","_processingStatus","useIdleActorRef","logic","currentConfig","setCurrent","newActorRef","getPersistedSnapshot","__unsafeAllowInlineActors","useIsomorphicLayoutEffect","implementations","useActorRef","machine","observerOrListener","toObserver","useEditor"],"mappings":"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","x_google_ignoreList":[24,32,58,59,60,61,62,63,64,65]}