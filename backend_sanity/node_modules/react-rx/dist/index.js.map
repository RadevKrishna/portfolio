{"version":3,"file":"index.js","sources":["../src/useObservable.ts","../src/useObservableEvent.ts"],"sourcesContent":["import {useCallback, useSyncExternalStore} from 'react'\nimport {\n  asapScheduler,\n  catchError,\n  finalize,\n  type Observable,\n  type ObservedValueOf,\n  of,\n  share,\n  timer,\n} from 'rxjs'\nimport {map, tap} from 'rxjs/operators'\n\nfunction getValue<T>(value: T): T extends () => infer U ? U : T {\n  return typeof value === 'function' ? value() : value\n}\n\ninterface CacheRecord<T> {\n  observable: Observable<void>\n  snapshot: T\n  error?: unknown\n}\n\nconst cache = new WeakMap<Observable<any>, CacheRecord<any>>()\n\n/** @public */\nexport function useObservable<ObservableType extends Observable<any>>(\n  observable: ObservableType,\n  initialValue: ObservedValueOf<ObservableType> | (() => ObservedValueOf<ObservableType>),\n): ObservedValueOf<ObservableType>\n/** @public */\nexport function useObservable<ObservableType extends Observable<any>>(\n  observable: ObservableType,\n): undefined | ObservedValueOf<ObservableType>\n/** @public */\nexport function useObservable<ObservableType extends Observable<any>, InitialValue>(\n  observable: ObservableType,\n  initialValue: InitialValue | (() => InitialValue),\n): InitialValue | ObservedValueOf<ObservableType>\n/** @public */\nexport function useObservable<ObservableType extends Observable<any>, InitialValue>(\n  observable: ObservableType,\n  initialValue?: InitialValue | (() => InitialValue),\n): InitialValue | ObservedValueOf<ObservableType> {\n  if (!cache.has(observable)) {\n    const entry: Partial<CacheRecord<ObservedValueOf<ObservableType>>> = {\n      snapshot: getValue(initialValue) as ObservedValueOf<ObservableType>,\n    }\n    entry.observable = observable.pipe(\n      map((value) => ({snapshot: value, error: undefined})),\n      catchError((error) => of({snapshot: undefined, error})),\n      tap(({snapshot, error}) => {\n        entry.snapshot = snapshot\n        entry.error = error\n      }),\n      // Note: any value or error emitted by the provided observable will be mapped to the cache entry's mutable state\n      // and the observable is thereafter only used as a notifier to call `onStoreChange`, hence the `void` return type.\n      map((value) => void value),\n      // Ensure that the cache entry is deleted when the observable completes or errors.\n      finalize(() => cache.delete(observable)),\n      share({resetOnRefCountZero: () => timer(0, asapScheduler)}),\n    )\n\n    // Eagerly subscribe to sync set `entry.currentValue` to what the observable returns, and keep the observable alive until the component unmounts.\n    const subscription = entry.observable.subscribe()\n    subscription.unsubscribe()\n\n    cache.set(observable, entry as CacheRecord<ObservedValueOf<ObservableType>>)\n  }\n  const instance = cache.get(observable)!\n\n  const subscribe = useCallback(\n    (onStoreChange: () => void) => {\n      const subscription = instance.observable.subscribe(onStoreChange)\n      return () => {\n        subscription.unsubscribe()\n      }\n    },\n    [instance.observable],\n  )\n\n  return useSyncExternalStore<ObservedValueOf<ObservableType>>(\n    subscribe,\n    () => {\n      if (instance.error) {\n        throw instance.error\n      }\n      return instance.snapshot\n    },\n    typeof initialValue === 'undefined'\n      ? undefined\n      : () => getValue(initialValue) as ObservedValueOf<ObservableType>,\n  )\n}\n","import {observableCallback} from 'observable-callback'\nimport {useEffect, useState} from 'react'\nimport {type Observable} from 'rxjs'\nimport {useEffectEvent} from 'use-effect-event'\n\n/** @public */\nexport function useObservableEvent<T, U>(\n  handleEvent: (arg: Observable<T>) => Observable<U>,\n): (arg: T) => void {\n  const [[calls$, call]] = useState(() => observableCallback<T>())\n\n  const onEvent = useEffectEvent((observable: Observable<T>) => handleEvent(observable))\n\n  useEffect(() => {\n    const subscription = calls$.pipe((observable) => onEvent(observable)).subscribe()\n    return () => subscription.unsubscribe()\n  }, [calls$, onEvent])\n\n  return call\n}\n"],"names":["getValue","value","cache","WeakMap","useObservable","observable","initialValue","$","_c","has","entry","snapshot","pipe","map","_temp","catchError","_temp2","tap","t0","error","error_0","_temp3","finalize","delete","share","resetOnRefCountZero","_temp4","subscribe","unsubscribe","set","get","instance","t1","onStoreChange","subscription_0","subscription","t2","t3","undefined","useSyncExternalStore","timer","asapScheduler","value_0","of","useObservableEvent","handleEvent","useState","calls$","call","onEvent","useEffectEvent","observable_0","useEffect","observableCallback"],"mappings":"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"}